
STM32_VIDEO_SURVEILLANCE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b830  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  0800b9b8  0800b9b8  0000c9b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800baf4  0800baf4  0000d098  2**0
                  CONTENTS
  4 .ARM          00000008  0800baf4  0800baf4  0000caf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bafc  0800bafc  0000d098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bafc  0800bafc  0000cafc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bb00  0800bb00  0000cb00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  0800bb04  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d098  2**0
                  CONTENTS
 10 .bss          00001a40  20000098  20000098  0000d098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001ad8  20001ad8  0000d098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002e1c8  00000000  00000000  0000d0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004bb3  00000000  00000000  0003b290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e0  00000000  00000000  0003fe48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c89  00000000  00000000  00040f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020de3  00000000  00000000  00041bb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e4ce  00000000  00000000  00062994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007f37b  00000000  00000000  00080e62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001001dd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000487c  00000000  00000000  00100220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  00104a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b9a0 	.word	0x0800b9a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	0800b9a0 	.word	0x0800b9a0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
static void DCMI_Config(void);
void MX_USB_HOST_Process(void);


int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0

	HAL_Init();
 80004bc:	f000 fbca 	bl	8000c54 <HAL_Init>

	// configure the system clock
	SystemClock_Config();
 80004c0:	f000 f816 	bl	80004f0 <SystemClock_Config>

	// configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80004c4:	f000 f87a 	bl	80005bc <PeriphCommonClock_Config>

	// peripheral initialization
	GPIO_Config();
 80004c8:	f000 f8d0 	bl	800066c <GPIO_Config>
	TIM1_Config();
 80004cc:	f005 fa94 	bl	80059f8 <TIM1_Config>
	DMA_Config();
 80004d0:	f000 f8b8 	bl	8000644 <DMA_Config>
	DCMI_Config();
 80004d4:	f000 f88e 	bl	80005f4 <DCMI_Config>
	MX_FATFS_Init();
 80004d8:	f005 fab8 	bl	8005a4c <MX_FATFS_Init>
	MX_LIBJPEG_Init();
 80004dc:	f005 fbe0 	bl	8005ca0 <MX_LIBJPEG_Init>
	MX_USB_HOST_Init();
 80004e0:	f00a fa58 	bl	800a994 <MX_USB_HOST_Init>

	// turn on USB powering
	MX_DriverVbusFS(0);
 80004e4:	2000      	movs	r0, #0
 80004e6:	f00a fd75 	bl	800afd4 <MX_DriverVbusFS>

	while (1)
	{

		MX_USB_HOST_Process();
 80004ea:	f00a fa79 	bl	800a9e0 <MX_USB_HOST_Process>
 80004ee:	e7fc      	b.n	80004ea <main+0x32>

080004f0 <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b092      	sub	sp, #72	@ 0x48
 80004f4:	af00      	add	r7, sp, #0

	RCC_OscInit_t RCC_OscInitStruct = {0};
 80004f6:	f107 0318 	add.w	r3, r7, #24
 80004fa:	2230      	movs	r2, #48	@ 0x30
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f00b f83a 	bl	800b578 <memset>
	RCC_ClkInit_t RCC_ClkInitStruct = {0};
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
 8000510:	611a      	str	r2, [r3, #16]

	RCC->APB1ENR.bit.pwren = SET;
 8000512:	4a28      	ldr	r2, [pc, #160]	@ (80005b4 <SystemClock_Config+0xc4>)
 8000514:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8000516:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800051a:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR->CR.bit.vos = 1;
 800051c:	4a26      	ldr	r2, [pc, #152]	@ (80005b8 <SystemClock_Config+0xc8>)
 800051e:	6813      	ldr	r3, [r2, #0]
 8000520:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000524:	6013      	str	r3, [r2, #0]

	//HSE config
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000526:	2301      	movs	r3, #1
 8000528:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800052a:	2301      	movs	r3, #1
 800052c:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.State = RCC_PLL_ON;
 800052e:	2302      	movs	r3, #2
 8000530:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.Source = 1;
 8000532:	2301      	movs	r3, #1
 8000534:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.M = 4;
 8000536:	2304      	movs	r3, #4
 8000538:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.N= 168;
 800053a:	23a8      	movs	r3, #168	@ 0xa8
 800053c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.P= 0;	// PLL division by 2
 800053e:	2300      	movs	r3, #0
 8000540:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.Q= 7;
 8000542:	2307      	movs	r3, #7
 8000544:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscConfig(&RCC_OscInitStruct);
 8000546:	f107 0318 	add.w	r3, r7, #24
 800054a:	4618      	mov	r0, r3
 800054c:	f004 ffcc 	bl	80054e8 <RCC_OscConfig>

	//LSI configuration
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI;
 8000550:	2308      	movs	r3, #8
 8000552:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000554:	2301      	movs	r3, #1
 8000556:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscConfig(&RCC_OscInitStruct);
 8000558:	f107 0318 	add.w	r3, r7, #24
 800055c:	4618      	mov	r0, r3
 800055e:	f004 ffc3 	bl	80054e8 <RCC_OscConfig>

	// configuration of the rest of the clocks for buses and CPU
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK;
 8000562:	2302      	movs	r3, #2
 8000564:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000566:	2302      	movs	r3, #2
 8000568:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800056e:	2305      	movs	r3, #5
 8000570:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000572:	2304      	movs	r3, #4
 8000574:	617b      	str	r3, [r7, #20]
	RCC_ClockConfig(&RCC_ClkInitStruct);
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	4618      	mov	r0, r3
 800057a:	f005 f881 	bl	8005680 <RCC_ClockConfig>

	// SYSCLK initialization
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
 800057e:	2301      	movs	r3, #1
 8000580:	607b      	str	r3, [r7, #4]
	RCC_ClockConfig(&RCC_ClkInitStruct);
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	4618      	mov	r0, r3
 8000586:	f005 f87b 	bl	8005680 <RCC_ClockConfig>

	// PCLK1 initialization
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_PCLK1;
 800058a:	2304      	movs	r3, #4
 800058c:	607b      	str	r3, [r7, #4]
	RCC_ClockConfig(&RCC_ClkInitStruct);
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	4618      	mov	r0, r3
 8000592:	f005 f875 	bl	8005680 <RCC_ClockConfig>

	//PCLK2 initialization
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_PCLK2;
 8000596:	2308      	movs	r3, #8
 8000598:	607b      	str	r3, [r7, #4]
	RCC_ClockConfig(&RCC_ClkInitStruct);
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	4618      	mov	r0, r3
 800059e:	f005 f86f 	bl	8005680 <RCC_ClockConfig>

	// configuration of the MCO2 that is used for camera XCLK
	RCC_MCOConfig(RCC_MCO2, 1, RCC_MCODIV_4);
 80005a2:	2206      	movs	r2, #6
 80005a4:	2101      	movs	r1, #1
 80005a6:	2001      	movs	r0, #1
 80005a8:	f005 f9c0 	bl	800592c <RCC_MCOConfig>

}
 80005ac:	bf00      	nop
 80005ae:	3748      	adds	r7, #72	@ 0x48
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40023800 	.word	0x40023800
 80005b8:	40007000 	.word	0x40007000

080005bc <PeriphCommonClock_Config>:

void PeriphCommonClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005c2:	463b      	mov	r3, r7
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_PLLI2S;
 80005ce:	2304      	movs	r3, #4
 80005d0:	603b      	str	r3, [r7, #0]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80005d2:	23c0      	movs	r3, #192	@ 0xc0
 80005d4:	607b      	str	r3, [r7, #4]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 4;
 80005d6:	2304      	movs	r3, #4
 80005d8:	60bb      	str	r3, [r7, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005da:	463b      	mov	r3, r7
 80005dc:	4618      	mov	r0, r3
 80005de:	f003 fa47 	bl	8003a70 <HAL_RCCEx_PeriphCLKConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <PeriphCommonClock_Config+0x30>
	{
	Error_Handler();
 80005e8:	f000 f8b4 	bl	8000754 <Error_Handler>
	}
}
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <DCMI_Config>:

static void DCMI_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	hdcmi.Instance = DCMI;
 80005f8:	4b10      	ldr	r3, [pc, #64]	@ (800063c <DCMI_Config+0x48>)
 80005fa:	4a11      	ldr	r2, [pc, #68]	@ (8000640 <DCMI_Config+0x4c>)
 80005fc:	601a      	str	r2, [r3, #0]
	hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80005fe:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <DCMI_Config+0x48>)
 8000600:	2200      	movs	r2, #0
 8000602:	605a      	str	r2, [r3, #4]
	hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000604:	4b0d      	ldr	r3, [pc, #52]	@ (800063c <DCMI_Config+0x48>)
 8000606:	2220      	movs	r2, #32
 8000608:	609a      	str	r2, [r3, #8]
	hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800060a:	4b0c      	ldr	r3, [pc, #48]	@ (800063c <DCMI_Config+0x48>)
 800060c:	2200      	movs	r2, #0
 800060e:	60da      	str	r2, [r3, #12]
	hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000610:	4b0a      	ldr	r3, [pc, #40]	@ (800063c <DCMI_Config+0x48>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
	hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000616:	4b09      	ldr	r3, [pc, #36]	@ (800063c <DCMI_Config+0x48>)
 8000618:	2200      	movs	r2, #0
 800061a:	615a      	str	r2, [r3, #20]
	hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800061c:	4b07      	ldr	r3, [pc, #28]	@ (800063c <DCMI_Config+0x48>)
 800061e:	2200      	movs	r2, #0
 8000620:	619a      	str	r2, [r3, #24]
	hdcmi.Init.JPEGMode = DCMI_JPEG_ENABLE;
 8000622:	4b06      	ldr	r3, [pc, #24]	@ (800063c <DCMI_Config+0x48>)
 8000624:	2208      	movs	r2, #8
 8000626:	621a      	str	r2, [r3, #32]
	if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000628:	4804      	ldr	r0, [pc, #16]	@ (800063c <DCMI_Config+0x48>)
 800062a:	f000 fcba 	bl	8000fa2 <HAL_DCMI_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <DCMI_Config+0x44>
	{
	Error_Handler();
 8000634:	f000 f88e 	bl	8000754 <Error_Handler>
	}
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	200000b4 	.word	0x200000b4
 8000640:	50050000 	.word	0x50050000

08000644 <DMA_Config>:

static void DMA_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	// enable DMA2 clock
	RCC->AHB1ENR.bit.dma2en = SET;
 8000648:	4a07      	ldr	r2, [pc, #28]	@ (8000668 <DMA_Config+0x24>)
 800064a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800064c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30

	// initialize DMA2_Stream1 interrupt which is used for DCMI
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000652:	2200      	movs	r2, #0
 8000654:	2100      	movs	r1, #0
 8000656:	2039      	movs	r0, #57	@ 0x39
 8000658:	f000 fc6d 	bl	8000f36 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800065c:	2039      	movs	r0, #57	@ 0x39
 800065e:	f000 fc86 	bl	8000f6e <HAL_NVIC_EnableIRQ>
}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800

0800066c <GPIO_Config>:


static void GPIO_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIO_InitStruct = {0};
 8000672:	f107 0308 	add.w	r3, r7, #8
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]

	// enable all necessary GPIO clocks
	RCC_AHB1ENR_Reg_t AHB1ENR_temp;
	AHB1ENR_temp.reg = RCC->AHB1ENR.reg;
 8000680:	4b31      	ldr	r3, [pc, #196]	@ (8000748 <GPIO_Config+0xdc>)
 8000682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000684:	607b      	str	r3, [r7, #4]
	AHB1ENR_temp.bit.gpioeen = SET;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	f043 0310 	orr.w	r3, r3, #16
 800068c:	607b      	str	r3, [r7, #4]
	AHB1ENR_temp.bit.gpiohen = SET;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000694:	607b      	str	r3, [r7, #4]
	AHB1ENR_temp.bit.gpiocen = SET;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	607b      	str	r3, [r7, #4]
	AHB1ENR_temp.bit.gpioaen = SET;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	607b      	str	r3, [r7, #4]
	AHB1ENR_temp.bit.gpioden = SET;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	f043 0308 	orr.w	r3, r3, #8
 80006ac:	607b      	str	r3, [r7, #4]
	AHB1ENR_temp.bit.gpioben = SET;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f043 0302 	orr.w	r3, r3, #2
 80006b4:	607b      	str	r3, [r7, #4]
	RCC->AHB1ENR.reg = AHB1ENR_temp.reg;
 80006b6:	4a24      	ldr	r2, [pc, #144]	@ (8000748 <GPIO_Config+0xdc>)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	6313      	str	r3, [r2, #48]	@ 0x30

	// make sure PC0 is low; this pin is used for Drive_VBUS_FS
	GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	2100      	movs	r1, #0
 80006c0:	4822      	ldr	r0, [pc, #136]	@ (800074c <GPIO_Config+0xe0>)
 80006c2:	f004 feeb 	bl	800549c <GPIO_WritePin>

	// default PWDN pin state when camera is working; you may connect camera's PWDN pin to GND as well
	GPIO_WritePin(GPIOC, CAMERA_PWDN_Pin, RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	210c      	movs	r1, #12
 80006ca:	4820      	ldr	r0, [pc, #128]	@ (800074c <GPIO_Config+0xe0>)
 80006cc:	f004 fee6 	bl	800549c <GPIO_WritePin>

	// Drive_VBUS_FS pin configuration
	GPIO_InitStruct.pGPIOx = GPIOC;
 80006d0:	4b1e      	ldr	r3, [pc, #120]	@ (800074c <GPIO_Config+0xe0>)
 80006d2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.GPIO_Config.PinNumber = GPIO_PIN_0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.GPIO_Config.PinMode = GPIO_MODE_OUTPUT;
 80006d8:	2301      	movs	r3, #1
 80006da:	743b      	strb	r3, [r7, #16]
	GPIO_InitStruct.GPIO_Config.PinOPType = GPIO_OUTPUT_PP;
 80006dc:	2300      	movs	r3, #0
 80006de:	74fb      	strb	r3, [r7, #19]
	GPIO_InitStruct.GPIO_Config.PinPuPdControl = GPIO_PIN_NO_PUPD;
 80006e0:	2300      	movs	r3, #0
 80006e2:	74bb      	strb	r3, [r7, #18]
	GPIO_InitStruct.GPIO_Config.PinSpeed = GPIO_SPEED_LOW;
 80006e4:	2300      	movs	r3, #0
 80006e6:	747b      	strb	r3, [r7, #17]
	GPIO_Init(&GPIO_InitStruct);
 80006e8:	f107 0308 	add.w	r3, r7, #8
 80006ec:	4618      	mov	r0, r3
 80006ee:	f004 fcad 	bl	800504c <GPIO_Init>

	// PWDN pin configuration
	GPIO_InitStruct.GPIO_Config.PinNumber = CAMERA_PWDN_Pin;
 80006f2:	230c      	movs	r3, #12
 80006f4:	60fb      	str	r3, [r7, #12]
	GPIO_Init(&GPIO_InitStruct);
 80006f6:	f107 0308 	add.w	r3, r7, #8
 80006fa:	4618      	mov	r0, r3
 80006fc:	f004 fca6 	bl	800504c <GPIO_Init>

	// configure USER_Btn to be used as EXTI; or use any other EXTI you want
	GPIO_InitStruct.pGPIOx = USER_Btn_GPIO_Port;
 8000700:	4b13      	ldr	r3, [pc, #76]	@ (8000750 <GPIO_Config+0xe4>)
 8000702:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.GPIO_Config.PinNumber = USER_Btn_Pin;
 8000704:	2300      	movs	r3, #0
 8000706:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.GPIO_Config.PinMode = GPIO_MODE_IT_RT;
 8000708:	2305      	movs	r3, #5
 800070a:	743b      	strb	r3, [r7, #16]
	GPIO_InitStruct.GPIO_Config.PinPuPdControl = GPIO_PIN_PULL_DOWN;
 800070c:	2302      	movs	r3, #2
 800070e:	74bb      	strb	r3, [r7, #18]
	GPIO_Init(&GPIO_InitStruct);
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	4618      	mov	r0, r3
 8000716:	f004 fc99 	bl	800504c <GPIO_Init>



	// configure DCMI_XCLX_Pin
	GPIO_InitStruct.pGPIOx = DCMI_XCLX_GPIO_Port;
 800071a:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <GPIO_Config+0xe0>)
 800071c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.GPIO_Config.PinNumber = DCMI_XCLX_Pin;
 800071e:	2309      	movs	r3, #9
 8000720:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.GPIO_Config.PinMode = GPIO_MODE_AF;
 8000722:	2302      	movs	r3, #2
 8000724:	743b      	strb	r3, [r7, #16]
	GPIO_InitStruct.GPIO_Config.PinOPType = GPIO_OUTPUT_PP;
 8000726:	2300      	movs	r3, #0
 8000728:	74fb      	strb	r3, [r7, #19]
	GPIO_InitStruct.GPIO_Config.PinPuPdControl = GPIO_PIN_NO_PUPD;
 800072a:	2300      	movs	r3, #0
 800072c:	74bb      	strb	r3, [r7, #18]
	GPIO_InitStruct.GPIO_Config.PinSpeed = GPIO_SPEED_LOW;
 800072e:	2300      	movs	r3, #0
 8000730:	747b      	strb	r3, [r7, #17]
	GPIO_InitStruct.GPIO_Config.PinAltFuncMode = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	753b      	strb	r3, [r7, #20]
	GPIO_Init(&GPIO_InitStruct);
 8000736:	f107 0308 	add.w	r3, r7, #8
 800073a:	4618      	mov	r0, r3
 800073c:	f004 fc86 	bl	800504c <GPIO_Init>
}
 8000740:	bf00      	nop
 8000742:	3718      	adds	r7, #24
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40023800 	.word	0x40023800
 800074c:	40020800 	.word	0x40020800
 8000750:	40020000 	.word	0x40020000

08000754 <Error_Handler>:

void Error_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	bf00      	nop
	__disable_irq();
	while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <Error_Handler+0x8>

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  RCC->APB2ENR.bit.syscfgen = SET;
 8000764:	4a07      	ldr	r2, [pc, #28]	@ (8000784 <HAL_MspInit+0x24>)
 8000766:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8000768:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800076c:	6453      	str	r3, [r2, #68]	@ 0x44
  RCC->APB1ENR.bit.pwren = SET;
 800076e:	4a05      	ldr	r2, [pc, #20]	@ (8000784 <HAL_MspInit+0x24>)
 8000770:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8000772:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000776:	6413      	str	r3, [r2, #64]	@ 0x40
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800

08000788 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  GPIO_Handle_t GPIO_InitStruct = {0};
 8000790:	f107 0308 	add.w	r3, r7, #8
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
  if(hdcmi->Instance==DCMI)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a73      	ldr	r2, [pc, #460]	@ (8000970 <HAL_DCMI_MspInit+0x1e8>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	f040 80df 	bne.w	8000968 <HAL_DCMI_MspInit+0x1e0>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
	  RCC->AHB2ENR.bit.dcmien = SET;
 80007aa:	4a72      	ldr	r2, [pc, #456]	@ (8000974 <HAL_DCMI_MspInit+0x1ec>)
 80007ac:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80007ae:	f043 0301 	orr.w	r3, r3, #1
 80007b2:	6353      	str	r3, [r2, #52]	@ 0x34

	  RCC->AHB1ENR.bit.gpioeen = SET;
 80007b4:	4a6f      	ldr	r2, [pc, #444]	@ (8000974 <HAL_DCMI_MspInit+0x1ec>)
 80007b6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80007b8:	f043 0310 	orr.w	r3, r3, #16
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
	  RCC->AHB1ENR.bit.gpioaen = SET;
 80007be:	4a6d      	ldr	r2, [pc, #436]	@ (8000974 <HAL_DCMI_MspInit+0x1ec>)
 80007c0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80007c2:	f043 0301 	orr.w	r3, r3, #1
 80007c6:	6313      	str	r3, [r2, #48]	@ 0x30
	  RCC->AHB1ENR.bit.gpiocen = SET;
 80007c8:	4a6a      	ldr	r2, [pc, #424]	@ (8000974 <HAL_DCMI_MspInit+0x1ec>)
 80007ca:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
	  RCC->AHB1ENR.bit.gpioben = SET;
 80007d2:	4a68      	ldr	r2, [pc, #416]	@ (8000974 <HAL_DCMI_MspInit+0x1ec>)
 80007d4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80007d6:	f043 0302 	orr.w	r3, r3, #2
 80007da:	6313      	str	r3, [r2, #48]	@ 0x30
    PC8     ------> DCMI_D2
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE1     ------> DCMI_D3
    */
	  GPIO_InitStruct.pGPIOx = GPIOE;
 80007dc:	4b66      	ldr	r3, [pc, #408]	@ (8000978 <HAL_DCMI_MspInit+0x1f0>)
 80007de:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.GPIO_Config.PinNumber = 4;
 80007e0:	2304      	movs	r3, #4
 80007e2:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.GPIO_Config.PinMode = GPIO_MODE_AF;
 80007e4:	2302      	movs	r3, #2
 80007e6:	743b      	strb	r3, [r7, #16]
	  GPIO_InitStruct.GPIO_Config.PinOPType = GPIO_OUTPUT_PP;
 80007e8:	2300      	movs	r3, #0
 80007ea:	74fb      	strb	r3, [r7, #19]
	  GPIO_InitStruct.GPIO_Config.PinPuPdControl = GPIO_PIN_NO_PUPD;
 80007ec:	2300      	movs	r3, #0
 80007ee:	74bb      	strb	r3, [r7, #18]
	  GPIO_InitStruct.GPIO_Config.PinSpeed = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	747b      	strb	r3, [r7, #17]
	  GPIO_InitStruct.GPIO_Config.PinAltFuncMode = 13;
 80007f4:	230d      	movs	r3, #13
 80007f6:	753b      	strb	r3, [r7, #20]
	  GPIO_Init(&GPIO_InitStruct);
 80007f8:	f107 0308 	add.w	r3, r7, #8
 80007fc:	4618      	mov	r0, r3
 80007fe:	f004 fc25 	bl	800504c <GPIO_Init>

	  GPIO_InitStruct.GPIO_Config.PinNumber = 5;
 8000802:	2305      	movs	r3, #5
 8000804:	60fb      	str	r3, [r7, #12]
	  GPIO_Init(&GPIO_InitStruct);
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	4618      	mov	r0, r3
 800080c:	f004 fc1e 	bl	800504c <GPIO_Init>

	  GPIO_InitStruct.GPIO_Config.PinNumber = 6;
 8000810:	2306      	movs	r3, #6
 8000812:	60fb      	str	r3, [r7, #12]
	  GPIO_Init(&GPIO_InitStruct);
 8000814:	f107 0308 	add.w	r3, r7, #8
 8000818:	4618      	mov	r0, r3
 800081a:	f004 fc17 	bl	800504c <GPIO_Init>

	  GPIO_InitStruct.GPIO_Config.PinNumber = 1;
 800081e:	2301      	movs	r3, #1
 8000820:	60fb      	str	r3, [r7, #12]
	  GPIO_Init(&GPIO_InitStruct);
 8000822:	f107 0308 	add.w	r3, r7, #8
 8000826:	4618      	mov	r0, r3
 8000828:	f004 fc10 	bl	800504c <GPIO_Init>


	  GPIO_InitStruct.pGPIOx = GPIOA;
 800082c:	4b53      	ldr	r3, [pc, #332]	@ (800097c <HAL_DCMI_MspInit+0x1f4>)
 800082e:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.GPIO_Config.PinNumber = 4;
 8000830:	2304      	movs	r3, #4
 8000832:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.GPIO_Config.PinMode = GPIO_MODE_AF;
 8000834:	2302      	movs	r3, #2
 8000836:	743b      	strb	r3, [r7, #16]
	  GPIO_InitStruct.GPIO_Config.PinOPType = GPIO_OUTPUT_PP;
 8000838:	2300      	movs	r3, #0
 800083a:	74fb      	strb	r3, [r7, #19]
	  GPIO_InitStruct.GPIO_Config.PinPuPdControl = GPIO_PIN_NO_PUPD;
 800083c:	2300      	movs	r3, #0
 800083e:	74bb      	strb	r3, [r7, #18]
	  GPIO_InitStruct.GPIO_Config.PinSpeed = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	747b      	strb	r3, [r7, #17]
	  GPIO_InitStruct.GPIO_Config.PinAltFuncMode = 13;
 8000844:	230d      	movs	r3, #13
 8000846:	753b      	strb	r3, [r7, #20]
	  GPIO_Init(&GPIO_InitStruct);
 8000848:	f107 0308 	add.w	r3, r7, #8
 800084c:	4618      	mov	r0, r3
 800084e:	f004 fbfd 	bl	800504c <GPIO_Init>

	  GPIO_InitStruct.GPIO_Config.PinNumber = 6;
 8000852:	2306      	movs	r3, #6
 8000854:	60fb      	str	r3, [r7, #12]
	  GPIO_Init(&GPIO_InitStruct);
 8000856:	f107 0308 	add.w	r3, r7, #8
 800085a:	4618      	mov	r0, r3
 800085c:	f004 fbf6 	bl	800504c <GPIO_Init>

	  GPIO_InitStruct.pGPIOx = GPIOC;
 8000860:	4b47      	ldr	r3, [pc, #284]	@ (8000980 <HAL_DCMI_MspInit+0x1f8>)
 8000862:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.GPIO_Config.PinNumber = 6;
 8000864:	2306      	movs	r3, #6
 8000866:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.GPIO_Config.PinMode = GPIO_MODE_AF;
 8000868:	2302      	movs	r3, #2
 800086a:	743b      	strb	r3, [r7, #16]
	  GPIO_InitStruct.GPIO_Config.PinOPType = GPIO_OUTPUT_PP;
 800086c:	2300      	movs	r3, #0
 800086e:	74fb      	strb	r3, [r7, #19]
	  GPIO_InitStruct.GPIO_Config.PinPuPdControl = GPIO_PIN_NO_PUPD;
 8000870:	2300      	movs	r3, #0
 8000872:	74bb      	strb	r3, [r7, #18]
	  GPIO_InitStruct.GPIO_Config.PinSpeed = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	747b      	strb	r3, [r7, #17]
	  GPIO_InitStruct.GPIO_Config.PinAltFuncMode = 13;
 8000878:	230d      	movs	r3, #13
 800087a:	753b      	strb	r3, [r7, #20]
	  GPIO_Init(&GPIO_InitStruct);
 800087c:	f107 0308 	add.w	r3, r7, #8
 8000880:	4618      	mov	r0, r3
 8000882:	f004 fbe3 	bl	800504c <GPIO_Init>

	  GPIO_InitStruct.GPIO_Config.PinNumber = 7;
 8000886:	2307      	movs	r3, #7
 8000888:	60fb      	str	r3, [r7, #12]
	  GPIO_Init(&GPIO_InitStruct);
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	4618      	mov	r0, r3
 8000890:	f004 fbdc 	bl	800504c <GPIO_Init>

	  GPIO_InitStruct.GPIO_Config.PinNumber = 8;
 8000894:	2308      	movs	r3, #8
 8000896:	60fb      	str	r3, [r7, #12]
	  GPIO_Init(&GPIO_InitStruct);
 8000898:	f107 0308 	add.w	r3, r7, #8
 800089c:	4618      	mov	r0, r3
 800089e:	f004 fbd5 	bl	800504c <GPIO_Init>

	  GPIO_InitStruct.pGPIOx = GPIOB;
 80008a2:	4b38      	ldr	r3, [pc, #224]	@ (8000984 <HAL_DCMI_MspInit+0x1fc>)
 80008a4:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.GPIO_Config.PinNumber = 6;
 80008a6:	2306      	movs	r3, #6
 80008a8:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.GPIO_Config.PinMode = GPIO_MODE_AF;
 80008aa:	2302      	movs	r3, #2
 80008ac:	743b      	strb	r3, [r7, #16]
	  GPIO_InitStruct.GPIO_Config.PinOPType = GPIO_OUTPUT_PP;
 80008ae:	2300      	movs	r3, #0
 80008b0:	74fb      	strb	r3, [r7, #19]
	  GPIO_InitStruct.GPIO_Config.PinPuPdControl = GPIO_PIN_NO_PUPD;
 80008b2:	2300      	movs	r3, #0
 80008b4:	74bb      	strb	r3, [r7, #18]
	  GPIO_InitStruct.GPIO_Config.PinSpeed = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	747b      	strb	r3, [r7, #17]
	  GPIO_InitStruct.GPIO_Config.PinAltFuncMode = 13;
 80008ba:	230d      	movs	r3, #13
 80008bc:	753b      	strb	r3, [r7, #20]
	  GPIO_Init(&GPIO_InitStruct);
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	4618      	mov	r0, r3
 80008c4:	f004 fbc2 	bl	800504c <GPIO_Init>

	  GPIO_InitStruct.GPIO_Config.PinNumber = 7;
 80008c8:	2307      	movs	r3, #7
 80008ca:	60fb      	str	r3, [r7, #12]
	  GPIO_Init(&GPIO_InitStruct);
 80008cc:	f107 0308 	add.w	r3, r7, #8
 80008d0:	4618      	mov	r0, r3
 80008d2:	f004 fbbb 	bl	800504c <GPIO_Init>

	  printf("Error test in msp\n");
 80008d6:	482c      	ldr	r0, [pc, #176]	@ (8000988 <HAL_DCMI_MspInit+0x200>)
 80008d8:	f00a fd6e 	bl	800b3b8 <puts>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 80008dc:	4b2b      	ldr	r3, [pc, #172]	@ (800098c <HAL_DCMI_MspInit+0x204>)
 80008de:	4a2c      	ldr	r2, [pc, #176]	@ (8000990 <HAL_DCMI_MspInit+0x208>)
 80008e0:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 80008e2:	4b2a      	ldr	r3, [pc, #168]	@ (800098c <HAL_DCMI_MspInit+0x204>)
 80008e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80008e8:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008ea:	4b28      	ldr	r3, [pc, #160]	@ (800098c <HAL_DCMI_MspInit+0x204>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80008f0:	4b26      	ldr	r3, [pc, #152]	@ (800098c <HAL_DCMI_MspInit+0x204>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80008f6:	4b25      	ldr	r3, [pc, #148]	@ (800098c <HAL_DCMI_MspInit+0x204>)
 80008f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008fc:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008fe:	4b23      	ldr	r3, [pc, #140]	@ (800098c <HAL_DCMI_MspInit+0x204>)
 8000900:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000904:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000906:	4b21      	ldr	r3, [pc, #132]	@ (800098c <HAL_DCMI_MspInit+0x204>)
 8000908:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800090c:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 800090e:	4b1f      	ldr	r3, [pc, #124]	@ (800098c <HAL_DCMI_MspInit+0x204>)
 8000910:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000914:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000916:	4b1d      	ldr	r3, [pc, #116]	@ (800098c <HAL_DCMI_MspInit+0x204>)
 8000918:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800091c:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800091e:	4b1b      	ldr	r3, [pc, #108]	@ (800098c <HAL_DCMI_MspInit+0x204>)
 8000920:	2204      	movs	r2, #4
 8000922:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000924:	4b19      	ldr	r3, [pc, #100]	@ (800098c <HAL_DCMI_MspInit+0x204>)
 8000926:	2203      	movs	r2, #3
 8000928:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 800092a:	4b18      	ldr	r3, [pc, #96]	@ (800098c <HAL_DCMI_MspInit+0x204>)
 800092c:	2200      	movs	r2, #0
 800092e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000930:	4b16      	ldr	r3, [pc, #88]	@ (800098c <HAL_DCMI_MspInit+0x204>)
 8000932:	2200      	movs	r2, #0
 8000934:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8000936:	4815      	ldr	r0, [pc, #84]	@ (800098c <HAL_DCMI_MspInit+0x204>)
 8000938:	f000 fc5e 	bl	80011f8 <HAL_DMA_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <HAL_DCMI_MspInit+0x1be>
    {
      Error_Handler();
 8000942:	f7ff ff07 	bl	8000754 <Error_Handler>
    }

    printf("after DMA init in msp\n");
 8000946:	4813      	ldr	r0, [pc, #76]	@ (8000994 <HAL_DCMI_MspInit+0x20c>)
 8000948:	f00a fd36 	bl	800b3b8 <puts>

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a0f      	ldr	r2, [pc, #60]	@ (800098c <HAL_DCMI_MspInit+0x204>)
 8000950:	639a      	str	r2, [r3, #56]	@ 0x38
 8000952:	4a0e      	ldr	r2, [pc, #56]	@ (800098c <HAL_DCMI_MspInit+0x204>)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8000958:	2200      	movs	r2, #0
 800095a:	2100      	movs	r1, #0
 800095c:	204e      	movs	r0, #78	@ 0x4e
 800095e:	f000 faea 	bl	8000f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8000962:	204e      	movs	r0, #78	@ 0x4e
 8000964:	f000 fb03 	bl	8000f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8000968:	bf00      	nop
 800096a:	3718      	adds	r7, #24
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	50050000 	.word	0x50050000
 8000974:	40023800 	.word	0x40023800
 8000978:	40021000 	.word	0x40021000
 800097c:	40020000 	.word	0x40020000
 8000980:	40020800 	.word	0x40020800
 8000984:	40020400 	.word	0x40020400
 8000988:	0800b9b8 	.word	0x0800b9b8
 800098c:	200000f4 	.word	0x200000f4
 8000990:	40026428 	.word	0x40026428
 8000994:	0800b9cc 	.word	0x0800b9cc

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <NMI_Handler+0x4>

080009a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <HardFault_Handler+0x4>

080009a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <MemManage_Handler+0x4>

080009b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <BusFault_Handler+0x4>

080009b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <UsageFault_Handler+0x4>

080009c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
	...

080009ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	millis++;
 80009f0:	4b04      	ldr	r3, [pc, #16]	@ (8000a04 <SysTick_Handler+0x18>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	3301      	adds	r3, #1
 80009f6:	4a03      	ldr	r2, [pc, #12]	@ (8000a04 <SysTick_Handler+0x18>)
 80009f8:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fa:	f000 f97d 	bl	8000cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20001190 	.word	0x20001190

08000a08 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8000a0c:	4802      	ldr	r0, [pc, #8]	@ (8000a18 <DMA2_Stream1_IRQHandler+0x10>)
 8000a0e:	f000 fcc3 	bl	8001398 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200000f4 	.word	0x200000f4

08000a1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000a20:	4802      	ldr	r0, [pc, #8]	@ (8000a2c <OTG_FS_IRQHandler+0x10>)
 8000a22:	f001 f9eb 	bl	8001dfc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200015ac 	.word	0x200015ac

08000a30 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8000a34:	4802      	ldr	r0, [pc, #8]	@ (8000a40 <DCMI_IRQHandler+0x10>)
 8000a36:	f000 fb21 	bl	800107c <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200000b4 	.word	0x200000b4

08000a44 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <ITM_SendChar+0x48>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a0e      	ldr	r2, [pc, #56]	@ (8000a8c <ITM_SendChar+0x48>)
 8000a54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000a58:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a90 <ITM_SendChar+0x4c>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a0c      	ldr	r2, [pc, #48]	@ (8000a90 <ITM_SendChar+0x4c>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000a66:	bf00      	nop
 8000a68:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d0f8      	beq.n	8000a68 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000a76:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	6013      	str	r3, [r2, #0]
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000edfc 	.word	0xe000edfc
 8000a90:	e0000e00 	.word	0xe0000e00

08000a94 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
 8000aa4:	e00a      	b.n	8000abc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000aa6:	f3af 8000 	nop.w
 8000aaa:	4601      	mov	r1, r0
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	1c5a      	adds	r2, r3, #1
 8000ab0:	60ba      	str	r2, [r7, #8]
 8000ab2:	b2ca      	uxtb	r2, r1
 8000ab4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697a      	ldr	r2, [r7, #20]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	dbf0      	blt.n	8000aa6 <_read+0x12>
  }

  return len;
 8000ac4:	687b      	ldr	r3, [r7, #4]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3718      	adds	r7, #24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b086      	sub	sp, #24
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	60f8      	str	r0, [r7, #12]
 8000ad6:	60b9      	str	r1, [r7, #8]
 8000ad8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
 8000ade:	e009      	b.n	8000af4 <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	60ba      	str	r2, [r7, #8]
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ffab 	bl	8000a44 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	3301      	adds	r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	697a      	ldr	r2, [r7, #20]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	dbf1      	blt.n	8000ae0 <_write+0x12>
  }
  return len;
 8000afc:	687b      	ldr	r3, [r7, #4]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <_close>:

int _close(int file)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	b083      	sub	sp, #12
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
 8000b26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b2e:	605a      	str	r2, [r3, #4]
  return 0;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <_isatty>:

int _isatty(int file)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b46:	2301      	movs	r3, #1
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
	...

08000b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b78:	4a14      	ldr	r2, [pc, #80]	@ (8000bcc <_sbrk+0x5c>)
 8000b7a:	4b15      	ldr	r3, [pc, #84]	@ (8000bd0 <_sbrk+0x60>)
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b84:	4b13      	ldr	r3, [pc, #76]	@ (8000bd4 <_sbrk+0x64>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d102      	bne.n	8000b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <_sbrk+0x64>)
 8000b8e:	4a12      	ldr	r2, [pc, #72]	@ (8000bd8 <_sbrk+0x68>)
 8000b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b92:	4b10      	ldr	r3, [pc, #64]	@ (8000bd4 <_sbrk+0x64>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d207      	bcs.n	8000bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba0:	f00a fd48 	bl	800b634 <__errno>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	220c      	movs	r2, #12
 8000ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bae:	e009      	b.n	8000bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb0:	4b08      	ldr	r3, [pc, #32]	@ (8000bd4 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bb6:	4b07      	ldr	r3, [pc, #28]	@ (8000bd4 <_sbrk+0x64>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	4a05      	ldr	r2, [pc, #20]	@ (8000bd4 <_sbrk+0x64>)
 8000bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20020000 	.word	0x20020000
 8000bd0:	00000400 	.word	0x00000400
 8000bd4:	20001188 	.word	0x20001188
 8000bd8:	20001ad8 	.word	0x20001ad8

08000bdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be0:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <SystemInit+0x20>)
 8000be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000be6:	4a05      	ldr	r2, [pc, #20]	@ (8000bfc <SystemInit+0x20>)
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c38 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c04:	f7ff ffea 	bl	8000bdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c08:	480c      	ldr	r0, [pc, #48]	@ (8000c3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c0a:	490d      	ldr	r1, [pc, #52]	@ (8000c40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c10:	e002      	b.n	8000c18 <LoopCopyDataInit>

08000c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c16:	3304      	adds	r3, #4

08000c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c1c:	d3f9      	bcc.n	8000c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c20:	4c0a      	ldr	r4, [pc, #40]	@ (8000c4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c24:	e001      	b.n	8000c2a <LoopFillZerobss>

08000c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c28:	3204      	adds	r2, #4

08000c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c2c:	d3fb      	bcc.n	8000c26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c2e:	f00a fd07 	bl	800b640 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c32:	f7ff fc41 	bl	80004b8 <main>
  bx  lr    
 8000c36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c40:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8000c44:	0800bb04 	.word	0x0800bb04
  ldr r2, =_sbss
 8000c48:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000c4c:	20001ad8 	.word	0x20001ad8

08000c50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <ADC_IRQHandler>
	...

08000c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c58:	4b0e      	ldr	r3, [pc, #56]	@ (8000c94 <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c94 <HAL_Init+0x40>)
 8000c5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c64:	4b0b      	ldr	r3, [pc, #44]	@ (8000c94 <HAL_Init+0x40>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a0a      	ldr	r2, [pc, #40]	@ (8000c94 <HAL_Init+0x40>)
 8000c6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c70:	4b08      	ldr	r3, [pc, #32]	@ (8000c94 <HAL_Init+0x40>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a07      	ldr	r2, [pc, #28]	@ (8000c94 <HAL_Init+0x40>)
 8000c76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	f000 f94f 	bl	8000f20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c82:	200f      	movs	r0, #15
 8000c84:	f000 f808 	bl	8000c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c88:	f7ff fd6a 	bl	8000760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023c00 	.word	0x40023c00

08000c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca0:	4b12      	ldr	r3, [pc, #72]	@ (8000cec <HAL_InitTick+0x54>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b12      	ldr	r3, [pc, #72]	@ (8000cf0 <HAL_InitTick+0x58>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 f967 	bl	8000f8a <HAL_SYSTICK_Config>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e00e      	b.n	8000ce4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b0f      	cmp	r3, #15
 8000cca:	d80a      	bhi.n	8000ce2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd4:	f000 f92f 	bl	8000f36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd8:	4a06      	ldr	r2, [pc, #24]	@ (8000cf4 <HAL_InitTick+0x5c>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e000      	b.n	8000ce4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	20000004 	.word	0x20000004
 8000cf4:	20000000 	.word	0x20000000

08000cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <HAL_IncTick+0x20>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <HAL_IncTick+0x24>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	4a04      	ldr	r2, [pc, #16]	@ (8000d1c <HAL_IncTick+0x24>)
 8000d0a:	6013      	str	r3, [r2, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000004 	.word	0x20000004
 8000d1c:	2000118c 	.word	0x2000118c

08000d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return uwTick;
 8000d24:	4b03      	ldr	r3, [pc, #12]	@ (8000d34 <HAL_GetTick+0x14>)
 8000d26:	681b      	ldr	r3, [r3, #0]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	2000118c 	.word	0x2000118c

08000d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d40:	f7ff ffee 	bl	8000d20 <HAL_GetTick>
 8000d44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d50:	d005      	beq.n	8000d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d52:	4b0a      	ldr	r3, [pc, #40]	@ (8000d7c <HAL_Delay+0x44>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	461a      	mov	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d5e:	bf00      	nop
 8000d60:	f7ff ffde 	bl	8000d20 <HAL_GetTick>
 8000d64:	4602      	mov	r2, r0
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d8f7      	bhi.n	8000d60 <HAL_Delay+0x28>
  {
  }
}
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000004 	.word	0x20000004

08000d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
static inline void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d90:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db2:	4a04      	ldr	r2, [pc, #16]	@ (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	60d3      	str	r3, [r2, #12]
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
static inline uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dcc:	4b04      	ldr	r3, [pc, #16]	@ (8000de0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	0a1b      	lsrs	r3, r3, #8
 8000dd2:	f003 0307 	and.w	r3, r3, #7
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
static inline void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	db0b      	blt.n	8000e0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	f003 021f 	and.w	r2, r3, #31
 8000dfc:	4907      	ldr	r1, [pc, #28]	@ (8000e1c <__NVIC_EnableIRQ+0x38>)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	095b      	lsrs	r3, r3, #5
 8000e04:	2001      	movs	r0, #1
 8000e06:	fa00 f202 	lsl.w	r2, r0, r2
 8000e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000e100 	.word	0xe000e100

08000e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
static inline void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	6039      	str	r1, [r7, #0]
 8000e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	db0a      	blt.n	8000e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	490c      	ldr	r1, [pc, #48]	@ (8000e6c <__NVIC_SetPriority+0x4c>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	0112      	lsls	r2, r2, #4
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	440b      	add	r3, r1
 8000e44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e48:	e00a      	b.n	8000e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4908      	ldr	r1, [pc, #32]	@ (8000e70 <__NVIC_SetPriority+0x50>)
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	f003 030f 	and.w	r3, r3, #15
 8000e56:	3b04      	subs	r3, #4
 8000e58:	0112      	lsls	r2, r2, #4
 8000e5a:	b2d2      	uxtb	r2, r2
 8000e5c:	440b      	add	r3, r1
 8000e5e:	761a      	strb	r2, [r3, #24]
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000e100 	.word	0xe000e100
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
static inline uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b089      	sub	sp, #36	@ 0x24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f1c3 0307 	rsb	r3, r3, #7
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	bf28      	it	cs
 8000e92:	2304      	movcs	r3, #4
 8000e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	2b06      	cmp	r3, #6
 8000e9c:	d902      	bls.n	8000ea4 <NVIC_EncodePriority+0x30>
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3b03      	subs	r3, #3
 8000ea2:	e000      	b.n	8000ea6 <NVIC_EncodePriority+0x32>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43da      	mvns	r2, r3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	401a      	ands	r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec6:	43d9      	mvns	r1, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	4313      	orrs	r3, r2
         );
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3724      	adds	r7, #36	@ 0x24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
	...

08000edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
static inline uint32_t SysTick_Config(uint32_t ticks)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000eec:	d301      	bcc.n	8000ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e00f      	b.n	8000f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8000f1c <SysTick_Config+0x40>)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000efa:	210f      	movs	r1, #15
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295
 8000f00:	f7ff ff8e 	bl	8000e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f04:	4b05      	ldr	r3, [pc, #20]	@ (8000f1c <SysTick_Config+0x40>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f0a:	4b04      	ldr	r3, [pc, #16]	@ (8000f1c <SysTick_Config+0x40>)
 8000f0c:	2207      	movs	r2, #7
 8000f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	e000e010 	.word	0xe000e010

08000f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff ff29 	bl	8000d80 <__NVIC_SetPriorityGrouping>
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b086      	sub	sp, #24
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	607a      	str	r2, [r7, #4]
 8000f42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f48:	f7ff ff3e 	bl	8000dc8 <__NVIC_GetPriorityGrouping>
 8000f4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	68b9      	ldr	r1, [r7, #8]
 8000f52:	6978      	ldr	r0, [r7, #20]
 8000f54:	f7ff ff8e 	bl	8000e74 <NVIC_EncodePriority>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5e:	4611      	mov	r1, r2
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ff5d 	bl	8000e20 <__NVIC_SetPriority>
}
 8000f66:	bf00      	nop
 8000f68:	3718      	adds	r7, #24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	4603      	mov	r3, r0
 8000f76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff31 	bl	8000de4 <__NVIC_EnableIRQ>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff ffa2 	bl	8000edc <SysTick_Config>
 8000f98:	4603      	mov	r3, r0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e05f      	b.n	8001074 <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_SYNCHRO(hdcmi->Init.SynchroMode));
  assert_param(IS_DCMI_CAPTURE_RATE(hdcmi->Init.CaptureRate));
  assert_param(IS_DCMI_EXTENDED_DATA(hdcmi->Init.ExtendedDataMode));
  assert_param(IS_DCMI_MODE_JPEG(hdcmi->Init.JPEGMode));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d109      	bne.n	8000fd4 <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else  
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff fbdd 	bl	8000788 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff fbda 	bl	8000788 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2202      	movs	r2, #2
 8000fd8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Set DCMI parameters */
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR.reg &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	6812      	ldr	r2, [r2, #0]
 8000fe6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8000fea:	f023 0308 	bic.w	r3, r3, #8
 8000fee:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |
                           DCMI_CR_ESS);
  hdcmi->Instance->CR.reg |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6819      	ldr	r1, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685a      	ldr	r2, [r3, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR.reg |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001004:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	691b      	ldr	r3, [r3, #16]
 800100a:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001010:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800101c:	431a      	orrs	r2, r3
  hdcmi->Instance->CR.reg |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	430a      	orrs	r2, r1
 8001024:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2b10      	cmp	r3, #16
 800102c:	d112      	bne.n	8001054 <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR.reg = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	7f1b      	ldrb	r3, [r3, #28]
 8001032:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7f5b      	ldrb	r3, [r3, #29]
 8001038:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR.reg = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800103a:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	7f9b      	ldrb	r3, [r3, #30]
 8001040:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8001042:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	7fdb      	ldrb	r3, [r3, #31]
 800104a:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR.reg = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8001050:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR.reg = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001052:	619a      	str	r2, [r3, #24]
  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	68da      	ldr	r2, [r3, #12]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f042 021e 	orr.w	r2, r2, #30
 8001062:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2201      	movs	r2, #1
 800106e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  return HAL_OK;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MIS.reg);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	691b      	ldr	r3, [r3, #16]
 800108a:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f003 0304 	and.w	r3, r3, #4
 8001092:	2b00      	cmp	r3, #0
 8001094:	d016      	beq.n	80010c4 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2204      	movs	r2, #4
 800109c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010a2:	f043 0202 	orr.w	r2, r3, #2
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2204      	movs	r2, #4
 80010ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010b6:	4a2f      	ldr	r2, [pc, #188]	@ (8001174 <HAL_DCMI_IRQHandler+0xf8>)
 80010b8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 f948 	bl	8001354 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d016      	beq.n	80010fc <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2202      	movs	r2, #2
 80010d4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010da:	f043 0201 	orr.w	r2, r3, #1
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2204      	movs	r2, #4
 80010e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010ee:	4a21      	ldr	r2, [pc, #132]	@ (8001174 <HAL_DCMI_IRQHandler+0xf8>)
 80010f0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 f92c 	bl	8001354 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f003 0310 	and.w	r3, r3, #16
 8001102:	2b00      	cmp	r3, #0
 8001104:	d006      	beq.n	8001114 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2210      	movs	r2, #16
 800110c:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f000 f83c 	bl	800118c <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f003 0308 	and.w	r3, r3, #8
 800111a:	2b00      	cmp	r3, #0
 800111c:	d006      	beq.n	800112c <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2208      	movs	r2, #8
 8001124:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f000 f83a 	bl	80011a0 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	2b00      	cmp	r3, #0
 8001134:	d019      	beq.n	800116a <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR.reg & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	2b00      	cmp	r3, #0
 8001142:	d007      	beq.n	8001154 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	68da      	ldr	r2, [r3, #12]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f022 021e 	bic.w	r2, r2, #30
 8001152:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	68da      	ldr	r2, [r3, #12]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 0201 	bic.w	r2, r2, #1
 8001162:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f000 f825 	bl	80011b4 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	080011c9 	.word	0x080011c9

08001178 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011d4:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d003      	beq.n	80011e8 <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 80011e8:	68f8      	ldr	r0, [r7, #12]
 80011ea:	f7ff ffc5 	bl	8001178 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001204:	f7ff fd8c 	bl	8000d20 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d101      	bne.n	8001214 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e099      	b.n	8001348 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2202      	movs	r2, #2
 8001218:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0201 	bic.w	r2, r2, #1
 8001232:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR.reg & DMA_SxCR_EN) != RESET)
 8001234:	e00f      	b.n	8001256 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001236:	f7ff fd73 	bl	8000d20 <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b05      	cmp	r3, #5
 8001242:	d908      	bls.n	8001256 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2220      	movs	r2, #32
 8001248:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2203      	movs	r2, #3
 800124e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e078      	b.n	8001348 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR.reg & DMA_SxCR_EN) != RESET)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1e8      	bne.n	8001236 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR.reg;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	4b38      	ldr	r3, [pc, #224]	@ (8001350 <HAL_DMA_Init+0x158>)
 8001270:	4013      	ands	r3, r2
 8001272:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001282:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	691b      	ldr	r3, [r3, #16]
 8001288:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800128e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800129a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a1b      	ldr	r3, [r3, #32]
 80012a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ac:	2b04      	cmp	r3, #4
 80012ae:	d107      	bne.n	80012c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b8:	4313      	orrs	r3, r2
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	4313      	orrs	r3, r2
 80012be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR.reg = tmp;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	697a      	ldr	r2, [r7, #20]
 80012c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR.reg;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	f023 0307 	bic.w	r3, r3, #7
 80012d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012dc:	697a      	ldr	r2, [r7, #20]
 80012de:	4313      	orrs	r3, r2
 80012e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	d117      	bne.n	800131a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d00e      	beq.n	800131a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f000 fa0b 	bl	8001718 <DMA_CheckFifoParam>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d008      	beq.n	800131a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2240      	movs	r2, #64	@ 0x40
 800130c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2201      	movs	r2, #1
 8001312:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001316:	2301      	movs	r3, #1
 8001318:	e016      	b.n	8001348 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR.reg = tmp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 f9c2 	bl	80016ac <DMA_CalcBaseAndBitshift>
 8001328:	4603      	mov	r3, r0
 800132a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001330:	223f      	movs	r2, #63	@ 0x3f
 8001332:	409a      	lsls	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2201      	movs	r2, #1
 8001342:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	f010803f 	.word	0xf010803f

08001354 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d004      	beq.n	8001372 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2280      	movs	r2, #128	@ 0x80
 800136c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e00c      	b.n	800138c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2205      	movs	r2, #5
 8001376:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 0201 	bic.w	r2, r2, #1
 8001388:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  volatile uint32_t count = 0U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013a4:	4b8e      	ldr	r3, [pc, #568]	@ (80015e0 <HAL_DMA_IRQHandler+0x248>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a8e      	ldr	r2, [pc, #568]	@ (80015e4 <HAL_DMA_IRQHandler+0x24c>)
 80013aa:	fba2 2303 	umull	r2, r3, r2, r3
 80013ae:	0a9b      	lsrs	r3, r3, #10
 80013b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013c2:	2208      	movs	r2, #8
 80013c4:	409a      	lsls	r2, r3
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	4013      	ands	r3, r2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d01a      	beq.n	8001404 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0304 	and.w	r3, r3, #4
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d013      	beq.n	8001404 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR.reg  &= ~(DMA_IT_TE);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f022 0204 	bic.w	r2, r2, #4
 80013ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013f0:	2208      	movs	r2, #8
 80013f2:	409a      	lsls	r2, r3
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013fc:	f043 0201 	orr.w	r2, r3, #1
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001408:	2201      	movs	r2, #1
 800140a:	409a      	lsls	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4013      	ands	r3, r2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d012      	beq.n	800143a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800141e:	2b00      	cmp	r3, #0
 8001420:	d00b      	beq.n	800143a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001426:	2201      	movs	r2, #1
 8001428:	409a      	lsls	r2, r3
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001432:	f043 0202 	orr.w	r2, r3, #2
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800143e:	2204      	movs	r2, #4
 8001440:	409a      	lsls	r2, r3
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4013      	ands	r3, r2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d012      	beq.n	8001470 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d00b      	beq.n	8001470 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800145c:	2204      	movs	r2, #4
 800145e:	409a      	lsls	r2, r3
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001468:	f043 0204 	orr.w	r2, r3, #4
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001474:	2210      	movs	r2, #16
 8001476:	409a      	lsls	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4013      	ands	r3, r2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d043      	beq.n	8001508 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	2b00      	cmp	r3, #0
 800148c:	d03c      	beq.n	8001508 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001492:	2210      	movs	r2, #16
 8001494:	409a      	lsls	r2, r3
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR.reg) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d018      	beq.n	80014da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR.reg & DMA_SxCR_CT) == RESET)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d108      	bne.n	80014c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d024      	beq.n	8001508 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	4798      	blx	r3
 80014c6:	e01f      	b.n	8001508 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d01b      	beq.n	8001508 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	4798      	blx	r3
 80014d8:	e016      	b.n	8001508 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR.reg & DMA_SxCR_CIRC) == RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d107      	bne.n	80014f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR.reg  &= ~(DMA_IT_HT);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 0208 	bic.w	r2, r2, #8
 80014f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d003      	beq.n	8001508 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800150c:	2220      	movs	r2, #32
 800150e:	409a      	lsls	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4013      	ands	r3, r2
 8001514:	2b00      	cmp	r3, #0
 8001516:	f000 808f 	beq.w	8001638 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0310 	and.w	r3, r3, #16
 8001524:	2b00      	cmp	r3, #0
 8001526:	f000 8087 	beq.w	8001638 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800152e:	2220      	movs	r2, #32
 8001530:	409a      	lsls	r2, r3
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b05      	cmp	r3, #5
 8001540:	d136      	bne.n	80015b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR.reg  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 0216 	bic.w	r2, r2, #22
 8001550:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR.reg &= ~(DMA_IT_FE);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	695a      	ldr	r2, [r3, #20]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001560:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001566:	2b00      	cmp	r3, #0
 8001568:	d103      	bne.n	8001572 <HAL_DMA_IRQHandler+0x1da>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800156e:	2b00      	cmp	r3, #0
 8001570:	d007      	beq.n	8001582 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR.reg  &= ~(DMA_IT_HT);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f022 0208 	bic.w	r2, r2, #8
 8001580:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001586:	223f      	movs	r2, #63	@ 0x3f
 8001588:	409a      	lsls	r2, r3
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d07e      	beq.n	80016a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	4798      	blx	r3
        }
        return;
 80015ae:	e079      	b.n	80016a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR.reg) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d01d      	beq.n	80015fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR.reg & DMA_SxCR_CT) == RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10d      	bne.n	80015e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d031      	beq.n	8001638 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	4798      	blx	r3
 80015dc:	e02c      	b.n	8001638 <HAL_DMA_IRQHandler+0x2a0>
 80015de:	bf00      	nop
 80015e0:	20000008 	.word	0x20000008
 80015e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d023      	beq.n	8001638 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	4798      	blx	r3
 80015f8:	e01e      	b.n	8001638 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR.reg & DMA_SxCR_CIRC) == RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001604:	2b00      	cmp	r3, #0
 8001606:	d10f      	bne.n	8001628 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR.reg  &= ~(DMA_IT_TC);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 0210 	bic.w	r2, r2, #16
 8001616:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800162c:	2b00      	cmp	r3, #0
 800162e:	d003      	beq.n	8001638 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800163c:	2b00      	cmp	r3, #0
 800163e:	d032      	beq.n	80016a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	2b00      	cmp	r3, #0
 800164a:	d022      	beq.n	8001692 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2205      	movs	r2, #5
 8001650:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0201 	bic.w	r2, r2, #1
 8001662:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	3301      	adds	r3, #1
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	429a      	cmp	r2, r3
 800166e:	d307      	bcc.n	8001680 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR.reg & DMA_SxCR_EN) != RESET);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f2      	bne.n	8001664 <HAL_DMA_IRQHandler+0x2cc>
 800167e:	e000      	b.n	8001682 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001680:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2201      	movs	r2, #1
 8001686:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001696:	2b00      	cmp	r3, #0
 8001698:	d005      	beq.n	80016a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	4798      	blx	r3
 80016a2:	e000      	b.n	80016a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80016a4:	bf00      	nop
    }
  }
}
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	3b10      	subs	r3, #16
 80016bc:	4a14      	ldr	r2, [pc, #80]	@ (8001710 <DMA_CalcBaseAndBitshift+0x64>)
 80016be:	fba2 2303 	umull	r2, r3, r2, r3
 80016c2:	091b      	lsrs	r3, r3, #4
 80016c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80016c6:	4a13      	ldr	r2, [pc, #76]	@ (8001714 <DMA_CalcBaseAndBitshift+0x68>)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4413      	add	r3, r2
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	d909      	bls.n	80016ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80016e2:	f023 0303 	bic.w	r3, r3, #3
 80016e6:	1d1a      	adds	r2, r3, #4
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80016ec:	e007      	b.n	80016fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80016f6:	f023 0303 	bic.w	r3, r3, #3
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001702:	4618      	mov	r0, r3
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	aaaaaaab 	.word	0xaaaaaaab
 8001714:	0800ba58 	.word	0x0800ba58

08001718 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001720:	2300      	movs	r3, #0
 8001722:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001728:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d11f      	bne.n	8001772 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	2b03      	cmp	r3, #3
 8001736:	d856      	bhi.n	80017e6 <DMA_CheckFifoParam+0xce>
 8001738:	a201      	add	r2, pc, #4	@ (adr r2, 8001740 <DMA_CheckFifoParam+0x28>)
 800173a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173e:	bf00      	nop
 8001740:	08001751 	.word	0x08001751
 8001744:	08001763 	.word	0x08001763
 8001748:	08001751 	.word	0x08001751
 800174c:	080017e7 	.word	0x080017e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001754:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d046      	beq.n	80017ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001760:	e043      	b.n	80017ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001766:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800176a:	d140      	bne.n	80017ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001770:	e03d      	b.n	80017ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800177a:	d121      	bne.n	80017c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2b03      	cmp	r3, #3
 8001780:	d837      	bhi.n	80017f2 <DMA_CheckFifoParam+0xda>
 8001782:	a201      	add	r2, pc, #4	@ (adr r2, 8001788 <DMA_CheckFifoParam+0x70>)
 8001784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001788:	08001799 	.word	0x08001799
 800178c:	0800179f 	.word	0x0800179f
 8001790:	08001799 	.word	0x08001799
 8001794:	080017b1 	.word	0x080017b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	73fb      	strb	r3, [r7, #15]
      break;
 800179c:	e030      	b.n	8001800 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d025      	beq.n	80017f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017ae:	e022      	b.n	80017f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80017b8:	d11f      	bne.n	80017fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80017be:	e01c      	b.n	80017fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d903      	bls.n	80017ce <DMA_CheckFifoParam+0xb6>
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	d003      	beq.n	80017d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80017cc:	e018      	b.n	8001800 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	73fb      	strb	r3, [r7, #15]
      break;
 80017d2:	e015      	b.n	8001800 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d00e      	beq.n	80017fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	73fb      	strb	r3, [r7, #15]
      break;
 80017e4:	e00b      	b.n	80017fe <DMA_CheckFifoParam+0xe6>
      break;
 80017e6:	bf00      	nop
 80017e8:	e00a      	b.n	8001800 <DMA_CheckFifoParam+0xe8>
      break;
 80017ea:	bf00      	nop
 80017ec:	e008      	b.n	8001800 <DMA_CheckFifoParam+0xe8>
      break;
 80017ee:	bf00      	nop
 80017f0:	e006      	b.n	8001800 <DMA_CheckFifoParam+0xe8>
      break;
 80017f2:	bf00      	nop
 80017f4:	e004      	b.n	8001800 <DMA_CheckFifoParam+0xe8>
      break;
 80017f6:	bf00      	nop
 80017f8:	e002      	b.n	8001800 <DMA_CheckFifoParam+0xe8>
      break;   
 80017fa:	bf00      	nop
 80017fc:	e000      	b.n	8001800 <DMA_CheckFifoParam+0xe8>
      break;
 80017fe:	bf00      	nop
    }
  } 
  
  return status; 
 8001800:	7bfb      	ldrb	r3, [r7, #15]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop

08001810 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af02      	add	r7, sp, #8
 8001816:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d104      	bne.n	8001828 <HAL_HCD_Init+0x18>
  {
	  printf("Error 1\n");
 800181e:	4836      	ldr	r0, [pc, #216]	@ (80018f8 <HAL_HCD_Init+0xe8>)
 8001820:	f009 fdca 	bl	800b3b8 <puts>
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e062      	b.n	80018ee <HAL_HCD_Init+0xde>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d106      	bne.n	8001848 <HAL_HCD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f009 f914 	bl	800aa70 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2203      	movs	r2, #3
 800184c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001856:	d102      	bne.n	800185e <HAL_HCD_Init+0x4e>
  {
    hhcd->Init.dma_enable = 0U;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f002 fa5b 	bl	8003d1e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6818      	ldr	r0, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	7c1a      	ldrb	r2, [r3, #16]
 8001870:	f88d 2000 	strb.w	r2, [sp]
 8001874:	3304      	adds	r3, #4
 8001876:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001878:	f002 f9dc 	bl	8003c34 <USB_CoreInit>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d008      	beq.n	8001894 <HAL_HCD_Init+0x84>
  {
	  printf("Error 2\n");
 8001882:	481e      	ldr	r0, [pc, #120]	@ (80018fc <HAL_HCD_Init+0xec>)
 8001884:	f009 fd98 	bl	800b3b8 <puts>
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2202      	movs	r2, #2
 800188c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e02c      	b.n	80018ee <HAL_HCD_Init+0xde>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2101      	movs	r1, #1
 800189a:	4618      	mov	r0, r3
 800189c:	f002 fa50 	bl	8003d40 <USB_SetCurrentMode>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d008      	beq.n	80018b8 <HAL_HCD_Init+0xa8>
  {
	  printf("Error 3\n");
 80018a6:	4816      	ldr	r0, [pc, #88]	@ (8001900 <HAL_HCD_Init+0xf0>)
 80018a8:	f009 fd86 	bl	800b3b8 <puts>
    hhcd->State = HAL_HCD_STATE_ERROR;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2202      	movs	r2, #2
 80018b0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e01a      	b.n	80018ee <HAL_HCD_Init+0xde>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6818      	ldr	r0, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	7c1a      	ldrb	r2, [r3, #16]
 80018c0:	f88d 2000 	strb.w	r2, [sp]
 80018c4:	3304      	adds	r3, #4
 80018c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018c8:	f002 fbf0 	bl	80040ac <USB_HostInit>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d008      	beq.n	80018e4 <HAL_HCD_Init+0xd4>
  {
	  printf("Error 4\n");
 80018d2:	480c      	ldr	r0, [pc, #48]	@ (8001904 <HAL_HCD_Init+0xf4>)
 80018d4:	f009 fd70 	bl	800b3b8 <puts>
    hhcd->State = HAL_HCD_STATE_ERROR;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2202      	movs	r2, #2
 80018dc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e004      	b.n	80018ee <HAL_HCD_Init+0xde>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	0800b9e4 	.word	0x0800b9e4
 80018fc:	0800b9ec 	.word	0x0800b9ec
 8001900:	0800b9f4 	.word	0x0800b9f4
 8001904:	0800b9fc 	.word	0x0800b9fc

08001908 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b08b      	sub	sp, #44	@ 0x2c
 800190c:	af04      	add	r7, sp, #16
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	4608      	mov	r0, r1
 8001912:	4611      	mov	r1, r2
 8001914:	461a      	mov	r2, r3
 8001916:	4603      	mov	r3, r0
 8001918:	70fb      	strb	r3, [r7, #3]
 800191a:	460b      	mov	r3, r1
 800191c:	70bb      	strb	r3, [r7, #2]
 800191e:	4613      	mov	r3, r2
 8001920:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001922:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001924:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800192c:	2b01      	cmp	r3, #1
 800192e:	d101      	bne.n	8001934 <HAL_HCD_HC_Init+0x2c>
 8001930:	2302      	movs	r3, #2
 8001932:	e09d      	b.n	8001a70 <HAL_HCD_HC_Init+0x168>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800193c:	78fa      	ldrb	r2, [r7, #3]
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	011b      	lsls	r3, r3, #4
 8001944:	1a9b      	subs	r3, r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	440b      	add	r3, r1
 800194a:	3319      	adds	r3, #25
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001950:	78fa      	ldrb	r2, [r7, #3]
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	4613      	mov	r3, r2
 8001956:	011b      	lsls	r3, r3, #4
 8001958:	1a9b      	subs	r3, r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	3314      	adds	r3, #20
 8001960:	787a      	ldrb	r2, [r7, #1]
 8001962:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001964:	78fa      	ldrb	r2, [r7, #3]
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	4613      	mov	r3, r2
 800196a:	011b      	lsls	r3, r3, #4
 800196c:	1a9b      	subs	r3, r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	440b      	add	r3, r1
 8001972:	3315      	adds	r3, #21
 8001974:	78fa      	ldrb	r2, [r7, #3]
 8001976:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001978:	78fa      	ldrb	r2, [r7, #3]
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	011b      	lsls	r3, r3, #4
 8001980:	1a9b      	subs	r3, r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	440b      	add	r3, r1
 8001986:	3326      	adds	r3, #38	@ 0x26
 8001988:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800198c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800198e:	78fa      	ldrb	r2, [r7, #3]
 8001990:	78bb      	ldrb	r3, [r7, #2]
 8001992:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001996:	b2d8      	uxtb	r0, r3
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	4613      	mov	r3, r2
 800199c:	011b      	lsls	r3, r3, #4
 800199e:	1a9b      	subs	r3, r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	440b      	add	r3, r1
 80019a4:	3316      	adds	r3, #22
 80019a6:	4602      	mov	r2, r0
 80019a8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80019aa:	78fb      	ldrb	r3, [r7, #3]
 80019ac:	4619      	mov	r1, r3
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 fbc8 	bl	8002144 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80019b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	da0a      	bge.n	80019d2 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80019bc:	78fa      	ldrb	r2, [r7, #3]
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	4613      	mov	r3, r2
 80019c2:	011b      	lsls	r3, r3, #4
 80019c4:	1a9b      	subs	r3, r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	440b      	add	r3, r1
 80019ca:	3317      	adds	r3, #23
 80019cc:	2201      	movs	r2, #1
 80019ce:	701a      	strb	r2, [r3, #0]
 80019d0:	e009      	b.n	80019e6 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80019d2:	78fa      	ldrb	r2, [r7, #3]
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	4613      	mov	r3, r2
 80019d8:	011b      	lsls	r3, r3, #4
 80019da:	1a9b      	subs	r3, r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	440b      	add	r3, r1
 80019e0:	3317      	adds	r3, #23
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f002 fcc2 	bl	8004374 <USB_GetHostSpeed>
 80019f0:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80019f2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d10b      	bne.n	8001a12 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80019fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d107      	bne.n	8001a12 <HAL_HCD_HC_Init+0x10a>
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d104      	bne.n	8001a12 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	2bbc      	cmp	r3, #188	@ 0xbc
 8001a0c:	d901      	bls.n	8001a12 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001a0e:	23bc      	movs	r3, #188	@ 0xbc
 8001a10:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001a12:	78fa      	ldrb	r2, [r7, #3]
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	4613      	mov	r3, r2
 8001a18:	011b      	lsls	r3, r3, #4
 8001a1a:	1a9b      	subs	r3, r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	440b      	add	r3, r1
 8001a20:	3318      	adds	r3, #24
 8001a22:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001a26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001a28:	78fa      	ldrb	r2, [r7, #3]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	b298      	uxth	r0, r3
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	4613      	mov	r3, r2
 8001a32:	011b      	lsls	r3, r3, #4
 8001a34:	1a9b      	subs	r3, r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	440b      	add	r3, r1
 8001a3a:	3328      	adds	r3, #40	@ 0x28
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6818      	ldr	r0, [r3, #0]
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	787c      	ldrb	r4, [r7, #1]
 8001a4a:	78ba      	ldrb	r2, [r7, #2]
 8001a4c:	78f9      	ldrb	r1, [r7, #3]
 8001a4e:	9302      	str	r3, [sp, #8]
 8001a50:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a54:	9301      	str	r3, [sp, #4]
 8001a56:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	4623      	mov	r3, r4
 8001a5e:	f002 fcb1 	bl	80043c4 <USB_HC_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	371c      	adds	r7, #28
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd90      	pop	{r4, r7, pc}

08001a78 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001a84:	2300      	movs	r3, #0
 8001a86:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d101      	bne.n	8001a96 <HAL_HCD_HC_Halt+0x1e>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e00f      	b.n	8001ab6 <HAL_HCD_HC_Halt+0x3e>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	78fa      	ldrb	r2, [r7, #3]
 8001aa4:	4611      	mov	r1, r2
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f003 f843 	bl	8004b32 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	4608      	mov	r0, r1
 8001aca:	4611      	mov	r1, r2
 8001acc:	461a      	mov	r2, r3
 8001ace:	4603      	mov	r3, r0
 8001ad0:	70fb      	strb	r3, [r7, #3]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	70bb      	strb	r3, [r7, #2]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001ada:	78fa      	ldrb	r2, [r7, #3]
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	011b      	lsls	r3, r3, #4
 8001ae2:	1a9b      	subs	r3, r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	3317      	adds	r3, #23
 8001aea:	78ba      	ldrb	r2, [r7, #2]
 8001aec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001aee:	78fa      	ldrb	r2, [r7, #3]
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	4613      	mov	r3, r2
 8001af4:	011b      	lsls	r3, r3, #4
 8001af6:	1a9b      	subs	r3, r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	440b      	add	r3, r1
 8001afc:	3326      	adds	r3, #38	@ 0x26
 8001afe:	787a      	ldrb	r2, [r7, #1]
 8001b00:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001b02:	7c3b      	ldrb	r3, [r7, #16]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d114      	bne.n	8001b32 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b08:	78fa      	ldrb	r2, [r7, #3]
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	011b      	lsls	r3, r3, #4
 8001b10:	1a9b      	subs	r3, r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	332a      	adds	r3, #42	@ 0x2a
 8001b18:	2203      	movs	r2, #3
 8001b1a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001b1c:	78fa      	ldrb	r2, [r7, #3]
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	4613      	mov	r3, r2
 8001b22:	011b      	lsls	r3, r3, #4
 8001b24:	1a9b      	subs	r3, r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	440b      	add	r3, r1
 8001b2a:	3319      	adds	r3, #25
 8001b2c:	7f3a      	ldrb	r2, [r7, #28]
 8001b2e:	701a      	strb	r2, [r3, #0]
 8001b30:	e009      	b.n	8001b46 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b32:	78fa      	ldrb	r2, [r7, #3]
 8001b34:	6879      	ldr	r1, [r7, #4]
 8001b36:	4613      	mov	r3, r2
 8001b38:	011b      	lsls	r3, r3, #4
 8001b3a:	1a9b      	subs	r3, r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	440b      	add	r3, r1
 8001b40:	332a      	adds	r3, #42	@ 0x2a
 8001b42:	2202      	movs	r2, #2
 8001b44:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b46:	787b      	ldrb	r3, [r7, #1]
 8001b48:	2b03      	cmp	r3, #3
 8001b4a:	f200 8102 	bhi.w	8001d52 <HAL_HCD_HC_SubmitRequest+0x292>
 8001b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8001b54 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b54:	08001b65 	.word	0x08001b65
 8001b58:	08001d3d 	.word	0x08001d3d
 8001b5c:	08001c29 	.word	0x08001c29
 8001b60:	08001cb3 	.word	0x08001cb3
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001b64:	7c3b      	ldrb	r3, [r7, #16]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	f040 80f5 	bne.w	8001d56 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001b6c:	78bb      	ldrb	r3, [r7, #2]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d12d      	bne.n	8001bce <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001b72:	8b3b      	ldrh	r3, [r7, #24]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d109      	bne.n	8001b8c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001b78:	78fa      	ldrb	r2, [r7, #3]
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	011b      	lsls	r3, r3, #4
 8001b80:	1a9b      	subs	r3, r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	440b      	add	r3, r1
 8001b86:	333d      	adds	r3, #61	@ 0x3d
 8001b88:	2201      	movs	r2, #1
 8001b8a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b8c:	78fa      	ldrb	r2, [r7, #3]
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	011b      	lsls	r3, r3, #4
 8001b94:	1a9b      	subs	r3, r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	440b      	add	r3, r1
 8001b9a:	333d      	adds	r3, #61	@ 0x3d
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10a      	bne.n	8001bb8 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ba2:	78fa      	ldrb	r2, [r7, #3]
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	011b      	lsls	r3, r3, #4
 8001baa:	1a9b      	subs	r3, r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	440b      	add	r3, r1
 8001bb0:	332a      	adds	r3, #42	@ 0x2a
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001bb6:	e0ce      	b.n	8001d56 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bb8:	78fa      	ldrb	r2, [r7, #3]
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	011b      	lsls	r3, r3, #4
 8001bc0:	1a9b      	subs	r3, r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	332a      	adds	r3, #42	@ 0x2a
 8001bc8:	2202      	movs	r2, #2
 8001bca:	701a      	strb	r2, [r3, #0]
      break;
 8001bcc:	e0c3      	b.n	8001d56 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001bce:	78fa      	ldrb	r2, [r7, #3]
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	1a9b      	subs	r3, r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	440b      	add	r3, r1
 8001bdc:	331a      	adds	r3, #26
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	f040 80b8 	bne.w	8001d56 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001be6:	78fa      	ldrb	r2, [r7, #3]
 8001be8:	6879      	ldr	r1, [r7, #4]
 8001bea:	4613      	mov	r3, r2
 8001bec:	011b      	lsls	r3, r3, #4
 8001bee:	1a9b      	subs	r3, r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	333c      	adds	r3, #60	@ 0x3c
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d10a      	bne.n	8001c12 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bfc:	78fa      	ldrb	r2, [r7, #3]
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	4613      	mov	r3, r2
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	1a9b      	subs	r3, r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	440b      	add	r3, r1
 8001c0a:	332a      	adds	r3, #42	@ 0x2a
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
      break;
 8001c10:	e0a1      	b.n	8001d56 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c12:	78fa      	ldrb	r2, [r7, #3]
 8001c14:	6879      	ldr	r1, [r7, #4]
 8001c16:	4613      	mov	r3, r2
 8001c18:	011b      	lsls	r3, r3, #4
 8001c1a:	1a9b      	subs	r3, r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	440b      	add	r3, r1
 8001c20:	332a      	adds	r3, #42	@ 0x2a
 8001c22:	2202      	movs	r2, #2
 8001c24:	701a      	strb	r2, [r3, #0]
      break;
 8001c26:	e096      	b.n	8001d56 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001c28:	78bb      	ldrb	r3, [r7, #2]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d120      	bne.n	8001c70 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c2e:	78fa      	ldrb	r2, [r7, #3]
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	4613      	mov	r3, r2
 8001c34:	011b      	lsls	r3, r3, #4
 8001c36:	1a9b      	subs	r3, r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	333d      	adds	r3, #61	@ 0x3d
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10a      	bne.n	8001c5a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c44:	78fa      	ldrb	r2, [r7, #3]
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	011b      	lsls	r3, r3, #4
 8001c4c:	1a9b      	subs	r3, r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	332a      	adds	r3, #42	@ 0x2a
 8001c54:	2200      	movs	r2, #0
 8001c56:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001c58:	e07e      	b.n	8001d58 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c5a:	78fa      	ldrb	r2, [r7, #3]
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	011b      	lsls	r3, r3, #4
 8001c62:	1a9b      	subs	r3, r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	440b      	add	r3, r1
 8001c68:	332a      	adds	r3, #42	@ 0x2a
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	701a      	strb	r2, [r3, #0]
      break;
 8001c6e:	e073      	b.n	8001d58 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c70:	78fa      	ldrb	r2, [r7, #3]
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	011b      	lsls	r3, r3, #4
 8001c78:	1a9b      	subs	r3, r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	333c      	adds	r3, #60	@ 0x3c
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10a      	bne.n	8001c9c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c86:	78fa      	ldrb	r2, [r7, #3]
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	011b      	lsls	r3, r3, #4
 8001c8e:	1a9b      	subs	r3, r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	440b      	add	r3, r1
 8001c94:	332a      	adds	r3, #42	@ 0x2a
 8001c96:	2200      	movs	r2, #0
 8001c98:	701a      	strb	r2, [r3, #0]
      break;
 8001c9a:	e05d      	b.n	8001d58 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c9c:	78fa      	ldrb	r2, [r7, #3]
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	011b      	lsls	r3, r3, #4
 8001ca4:	1a9b      	subs	r3, r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	440b      	add	r3, r1
 8001caa:	332a      	adds	r3, #42	@ 0x2a
 8001cac:	2202      	movs	r2, #2
 8001cae:	701a      	strb	r2, [r3, #0]
      break;
 8001cb0:	e052      	b.n	8001d58 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001cb2:	78bb      	ldrb	r3, [r7, #2]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d120      	bne.n	8001cfa <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001cb8:	78fa      	ldrb	r2, [r7, #3]
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	011b      	lsls	r3, r3, #4
 8001cc0:	1a9b      	subs	r3, r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	333d      	adds	r3, #61	@ 0x3d
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10a      	bne.n	8001ce4 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cce:	78fa      	ldrb	r2, [r7, #3]
 8001cd0:	6879      	ldr	r1, [r7, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	011b      	lsls	r3, r3, #4
 8001cd6:	1a9b      	subs	r3, r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	440b      	add	r3, r1
 8001cdc:	332a      	adds	r3, #42	@ 0x2a
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001ce2:	e039      	b.n	8001d58 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ce4:	78fa      	ldrb	r2, [r7, #3]
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	011b      	lsls	r3, r3, #4
 8001cec:	1a9b      	subs	r3, r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	332a      	adds	r3, #42	@ 0x2a
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	701a      	strb	r2, [r3, #0]
      break;
 8001cf8:	e02e      	b.n	8001d58 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001cfa:	78fa      	ldrb	r2, [r7, #3]
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	011b      	lsls	r3, r3, #4
 8001d02:	1a9b      	subs	r3, r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	440b      	add	r3, r1
 8001d08:	333c      	adds	r3, #60	@ 0x3c
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d10a      	bne.n	8001d26 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d10:	78fa      	ldrb	r2, [r7, #3]
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	4613      	mov	r3, r2
 8001d16:	011b      	lsls	r3, r3, #4
 8001d18:	1a9b      	subs	r3, r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	332a      	adds	r3, #42	@ 0x2a
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]
      break;
 8001d24:	e018      	b.n	8001d58 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d26:	78fa      	ldrb	r2, [r7, #3]
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	011b      	lsls	r3, r3, #4
 8001d2e:	1a9b      	subs	r3, r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	440b      	add	r3, r1
 8001d34:	332a      	adds	r3, #42	@ 0x2a
 8001d36:	2202      	movs	r2, #2
 8001d38:	701a      	strb	r2, [r3, #0]
      break;
 8001d3a:	e00d      	b.n	8001d58 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d3c:	78fa      	ldrb	r2, [r7, #3]
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	4613      	mov	r3, r2
 8001d42:	011b      	lsls	r3, r3, #4
 8001d44:	1a9b      	subs	r3, r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	332a      	adds	r3, #42	@ 0x2a
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
      break;
 8001d50:	e002      	b.n	8001d58 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001d52:	bf00      	nop
 8001d54:	e000      	b.n	8001d58 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001d56:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001d58:	78fa      	ldrb	r2, [r7, #3]
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	011b      	lsls	r3, r3, #4
 8001d60:	1a9b      	subs	r3, r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	440b      	add	r3, r1
 8001d66:	332c      	adds	r3, #44	@ 0x2c
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001d6c:	78fa      	ldrb	r2, [r7, #3]
 8001d6e:	8b39      	ldrh	r1, [r7, #24]
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	4613      	mov	r3, r2
 8001d74:	011b      	lsls	r3, r3, #4
 8001d76:	1a9b      	subs	r3, r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4403      	add	r3, r0
 8001d7c:	3334      	adds	r3, #52	@ 0x34
 8001d7e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001d80:	78fa      	ldrb	r2, [r7, #3]
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	011b      	lsls	r3, r3, #4
 8001d88:	1a9b      	subs	r3, r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	334c      	adds	r3, #76	@ 0x4c
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d94:	78fa      	ldrb	r2, [r7, #3]
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	1a9b      	subs	r3, r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	3338      	adds	r3, #56	@ 0x38
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001da8:	78fa      	ldrb	r2, [r7, #3]
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	011b      	lsls	r3, r3, #4
 8001db0:	1a9b      	subs	r3, r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	3315      	adds	r3, #21
 8001db8:	78fa      	ldrb	r2, [r7, #3]
 8001dba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001dbc:	78fa      	ldrb	r2, [r7, #3]
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	1a9b      	subs	r3, r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	334d      	adds	r3, #77	@ 0x4d
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6818      	ldr	r0, [r3, #0]
 8001dd4:	78fa      	ldrb	r2, [r7, #3]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	011b      	lsls	r3, r3, #4
 8001dda:	1a9b      	subs	r3, r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	3310      	adds	r3, #16
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	4413      	add	r3, r2
 8001de4:	1d19      	adds	r1, r3, #4
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	799b      	ldrb	r3, [r3, #6]
 8001dea:	461a      	mov	r2, r3
 8001dec:	f002 fc16 	bl	800461c <USB_HC_StartXfer>
 8001df0:	4603      	mov	r3, r0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop

08001dfc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f002 f90a 	bl	800402c <USB_GetMode>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	f040 80fb 	bne.w	8002016 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f002 f8cd 	bl	8003fc4 <USB_ReadInterrupts>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f000 80f1 	beq.w	8002014 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f002 f8c4 	bl	8003fc4 <USB_ReadInterrupts>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001e46:	d104      	bne.n	8001e52 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001e50:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f002 f8b4 	bl	8003fc4 <USB_ReadInterrupts>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001e66:	d104      	bne.n	8001e72 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001e70:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f002 f8a4 	bl	8003fc4 <USB_ReadInterrupts>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e82:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001e86:	d104      	bne.n	8001e92 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001e90:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f002 f894 	bl	8003fc4 <USB_ReadInterrupts>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d103      	bne.n	8001eae <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2202      	movs	r2, #2
 8001eac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f002 f886 	bl	8003fc4 <USB_ReadInterrupts>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ebe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ec2:	d120      	bne.n	8001f06 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001ecc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d113      	bne.n	8001f06 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001ede:	2110      	movs	r1, #16
 8001ee0:	6938      	ldr	r0, [r7, #16]
 8001ee2:	f001 ff79 	bl	8003dd8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001ee6:	6938      	ldr	r0, [r7, #16]
 8001ee8:	f001 ffa8 	bl	8003e3c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	7a5b      	ldrb	r3, [r3, #9]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d105      	bne.n	8001f00 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2101      	movs	r1, #1
 8001efa:	4618      	mov	r0, r3
 8001efc:	f002 f99a 	bl	8004234 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f008 fe21 	bl	800ab48 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f002 f85a 	bl	8003fc4 <USB_ReadInterrupts>
 8001f10:	4603      	mov	r3, r0
 8001f12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f1a:	d102      	bne.n	8001f22 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f001 fd33 	bl	8003988 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f002 f84c 	bl	8003fc4 <USB_ReadInterrupts>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	f003 0308 	and.w	r3, r3, #8
 8001f32:	2b08      	cmp	r3, #8
 8001f34:	d106      	bne.n	8001f44 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f008 fdea 	bl	800ab10 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2208      	movs	r2, #8
 8001f42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f002 f83b 	bl	8003fc4 <USB_ReadInterrupts>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f58:	d139      	bne.n	8001fce <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f002 fdd6 	bl	8004b10 <USB_HC_ReadInterrupt>
 8001f64:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
 8001f6a:	e025      	b.n	8001fb8 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	fa22 f303 	lsr.w	r3, r2, r3
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d018      	beq.n	8001fb2 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	015a      	lsls	r2, r3, #5
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4413      	add	r3, r2
 8001f88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f96:	d106      	bne.n	8001fa6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f905 	bl	80021ae <HCD_HC_IN_IRQHandler>
 8001fa4:	e005      	b.n	8001fb2 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	4619      	mov	r1, r3
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 ff67 	bl	8002e80 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	617b      	str	r3, [r7, #20]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	795b      	ldrb	r3, [r3, #5]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d3d3      	bcc.n	8001f6c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f001 fff6 	bl	8003fc4 <USB_ReadInterrupts>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f003 0310 	and.w	r3, r3, #16
 8001fde:	2b10      	cmp	r3, #16
 8001fe0:	d101      	bne.n	8001fe6 <HAL_HCD_IRQHandler+0x1ea>
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <HAL_HCD_IRQHandler+0x1ec>
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d014      	beq.n	8002016 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	699a      	ldr	r2, [r3, #24]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0210 	bic.w	r2, r2, #16
 8001ffa:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f001 fbe4 	bl	80037ca <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	699a      	ldr	r2, [r3, #24]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f042 0210 	orr.w	r2, r2, #16
 8002010:	619a      	str	r2, [r3, #24]
 8002012:	e000      	b.n	8002016 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002014:	bf00      	nop
    }
  }
}
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800202a:	2b01      	cmp	r3, #1
 800202c:	d101      	bne.n	8002032 <HAL_HCD_Start+0x16>
 800202e:	2302      	movs	r3, #2
 8002030:	e013      	b.n	800205a <HAL_HCD_Start+0x3e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2101      	movs	r1, #1
 8002040:	4618      	mov	r0, r3
 8002042:	f002 f95e 	bl	8004302 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f001 fe56 	bl	8003cfc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <HAL_HCD_Stop+0x16>
 8002074:	2302      	movs	r3, #2
 8002076:	e00d      	b.n	8002094 <HAL_HCD_Stop+0x32>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f002 feb1 	bl	8004dec <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f002 f900 	bl	80042ae <USB_ResetPort>
 80020ae:	4603      	mov	r3, r0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80020c4:	78fa      	ldrb	r2, [r7, #3]
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	011b      	lsls	r3, r3, #4
 80020cc:	1a9b      	subs	r3, r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	334c      	adds	r3, #76	@ 0x4c
 80020d4:	781b      	ldrb	r3, [r3, #0]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	460b      	mov	r3, r1
 80020ec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80020ee:	78fa      	ldrb	r2, [r7, #3]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	011b      	lsls	r3, r3, #4
 80020f6:	1a9b      	subs	r3, r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	3338      	adds	r3, #56	@ 0x38
 80020fe:	681b      	ldr	r3, [r3, #0]
}
 8002100:	4618      	mov	r0, r3
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f002 f942 	bl	80043a2 <USB_GetCurrentFrame>
 800211e:	4603      	mov	r3, r0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f002 f91d 	bl	8004374 <USB_GetHostSpeed>
 800213a:	4603      	mov	r3, r0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002150:	78fa      	ldrb	r2, [r7, #3]
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	1a9b      	subs	r3, r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	331a      	adds	r3, #26
 8002160:	2200      	movs	r2, #0
 8002162:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002164:	78fa      	ldrb	r2, [r7, #3]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	011b      	lsls	r3, r3, #4
 800216c:	1a9b      	subs	r3, r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	331b      	adds	r3, #27
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002178:	78fa      	ldrb	r2, [r7, #3]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	1a9b      	subs	r3, r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	3325      	adds	r3, #37	@ 0x25
 8002188:	2200      	movs	r2, #0
 800218a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800218c:	78fa      	ldrb	r2, [r7, #3]
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	1a9b      	subs	r3, r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	3324      	adds	r3, #36	@ 0x24
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b086      	sub	sp, #24
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	460b      	mov	r3, r1
 80021b8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	78fa      	ldrb	r2, [r7, #3]
 80021ca:	4611      	mov	r1, r2
 80021cc:	4618      	mov	r0, r3
 80021ce:	f001 ff0c 	bl	8003fea <USB_ReadChInterrupts>
 80021d2:	4603      	mov	r3, r0
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b04      	cmp	r3, #4
 80021da:	d11a      	bne.n	8002212 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	015a      	lsls	r2, r3, #5
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4413      	add	r3, r2
 80021e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021e8:	461a      	mov	r2, r3
 80021ea:	2304      	movs	r3, #4
 80021ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80021ee:	78fa      	ldrb	r2, [r7, #3]
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	011b      	lsls	r3, r3, #4
 80021f6:	1a9b      	subs	r3, r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	334d      	adds	r3, #77	@ 0x4d
 80021fe:	2207      	movs	r2, #7
 8002200:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	78fa      	ldrb	r2, [r7, #3]
 8002208:	4611      	mov	r1, r2
 800220a:	4618      	mov	r0, r3
 800220c:	f002 fc91 	bl	8004b32 <USB_HC_Halt>
 8002210:	e09e      	b.n	8002350 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	78fa      	ldrb	r2, [r7, #3]
 8002218:	4611      	mov	r1, r2
 800221a:	4618      	mov	r0, r3
 800221c:	f001 fee5 	bl	8003fea <USB_ReadChInterrupts>
 8002220:	4603      	mov	r3, r0
 8002222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002226:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800222a:	d11b      	bne.n	8002264 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800222c:	78fb      	ldrb	r3, [r7, #3]
 800222e:	015a      	lsls	r2, r3, #5
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	4413      	add	r3, r2
 8002234:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002238:	461a      	mov	r2, r3
 800223a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800223e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002240:	78fa      	ldrb	r2, [r7, #3]
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	011b      	lsls	r3, r3, #4
 8002248:	1a9b      	subs	r3, r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	334d      	adds	r3, #77	@ 0x4d
 8002250:	2208      	movs	r2, #8
 8002252:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	78fa      	ldrb	r2, [r7, #3]
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f002 fc68 	bl	8004b32 <USB_HC_Halt>
 8002262:	e075      	b.n	8002350 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	78fa      	ldrb	r2, [r7, #3]
 800226a:	4611      	mov	r1, r2
 800226c:	4618      	mov	r0, r3
 800226e:	f001 febc 	bl	8003fea <USB_ReadChInterrupts>
 8002272:	4603      	mov	r3, r0
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	2b08      	cmp	r3, #8
 800227a:	d11a      	bne.n	80022b2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800227c:	78fb      	ldrb	r3, [r7, #3]
 800227e:	015a      	lsls	r2, r3, #5
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	4413      	add	r3, r2
 8002284:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002288:	461a      	mov	r2, r3
 800228a:	2308      	movs	r3, #8
 800228c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800228e:	78fa      	ldrb	r2, [r7, #3]
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	011b      	lsls	r3, r3, #4
 8002296:	1a9b      	subs	r3, r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	440b      	add	r3, r1
 800229c:	334d      	adds	r3, #77	@ 0x4d
 800229e:	2206      	movs	r2, #6
 80022a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	78fa      	ldrb	r2, [r7, #3]
 80022a8:	4611      	mov	r1, r2
 80022aa:	4618      	mov	r0, r3
 80022ac:	f002 fc41 	bl	8004b32 <USB_HC_Halt>
 80022b0:	e04e      	b.n	8002350 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	78fa      	ldrb	r2, [r7, #3]
 80022b8:	4611      	mov	r1, r2
 80022ba:	4618      	mov	r0, r3
 80022bc:	f001 fe95 	bl	8003fea <USB_ReadChInterrupts>
 80022c0:	4603      	mov	r3, r0
 80022c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022ca:	d11b      	bne.n	8002304 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80022cc:	78fb      	ldrb	r3, [r7, #3]
 80022ce:	015a      	lsls	r2, r3, #5
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4413      	add	r3, r2
 80022d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022d8:	461a      	mov	r2, r3
 80022da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022de:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80022e0:	78fa      	ldrb	r2, [r7, #3]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	011b      	lsls	r3, r3, #4
 80022e8:	1a9b      	subs	r3, r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	334d      	adds	r3, #77	@ 0x4d
 80022f0:	2209      	movs	r2, #9
 80022f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	78fa      	ldrb	r2, [r7, #3]
 80022fa:	4611      	mov	r1, r2
 80022fc:	4618      	mov	r0, r3
 80022fe:	f002 fc18 	bl	8004b32 <USB_HC_Halt>
 8002302:	e025      	b.n	8002350 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	78fa      	ldrb	r2, [r7, #3]
 800230a:	4611      	mov	r1, r2
 800230c:	4618      	mov	r0, r3
 800230e:	f001 fe6c 	bl	8003fea <USB_ReadChInterrupts>
 8002312:	4603      	mov	r3, r0
 8002314:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002318:	2b80      	cmp	r3, #128	@ 0x80
 800231a:	d119      	bne.n	8002350 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	015a      	lsls	r2, r3, #5
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4413      	add	r3, r2
 8002324:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002328:	461a      	mov	r2, r3
 800232a:	2380      	movs	r3, #128	@ 0x80
 800232c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800232e:	78fa      	ldrb	r2, [r7, #3]
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	011b      	lsls	r3, r3, #4
 8002336:	1a9b      	subs	r3, r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	440b      	add	r3, r1
 800233c:	334d      	adds	r3, #77	@ 0x4d
 800233e:	2207      	movs	r2, #7
 8002340:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	78fa      	ldrb	r2, [r7, #3]
 8002348:	4611      	mov	r1, r2
 800234a:	4618      	mov	r0, r3
 800234c:	f002 fbf1 	bl	8004b32 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	78fa      	ldrb	r2, [r7, #3]
 8002356:	4611      	mov	r1, r2
 8002358:	4618      	mov	r0, r3
 800235a:	f001 fe46 	bl	8003fea <USB_ReadChInterrupts>
 800235e:	4603      	mov	r3, r0
 8002360:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002364:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002368:	d112      	bne.n	8002390 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	78fa      	ldrb	r2, [r7, #3]
 8002370:	4611      	mov	r1, r2
 8002372:	4618      	mov	r0, r3
 8002374:	f002 fbdd 	bl	8004b32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002378:	78fb      	ldrb	r3, [r7, #3]
 800237a:	015a      	lsls	r2, r3, #5
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	4413      	add	r3, r2
 8002380:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002384:	461a      	mov	r2, r3
 8002386:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800238a:	6093      	str	r3, [r2, #8]
 800238c:	f000 bd75 	b.w	8002e7a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	78fa      	ldrb	r2, [r7, #3]
 8002396:	4611      	mov	r1, r2
 8002398:	4618      	mov	r0, r3
 800239a:	f001 fe26 	bl	8003fea <USB_ReadChInterrupts>
 800239e:	4603      	mov	r3, r0
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	f040 8128 	bne.w	80025fa <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80023aa:	78fb      	ldrb	r3, [r7, #3]
 80023ac:	015a      	lsls	r2, r3, #5
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023b6:	461a      	mov	r2, r3
 80023b8:	2320      	movs	r3, #32
 80023ba:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80023bc:	78fa      	ldrb	r2, [r7, #3]
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	011b      	lsls	r3, r3, #4
 80023c4:	1a9b      	subs	r3, r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	331b      	adds	r3, #27
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d119      	bne.n	8002406 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80023d2:	78fa      	ldrb	r2, [r7, #3]
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	011b      	lsls	r3, r3, #4
 80023da:	1a9b      	subs	r3, r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	440b      	add	r3, r1
 80023e0:	331b      	adds	r3, #27
 80023e2:	2200      	movs	r2, #0
 80023e4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	78fa      	ldrb	r2, [r7, #3]
 80023f6:	0151      	lsls	r1, r2, #5
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	440a      	add	r2, r1
 80023fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002400:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002404:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	799b      	ldrb	r3, [r3, #6]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d01b      	beq.n	8002446 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800240e:	78fa      	ldrb	r2, [r7, #3]
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	4613      	mov	r3, r2
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	1a9b      	subs	r3, r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	440b      	add	r3, r1
 800241c:	3330      	adds	r3, #48	@ 0x30
 800241e:	6819      	ldr	r1, [r3, #0]
 8002420:	78fb      	ldrb	r3, [r7, #3]
 8002422:	015a      	lsls	r2, r3, #5
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	4413      	add	r3, r2
 8002428:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002432:	78fa      	ldrb	r2, [r7, #3]
 8002434:	1ac9      	subs	r1, r1, r3
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	1a9b      	subs	r3, r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4403      	add	r3, r0
 8002442:	3338      	adds	r3, #56	@ 0x38
 8002444:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002446:	78fa      	ldrb	r2, [r7, #3]
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	1a9b      	subs	r3, r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	440b      	add	r3, r1
 8002454:	334d      	adds	r3, #77	@ 0x4d
 8002456:	2201      	movs	r2, #1
 8002458:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800245a:	78fa      	ldrb	r2, [r7, #3]
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	1a9b      	subs	r3, r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	3344      	adds	r3, #68	@ 0x44
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800246e:	78fb      	ldrb	r3, [r7, #3]
 8002470:	015a      	lsls	r2, r3, #5
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4413      	add	r3, r2
 8002476:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800247a:	461a      	mov	r2, r3
 800247c:	2301      	movs	r3, #1
 800247e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002480:	78fa      	ldrb	r2, [r7, #3]
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	1a9b      	subs	r3, r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	3326      	adds	r3, #38	@ 0x26
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00a      	beq.n	80024ac <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002496:	78fa      	ldrb	r2, [r7, #3]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	1a9b      	subs	r3, r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	3326      	adds	r3, #38	@ 0x26
 80024a6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d110      	bne.n	80024ce <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	78fa      	ldrb	r2, [r7, #3]
 80024b2:	4611      	mov	r1, r2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f002 fb3c 	bl	8004b32 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80024ba:	78fb      	ldrb	r3, [r7, #3]
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024c6:	461a      	mov	r2, r3
 80024c8:	2310      	movs	r3, #16
 80024ca:	6093      	str	r3, [r2, #8]
 80024cc:	e03d      	b.n	800254a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80024ce:	78fa      	ldrb	r2, [r7, #3]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	1a9b      	subs	r3, r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	3326      	adds	r3, #38	@ 0x26
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b03      	cmp	r3, #3
 80024e2:	d00a      	beq.n	80024fa <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	3326      	adds	r3, #38	@ 0x26
 80024f4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d127      	bne.n	800254a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80024fa:	78fb      	ldrb	r3, [r7, #3]
 80024fc:	015a      	lsls	r2, r3, #5
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	4413      	add	r3, r2
 8002502:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	78fa      	ldrb	r2, [r7, #3]
 800250a:	0151      	lsls	r1, r2, #5
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	440a      	add	r2, r1
 8002510:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002514:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002518:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800251a:	78fa      	ldrb	r2, [r7, #3]
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	1a9b      	subs	r3, r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	440b      	add	r3, r1
 8002528:	334c      	adds	r3, #76	@ 0x4c
 800252a:	2201      	movs	r2, #1
 800252c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800252e:	78fa      	ldrb	r2, [r7, #3]
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	1a9b      	subs	r3, r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	440b      	add	r3, r1
 800253c:	334c      	adds	r3, #76	@ 0x4c
 800253e:	781a      	ldrb	r2, [r3, #0]
 8002540:	78fb      	ldrb	r3, [r7, #3]
 8002542:	4619      	mov	r1, r3
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f008 fb0d 	bl	800ab64 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	799b      	ldrb	r3, [r3, #6]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d13b      	bne.n	80025ca <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002552:	78fa      	ldrb	r2, [r7, #3]
 8002554:	6879      	ldr	r1, [r7, #4]
 8002556:	4613      	mov	r3, r2
 8002558:	011b      	lsls	r3, r3, #4
 800255a:	1a9b      	subs	r3, r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	440b      	add	r3, r1
 8002560:	3338      	adds	r3, #56	@ 0x38
 8002562:	6819      	ldr	r1, [r3, #0]
 8002564:	78fa      	ldrb	r2, [r7, #3]
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	1a9b      	subs	r3, r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4403      	add	r3, r0
 8002572:	3328      	adds	r3, #40	@ 0x28
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	440b      	add	r3, r1
 8002578:	1e59      	subs	r1, r3, #1
 800257a:	78fa      	ldrb	r2, [r7, #3]
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	4613      	mov	r3, r2
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	1a9b      	subs	r3, r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4403      	add	r3, r0
 8002588:	3328      	adds	r3, #40	@ 0x28
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 8470 	beq.w	8002e7a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800259a:	78fa      	ldrb	r2, [r7, #3]
 800259c:	6879      	ldr	r1, [r7, #4]
 800259e:	4613      	mov	r3, r2
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	1a9b      	subs	r3, r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	440b      	add	r3, r1
 80025a8:	333c      	adds	r3, #60	@ 0x3c
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	78fa      	ldrb	r2, [r7, #3]
 80025ae:	f083 0301 	eor.w	r3, r3, #1
 80025b2:	b2d8      	uxtb	r0, r3
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	1a9b      	subs	r3, r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	440b      	add	r3, r1
 80025c0:	333c      	adds	r3, #60	@ 0x3c
 80025c2:	4602      	mov	r2, r0
 80025c4:	701a      	strb	r2, [r3, #0]
 80025c6:	f000 bc58 	b.w	8002e7a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80025ca:	78fa      	ldrb	r2, [r7, #3]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	1a9b      	subs	r3, r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	333c      	adds	r3, #60	@ 0x3c
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	78fa      	ldrb	r2, [r7, #3]
 80025de:	f083 0301 	eor.w	r3, r3, #1
 80025e2:	b2d8      	uxtb	r0, r3
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	011b      	lsls	r3, r3, #4
 80025ea:	1a9b      	subs	r3, r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	440b      	add	r3, r1
 80025f0:	333c      	adds	r3, #60	@ 0x3c
 80025f2:	4602      	mov	r2, r0
 80025f4:	701a      	strb	r2, [r3, #0]
 80025f6:	f000 bc40 	b.w	8002e7a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	78fa      	ldrb	r2, [r7, #3]
 8002600:	4611      	mov	r1, r2
 8002602:	4618      	mov	r0, r3
 8002604:	f001 fcf1 	bl	8003fea <USB_ReadChInterrupts>
 8002608:	4603      	mov	r3, r0
 800260a:	f003 0320 	and.w	r3, r3, #32
 800260e:	2b20      	cmp	r3, #32
 8002610:	d131      	bne.n	8002676 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002612:	78fb      	ldrb	r3, [r7, #3]
 8002614:	015a      	lsls	r2, r3, #5
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	4413      	add	r3, r2
 800261a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800261e:	461a      	mov	r2, r3
 8002620:	2320      	movs	r3, #32
 8002622:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002624:	78fa      	ldrb	r2, [r7, #3]
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	1a9b      	subs	r3, r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	331a      	adds	r3, #26
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2b01      	cmp	r3, #1
 8002638:	f040 841f 	bne.w	8002e7a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	1a9b      	subs	r3, r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	331b      	adds	r3, #27
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002650:	78fa      	ldrb	r2, [r7, #3]
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	1a9b      	subs	r3, r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	334d      	adds	r3, #77	@ 0x4d
 8002660:	2203      	movs	r2, #3
 8002662:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	78fa      	ldrb	r2, [r7, #3]
 800266a:	4611      	mov	r1, r2
 800266c:	4618      	mov	r0, r3
 800266e:	f002 fa60 	bl	8004b32 <USB_HC_Halt>
 8002672:	f000 bc02 	b.w	8002e7a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	78fa      	ldrb	r2, [r7, #3]
 800267c:	4611      	mov	r1, r2
 800267e:	4618      	mov	r0, r3
 8002680:	f001 fcb3 	bl	8003fea <USB_ReadChInterrupts>
 8002684:	4603      	mov	r3, r0
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b02      	cmp	r3, #2
 800268c:	f040 8305 	bne.w	8002c9a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002690:	78fb      	ldrb	r3, [r7, #3]
 8002692:	015a      	lsls	r2, r3, #5
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	4413      	add	r3, r2
 8002698:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800269c:	461a      	mov	r2, r3
 800269e:	2302      	movs	r3, #2
 80026a0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80026a2:	78fa      	ldrb	r2, [r7, #3]
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	011b      	lsls	r3, r3, #4
 80026aa:	1a9b      	subs	r3, r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	440b      	add	r3, r1
 80026b0:	334d      	adds	r3, #77	@ 0x4d
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d114      	bne.n	80026e2 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026b8:	78fa      	ldrb	r2, [r7, #3]
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	1a9b      	subs	r3, r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	334d      	adds	r3, #77	@ 0x4d
 80026c8:	2202      	movs	r2, #2
 80026ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80026cc:	78fa      	ldrb	r2, [r7, #3]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	1a9b      	subs	r3, r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	334c      	adds	r3, #76	@ 0x4c
 80026dc:	2201      	movs	r2, #1
 80026de:	701a      	strb	r2, [r3, #0]
 80026e0:	e2cc      	b.n	8002c7c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80026e2:	78fa      	ldrb	r2, [r7, #3]
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	4613      	mov	r3, r2
 80026e8:	011b      	lsls	r3, r3, #4
 80026ea:	1a9b      	subs	r3, r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	440b      	add	r3, r1
 80026f0:	334d      	adds	r3, #77	@ 0x4d
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b06      	cmp	r3, #6
 80026f6:	d114      	bne.n	8002722 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026f8:	78fa      	ldrb	r2, [r7, #3]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	334d      	adds	r3, #77	@ 0x4d
 8002708:	2202      	movs	r2, #2
 800270a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800270c:	78fa      	ldrb	r2, [r7, #3]
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	4613      	mov	r3, r2
 8002712:	011b      	lsls	r3, r3, #4
 8002714:	1a9b      	subs	r3, r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	440b      	add	r3, r1
 800271a:	334c      	adds	r3, #76	@ 0x4c
 800271c:	2205      	movs	r2, #5
 800271e:	701a      	strb	r2, [r3, #0]
 8002720:	e2ac      	b.n	8002c7c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002722:	78fa      	ldrb	r2, [r7, #3]
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	011b      	lsls	r3, r3, #4
 800272a:	1a9b      	subs	r3, r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	334d      	adds	r3, #77	@ 0x4d
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b07      	cmp	r3, #7
 8002736:	d00b      	beq.n	8002750 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002738:	78fa      	ldrb	r2, [r7, #3]
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	1a9b      	subs	r3, r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	334d      	adds	r3, #77	@ 0x4d
 8002748:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800274a:	2b09      	cmp	r3, #9
 800274c:	f040 80a6 	bne.w	800289c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002750:	78fa      	ldrb	r2, [r7, #3]
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	4613      	mov	r3, r2
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	1a9b      	subs	r3, r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	440b      	add	r3, r1
 800275e:	334d      	adds	r3, #77	@ 0x4d
 8002760:	2202      	movs	r2, #2
 8002762:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002764:	78fa      	ldrb	r2, [r7, #3]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	3344      	adds	r3, #68	@ 0x44
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	1c59      	adds	r1, r3, #1
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	1a9b      	subs	r3, r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4403      	add	r3, r0
 8002784:	3344      	adds	r3, #68	@ 0x44
 8002786:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002788:	78fa      	ldrb	r2, [r7, #3]
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	1a9b      	subs	r3, r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	3344      	adds	r3, #68	@ 0x44
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2b02      	cmp	r3, #2
 800279c:	d943      	bls.n	8002826 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800279e:	78fa      	ldrb	r2, [r7, #3]
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	1a9b      	subs	r3, r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	3344      	adds	r3, #68	@ 0x44
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80027b2:	78fa      	ldrb	r2, [r7, #3]
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	1a9b      	subs	r3, r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	331a      	adds	r3, #26
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d123      	bne.n	8002810 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80027c8:	78fa      	ldrb	r2, [r7, #3]
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	4613      	mov	r3, r2
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	331b      	adds	r3, #27
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80027dc:	78fa      	ldrb	r2, [r7, #3]
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	011b      	lsls	r3, r3, #4
 80027e4:	1a9b      	subs	r3, r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	331c      	adds	r3, #28
 80027ec:	2200      	movs	r2, #0
 80027ee:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80027f0:	78fb      	ldrb	r3, [r7, #3]
 80027f2:	015a      	lsls	r2, r3, #5
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4413      	add	r3, r2
 80027f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	78fa      	ldrb	r2, [r7, #3]
 8002800:	0151      	lsls	r1, r2, #5
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	440a      	add	r2, r1
 8002806:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800280a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800280e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002810:	78fa      	ldrb	r2, [r7, #3]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	334c      	adds	r3, #76	@ 0x4c
 8002820:	2204      	movs	r2, #4
 8002822:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002824:	e229      	b.n	8002c7a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002826:	78fa      	ldrb	r2, [r7, #3]
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	1a9b      	subs	r3, r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	334c      	adds	r3, #76	@ 0x4c
 8002836:	2202      	movs	r2, #2
 8002838:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800283a:	78fa      	ldrb	r2, [r7, #3]
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	1a9b      	subs	r3, r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	440b      	add	r3, r1
 8002848:	3326      	adds	r3, #38	@ 0x26
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00b      	beq.n	8002868 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002850:	78fa      	ldrb	r2, [r7, #3]
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	1a9b      	subs	r3, r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	3326      	adds	r3, #38	@ 0x26
 8002860:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002862:	2b02      	cmp	r3, #2
 8002864:	f040 8209 	bne.w	8002c7a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002868:	78fb      	ldrb	r3, [r7, #3]
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4413      	add	r3, r2
 8002870:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800287e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002886:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002888:	78fb      	ldrb	r3, [r7, #3]
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4413      	add	r3, r2
 8002890:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002894:	461a      	mov	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800289a:	e1ee      	b.n	8002c7a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800289c:	78fa      	ldrb	r2, [r7, #3]
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	1a9b      	subs	r3, r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	334d      	adds	r3, #77	@ 0x4d
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b05      	cmp	r3, #5
 80028b0:	f040 80c8 	bne.w	8002a44 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028b4:	78fa      	ldrb	r2, [r7, #3]
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	1a9b      	subs	r3, r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	334d      	adds	r3, #77	@ 0x4d
 80028c4:	2202      	movs	r2, #2
 80028c6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80028c8:	78fa      	ldrb	r2, [r7, #3]
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	1a9b      	subs	r3, r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	331b      	adds	r3, #27
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	f040 81ce 	bne.w	8002c7c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80028e0:	78fa      	ldrb	r2, [r7, #3]
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	4613      	mov	r3, r2
 80028e6:	011b      	lsls	r3, r3, #4
 80028e8:	1a9b      	subs	r3, r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	3326      	adds	r3, #38	@ 0x26
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b03      	cmp	r3, #3
 80028f4:	d16b      	bne.n	80029ce <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80028f6:	78fa      	ldrb	r2, [r7, #3]
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	011b      	lsls	r3, r3, #4
 80028fe:	1a9b      	subs	r3, r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	440b      	add	r3, r1
 8002904:	3348      	adds	r3, #72	@ 0x48
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	1c59      	adds	r1, r3, #1
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	1a9b      	subs	r3, r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4403      	add	r3, r0
 8002916:	3348      	adds	r3, #72	@ 0x48
 8002918:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800291a:	78fa      	ldrb	r2, [r7, #3]
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	1a9b      	subs	r3, r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	3348      	adds	r3, #72	@ 0x48
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b02      	cmp	r3, #2
 800292e:	d943      	bls.n	80029b8 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002930:	78fa      	ldrb	r2, [r7, #3]
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	3348      	adds	r3, #72	@ 0x48
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002944:	78fa      	ldrb	r2, [r7, #3]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	1a9b      	subs	r3, r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	331b      	adds	r3, #27
 8002954:	2200      	movs	r2, #0
 8002956:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002958:	78fa      	ldrb	r2, [r7, #3]
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	4613      	mov	r3, r2
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	1a9b      	subs	r3, r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	3344      	adds	r3, #68	@ 0x44
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2b02      	cmp	r3, #2
 800296c:	d809      	bhi.n	8002982 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800296e:	78fa      	ldrb	r2, [r7, #3]
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	1a9b      	subs	r3, r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	331c      	adds	r3, #28
 800297e:	2201      	movs	r2, #1
 8002980:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002982:	78fb      	ldrb	r3, [r7, #3]
 8002984:	015a      	lsls	r2, r3, #5
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4413      	add	r3, r2
 800298a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	78fa      	ldrb	r2, [r7, #3]
 8002992:	0151      	lsls	r1, r2, #5
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	440a      	add	r2, r1
 8002998:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800299c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029a0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80029a2:	78fa      	ldrb	r2, [r7, #3]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	1a9b      	subs	r3, r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	334c      	adds	r3, #76	@ 0x4c
 80029b2:	2204      	movs	r2, #4
 80029b4:	701a      	strb	r2, [r3, #0]
 80029b6:	e014      	b.n	80029e2 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029b8:	78fa      	ldrb	r2, [r7, #3]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	011b      	lsls	r3, r3, #4
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	334c      	adds	r3, #76	@ 0x4c
 80029c8:	2202      	movs	r2, #2
 80029ca:	701a      	strb	r2, [r3, #0]
 80029cc:	e009      	b.n	80029e2 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029ce:	78fa      	ldrb	r2, [r7, #3]
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	1a9b      	subs	r3, r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	440b      	add	r3, r1
 80029dc:	334c      	adds	r3, #76	@ 0x4c
 80029de:	2202      	movs	r2, #2
 80029e0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029e2:	78fa      	ldrb	r2, [r7, #3]
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	1a9b      	subs	r3, r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	440b      	add	r3, r1
 80029f0:	3326      	adds	r3, #38	@ 0x26
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00b      	beq.n	8002a10 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80029f8:	78fa      	ldrb	r2, [r7, #3]
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	4613      	mov	r3, r2
 80029fe:	011b      	lsls	r3, r3, #4
 8002a00:	1a9b      	subs	r3, r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	3326      	adds	r3, #38	@ 0x26
 8002a08:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	f040 8136 	bne.w	8002c7c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a10:	78fb      	ldrb	r3, [r7, #3]
 8002a12:	015a      	lsls	r2, r3, #5
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002a26:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a2e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a30:	78fb      	ldrb	r3, [r7, #3]
 8002a32:	015a      	lsls	r2, r3, #5
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	e11b      	b.n	8002c7c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002a44:	78fa      	ldrb	r2, [r7, #3]
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	1a9b      	subs	r3, r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	334d      	adds	r3, #77	@ 0x4d
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	f040 8081 	bne.w	8002b5e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a5c:	78fa      	ldrb	r2, [r7, #3]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	1a9b      	subs	r3, r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	334d      	adds	r3, #77	@ 0x4d
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002a70:	78fa      	ldrb	r2, [r7, #3]
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	011b      	lsls	r3, r3, #4
 8002a78:	1a9b      	subs	r3, r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	331b      	adds	r3, #27
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	f040 80fa 	bne.w	8002c7c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a88:	78fa      	ldrb	r2, [r7, #3]
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	1a9b      	subs	r3, r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	334c      	adds	r3, #76	@ 0x4c
 8002a98:	2202      	movs	r2, #2
 8002a9a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002a9c:	78fb      	ldrb	r3, [r7, #3]
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	78fa      	ldrb	r2, [r7, #3]
 8002aac:	0151      	lsls	r1, r2, #5
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	440a      	add	r2, r1
 8002ab2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ab6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aba:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002abc:	78fb      	ldrb	r3, [r7, #3]
 8002abe:	015a      	lsls	r2, r3, #5
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	78fa      	ldrb	r2, [r7, #3]
 8002acc:	0151      	lsls	r1, r2, #5
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	440a      	add	r2, r1
 8002ad2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ad6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ada:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002adc:	78fb      	ldrb	r3, [r7, #3]
 8002ade:	015a      	lsls	r2, r3, #5
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	78fa      	ldrb	r2, [r7, #3]
 8002aec:	0151      	lsls	r1, r2, #5
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	440a      	add	r2, r1
 8002af2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002af6:	f023 0320 	bic.w	r3, r3, #32
 8002afa:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002afc:	78fa      	ldrb	r2, [r7, #3]
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	011b      	lsls	r3, r3, #4
 8002b04:	1a9b      	subs	r3, r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	3326      	adds	r3, #38	@ 0x26
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00b      	beq.n	8002b2a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002b12:	78fa      	ldrb	r2, [r7, #3]
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	1a9b      	subs	r3, r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	3326      	adds	r3, #38	@ 0x26
 8002b22:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	f040 80a9 	bne.w	8002c7c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002b2a:	78fb      	ldrb	r3, [r7, #3]
 8002b2c:	015a      	lsls	r2, r3, #5
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	4413      	add	r3, r2
 8002b32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002b40:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b48:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002b4a:	78fb      	ldrb	r3, [r7, #3]
 8002b4c:	015a      	lsls	r2, r3, #5
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	4413      	add	r3, r2
 8002b52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b56:	461a      	mov	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6013      	str	r3, [r2, #0]
 8002b5c:	e08e      	b.n	8002c7c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002b5e:	78fa      	ldrb	r2, [r7, #3]
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	011b      	lsls	r3, r3, #4
 8002b66:	1a9b      	subs	r3, r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	334d      	adds	r3, #77	@ 0x4d
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d143      	bne.n	8002bfc <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b74:	78fa      	ldrb	r2, [r7, #3]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	334d      	adds	r3, #77	@ 0x4d
 8002b84:	2202      	movs	r2, #2
 8002b86:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b88:	78fa      	ldrb	r2, [r7, #3]
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	011b      	lsls	r3, r3, #4
 8002b90:	1a9b      	subs	r3, r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	334c      	adds	r3, #76	@ 0x4c
 8002b98:	2202      	movs	r2, #2
 8002b9a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b9c:	78fa      	ldrb	r2, [r7, #3]
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	011b      	lsls	r3, r3, #4
 8002ba4:	1a9b      	subs	r3, r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	3326      	adds	r3, #38	@ 0x26
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00a      	beq.n	8002bc8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002bb2:	78fa      	ldrb	r2, [r7, #3]
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	1a9b      	subs	r3, r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	3326      	adds	r3, #38	@ 0x26
 8002bc2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d159      	bne.n	8002c7c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	015a      	lsls	r2, r3, #5
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	4413      	add	r3, r2
 8002bd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002bde:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002be6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002be8:	78fb      	ldrb	r3, [r7, #3]
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	e03f      	b.n	8002c7c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	1a9b      	subs	r3, r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	334d      	adds	r3, #77	@ 0x4d
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b08      	cmp	r3, #8
 8002c10:	d126      	bne.n	8002c60 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c12:	78fa      	ldrb	r2, [r7, #3]
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	1a9b      	subs	r3, r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	440b      	add	r3, r1
 8002c20:	334d      	adds	r3, #77	@ 0x4d
 8002c22:	2202      	movs	r2, #2
 8002c24:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002c26:	78fa      	ldrb	r2, [r7, #3]
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	1a9b      	subs	r3, r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	440b      	add	r3, r1
 8002c34:	3344      	adds	r3, #68	@ 0x44
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	1c59      	adds	r1, r3, #1
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	1a9b      	subs	r3, r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4403      	add	r3, r0
 8002c46:	3344      	adds	r3, #68	@ 0x44
 8002c48:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002c4a:	78fa      	ldrb	r2, [r7, #3]
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	011b      	lsls	r3, r3, #4
 8002c52:	1a9b      	subs	r3, r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	440b      	add	r3, r1
 8002c58:	334c      	adds	r3, #76	@ 0x4c
 8002c5a:	2204      	movs	r2, #4
 8002c5c:	701a      	strb	r2, [r3, #0]
 8002c5e:	e00d      	b.n	8002c7c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002c60:	78fa      	ldrb	r2, [r7, #3]
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	4613      	mov	r3, r2
 8002c66:	011b      	lsls	r3, r3, #4
 8002c68:	1a9b      	subs	r3, r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	334d      	adds	r3, #77	@ 0x4d
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	f000 8100 	beq.w	8002e78 <HCD_HC_IN_IRQHandler+0xcca>
 8002c78:	e000      	b.n	8002c7c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002c7a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002c7c:	78fa      	ldrb	r2, [r7, #3]
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	1a9b      	subs	r3, r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	334c      	adds	r3, #76	@ 0x4c
 8002c8c:	781a      	ldrb	r2, [r3, #0]
 8002c8e:	78fb      	ldrb	r3, [r7, #3]
 8002c90:	4619      	mov	r1, r3
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f007 ff66 	bl	800ab64 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c98:	e0ef      	b.n	8002e7a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	78fa      	ldrb	r2, [r7, #3]
 8002ca0:	4611      	mov	r1, r2
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f001 f9a1 	bl	8003fea <USB_ReadChInterrupts>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cae:	2b40      	cmp	r3, #64	@ 0x40
 8002cb0:	d12f      	bne.n	8002d12 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002cb2:	78fb      	ldrb	r3, [r7, #3]
 8002cb4:	015a      	lsls	r2, r3, #5
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	4413      	add	r3, r2
 8002cba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	2340      	movs	r3, #64	@ 0x40
 8002cc2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002cc4:	78fa      	ldrb	r2, [r7, #3]
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	1a9b      	subs	r3, r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	334d      	adds	r3, #77	@ 0x4d
 8002cd4:	2205      	movs	r2, #5
 8002cd6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002cd8:	78fa      	ldrb	r2, [r7, #3]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	1a9b      	subs	r3, r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	331a      	adds	r3, #26
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d109      	bne.n	8002d02 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002cee:	78fa      	ldrb	r2, [r7, #3]
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	1a9b      	subs	r3, r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	3344      	adds	r3, #68	@ 0x44
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	78fa      	ldrb	r2, [r7, #3]
 8002d08:	4611      	mov	r1, r2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f001 ff11 	bl	8004b32 <USB_HC_Halt>
 8002d10:	e0b3      	b.n	8002e7a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	78fa      	ldrb	r2, [r7, #3]
 8002d18:	4611      	mov	r1, r2
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f001 f965 	bl	8003fea <USB_ReadChInterrupts>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f003 0310 	and.w	r3, r3, #16
 8002d26:	2b10      	cmp	r3, #16
 8002d28:	f040 80a7 	bne.w	8002e7a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002d2c:	78fa      	ldrb	r2, [r7, #3]
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	4613      	mov	r3, r2
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	1a9b      	subs	r3, r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	3326      	adds	r3, #38	@ 0x26
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	d11b      	bne.n	8002d7a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d42:	78fa      	ldrb	r2, [r7, #3]
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	4613      	mov	r3, r2
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	1a9b      	subs	r3, r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	440b      	add	r3, r1
 8002d50:	3344      	adds	r3, #68	@ 0x44
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002d56:	78fa      	ldrb	r2, [r7, #3]
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	1a9b      	subs	r3, r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	440b      	add	r3, r1
 8002d64:	334d      	adds	r3, #77	@ 0x4d
 8002d66:	2204      	movs	r2, #4
 8002d68:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	78fa      	ldrb	r2, [r7, #3]
 8002d70:	4611      	mov	r1, r2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f001 fedd 	bl	8004b32 <USB_HC_Halt>
 8002d78:	e03f      	b.n	8002dfa <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d7a:	78fa      	ldrb	r2, [r7, #3]
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	1a9b      	subs	r3, r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	440b      	add	r3, r1
 8002d88:	3326      	adds	r3, #38	@ 0x26
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00a      	beq.n	8002da6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d90:	78fa      	ldrb	r2, [r7, #3]
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	1a9b      	subs	r3, r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	3326      	adds	r3, #38	@ 0x26
 8002da0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d129      	bne.n	8002dfa <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002da6:	78fa      	ldrb	r2, [r7, #3]
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	4613      	mov	r3, r2
 8002dac:	011b      	lsls	r3, r3, #4
 8002dae:	1a9b      	subs	r3, r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	440b      	add	r3, r1
 8002db4:	3344      	adds	r3, #68	@ 0x44
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	799b      	ldrb	r3, [r3, #6]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00a      	beq.n	8002dd8 <HCD_HC_IN_IRQHandler+0xc2a>
 8002dc2:	78fa      	ldrb	r2, [r7, #3]
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	1a9b      	subs	r3, r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	331b      	adds	r3, #27
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d110      	bne.n	8002dfa <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002dd8:	78fa      	ldrb	r2, [r7, #3]
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	1a9b      	subs	r3, r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	334d      	adds	r3, #77	@ 0x4d
 8002de8:	2204      	movs	r2, #4
 8002dea:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	78fa      	ldrb	r2, [r7, #3]
 8002df2:	4611      	mov	r1, r2
 8002df4:	4618      	mov	r0, r3
 8002df6:	f001 fe9c 	bl	8004b32 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002dfa:	78fa      	ldrb	r2, [r7, #3]
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	1a9b      	subs	r3, r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	440b      	add	r3, r1
 8002e08:	331b      	adds	r3, #27
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d129      	bne.n	8002e64 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002e10:	78fa      	ldrb	r2, [r7, #3]
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	4613      	mov	r3, r2
 8002e16:	011b      	lsls	r3, r3, #4
 8002e18:	1a9b      	subs	r3, r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	331b      	adds	r3, #27
 8002e20:	2200      	movs	r2, #0
 8002e22:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002e24:	78fb      	ldrb	r3, [r7, #3]
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	78fa      	ldrb	r2, [r7, #3]
 8002e34:	0151      	lsls	r1, r2, #5
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	440a      	add	r2, r1
 8002e3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e42:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002e44:	78fb      	ldrb	r3, [r7, #3]
 8002e46:	015a      	lsls	r2, r3, #5
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	78fa      	ldrb	r2, [r7, #3]
 8002e54:	0151      	lsls	r1, r2, #5
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	440a      	add	r2, r1
 8002e5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e5e:	f043 0320 	orr.w	r3, r3, #32
 8002e62:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002e64:	78fb      	ldrb	r3, [r7, #3]
 8002e66:	015a      	lsls	r2, r3, #5
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e70:	461a      	mov	r2, r3
 8002e72:	2310      	movs	r3, #16
 8002e74:	6093      	str	r3, [r2, #8]
 8002e76:	e000      	b.n	8002e7a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002e78:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	78fa      	ldrb	r2, [r7, #3]
 8002e9c:	4611      	mov	r1, r2
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f001 f8a3 	bl	8003fea <USB_ReadChInterrupts>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d11b      	bne.n	8002ee6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002eae:	78fb      	ldrb	r3, [r7, #3]
 8002eb0:	015a      	lsls	r2, r3, #5
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eba:	461a      	mov	r2, r3
 8002ebc:	2304      	movs	r3, #4
 8002ebe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002ec0:	78fa      	ldrb	r2, [r7, #3]
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	011b      	lsls	r3, r3, #4
 8002ec8:	1a9b      	subs	r3, r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	334d      	adds	r3, #77	@ 0x4d
 8002ed0:	2207      	movs	r2, #7
 8002ed2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	78fa      	ldrb	r2, [r7, #3]
 8002eda:	4611      	mov	r1, r2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f001 fe28 	bl	8004b32 <USB_HC_Halt>
 8002ee2:	f000 bc6f 	b.w	80037c4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	78fa      	ldrb	r2, [r7, #3]
 8002eec:	4611      	mov	r1, r2
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f001 f87b 	bl	8003fea <USB_ReadChInterrupts>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f003 0320 	and.w	r3, r3, #32
 8002efa:	2b20      	cmp	r3, #32
 8002efc:	f040 8082 	bne.w	8003004 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002f00:	78fb      	ldrb	r3, [r7, #3]
 8002f02:	015a      	lsls	r2, r3, #5
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	4413      	add	r3, r2
 8002f08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	2320      	movs	r3, #32
 8002f10:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002f12:	78fa      	ldrb	r2, [r7, #3]
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	4613      	mov	r3, r2
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	1a9b      	subs	r3, r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	440b      	add	r3, r1
 8002f20:	3319      	adds	r3, #25
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d124      	bne.n	8002f72 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002f28:	78fa      	ldrb	r2, [r7, #3]
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	1a9b      	subs	r3, r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	3319      	adds	r3, #25
 8002f38:	2200      	movs	r2, #0
 8002f3a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f3c:	78fa      	ldrb	r2, [r7, #3]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	334c      	adds	r3, #76	@ 0x4c
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002f50:	78fa      	ldrb	r2, [r7, #3]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	1a9b      	subs	r3, r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	334d      	adds	r3, #77	@ 0x4d
 8002f60:	2203      	movs	r2, #3
 8002f62:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	78fa      	ldrb	r2, [r7, #3]
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f001 fde0 	bl	8004b32 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002f72:	78fa      	ldrb	r2, [r7, #3]
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	1a9b      	subs	r3, r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	331a      	adds	r3, #26
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	f040 841d 	bne.w	80037c4 <HCD_HC_OUT_IRQHandler+0x944>
 8002f8a:	78fa      	ldrb	r2, [r7, #3]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	331b      	adds	r3, #27
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f040 8411 	bne.w	80037c4 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002fa2:	78fa      	ldrb	r2, [r7, #3]
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	1a9b      	subs	r3, r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	440b      	add	r3, r1
 8002fb0:	3326      	adds	r3, #38	@ 0x26
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d009      	beq.n	8002fcc <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002fb8:	78fa      	ldrb	r2, [r7, #3]
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	1a9b      	subs	r3, r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	331b      	adds	r3, #27
 8002fc8:	2201      	movs	r2, #1
 8002fca:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002fcc:	78fa      	ldrb	r2, [r7, #3]
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	011b      	lsls	r3, r3, #4
 8002fd4:	1a9b      	subs	r3, r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	334d      	adds	r3, #77	@ 0x4d
 8002fdc:	2203      	movs	r2, #3
 8002fde:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	78fa      	ldrb	r2, [r7, #3]
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f001 fda2 	bl	8004b32 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002fee:	78fa      	ldrb	r2, [r7, #3]
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	1a9b      	subs	r3, r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	3344      	adds	r3, #68	@ 0x44
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	e3df      	b.n	80037c4 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	78fa      	ldrb	r2, [r7, #3]
 800300a:	4611      	mov	r1, r2
 800300c:	4618      	mov	r0, r3
 800300e:	f000 ffec 	bl	8003fea <USB_ReadChInterrupts>
 8003012:	4603      	mov	r3, r0
 8003014:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003018:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800301c:	d111      	bne.n	8003042 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800301e:	78fb      	ldrb	r3, [r7, #3]
 8003020:	015a      	lsls	r2, r3, #5
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4413      	add	r3, r2
 8003026:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800302a:	461a      	mov	r2, r3
 800302c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003030:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	78fa      	ldrb	r2, [r7, #3]
 8003038:	4611      	mov	r1, r2
 800303a:	4618      	mov	r0, r3
 800303c:	f001 fd79 	bl	8004b32 <USB_HC_Halt>
 8003040:	e3c0      	b.n	80037c4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	78fa      	ldrb	r2, [r7, #3]
 8003048:	4611      	mov	r1, r2
 800304a:	4618      	mov	r0, r3
 800304c:	f000 ffcd 	bl	8003fea <USB_ReadChInterrupts>
 8003050:	4603      	mov	r3, r0
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d168      	bne.n	800312c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800305a:	78fa      	ldrb	r2, [r7, #3]
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	1a9b      	subs	r3, r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	3344      	adds	r3, #68	@ 0x44
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	4611      	mov	r1, r2
 8003076:	4618      	mov	r0, r3
 8003078:	f000 ffb7 	bl	8003fea <USB_ReadChInterrupts>
 800307c:	4603      	mov	r3, r0
 800307e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003082:	2b40      	cmp	r3, #64	@ 0x40
 8003084:	d112      	bne.n	80030ac <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003086:	78fa      	ldrb	r2, [r7, #3]
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	1a9b      	subs	r3, r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	3319      	adds	r3, #25
 8003096:	2201      	movs	r2, #1
 8003098:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	015a      	lsls	r2, r3, #5
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4413      	add	r3, r2
 80030a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030a6:	461a      	mov	r2, r3
 80030a8:	2340      	movs	r3, #64	@ 0x40
 80030aa:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	1a9b      	subs	r3, r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	331b      	adds	r3, #27
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d019      	beq.n	80030f6 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80030c2:	78fa      	ldrb	r2, [r7, #3]
 80030c4:	6879      	ldr	r1, [r7, #4]
 80030c6:	4613      	mov	r3, r2
 80030c8:	011b      	lsls	r3, r3, #4
 80030ca:	1a9b      	subs	r3, r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	440b      	add	r3, r1
 80030d0:	331b      	adds	r3, #27
 80030d2:	2200      	movs	r2, #0
 80030d4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80030d6:	78fb      	ldrb	r3, [r7, #3]
 80030d8:	015a      	lsls	r2, r3, #5
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	4413      	add	r3, r2
 80030de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	78fa      	ldrb	r2, [r7, #3]
 80030e6:	0151      	lsls	r1, r2, #5
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	440a      	add	r2, r1
 80030ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80030f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030f4:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80030f6:	78fb      	ldrb	r3, [r7, #3]
 80030f8:	015a      	lsls	r2, r3, #5
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	4413      	add	r3, r2
 80030fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003102:	461a      	mov	r2, r3
 8003104:	2301      	movs	r3, #1
 8003106:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003108:	78fa      	ldrb	r2, [r7, #3]
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	4613      	mov	r3, r2
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	1a9b      	subs	r3, r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	334d      	adds	r3, #77	@ 0x4d
 8003118:	2201      	movs	r2, #1
 800311a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	78fa      	ldrb	r2, [r7, #3]
 8003122:	4611      	mov	r1, r2
 8003124:	4618      	mov	r0, r3
 8003126:	f001 fd04 	bl	8004b32 <USB_HC_Halt>
 800312a:	e34b      	b.n	80037c4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	78fa      	ldrb	r2, [r7, #3]
 8003132:	4611      	mov	r1, r2
 8003134:	4618      	mov	r0, r3
 8003136:	f000 ff58 	bl	8003fea <USB_ReadChInterrupts>
 800313a:	4603      	mov	r3, r0
 800313c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003140:	2b40      	cmp	r3, #64	@ 0x40
 8003142:	d139      	bne.n	80031b8 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003144:	78fa      	ldrb	r2, [r7, #3]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	334d      	adds	r3, #77	@ 0x4d
 8003154:	2205      	movs	r2, #5
 8003156:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003158:	78fa      	ldrb	r2, [r7, #3]
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	331a      	adds	r3, #26
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d109      	bne.n	8003182 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800316e:	78fa      	ldrb	r2, [r7, #3]
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	1a9b      	subs	r3, r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	3319      	adds	r3, #25
 800317e:	2201      	movs	r2, #1
 8003180:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003182:	78fa      	ldrb	r2, [r7, #3]
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	4613      	mov	r3, r2
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	1a9b      	subs	r3, r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	440b      	add	r3, r1
 8003190:	3344      	adds	r3, #68	@ 0x44
 8003192:	2200      	movs	r2, #0
 8003194:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	78fa      	ldrb	r2, [r7, #3]
 800319c:	4611      	mov	r1, r2
 800319e:	4618      	mov	r0, r3
 80031a0:	f001 fcc7 	bl	8004b32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80031a4:	78fb      	ldrb	r3, [r7, #3]
 80031a6:	015a      	lsls	r2, r3, #5
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	4413      	add	r3, r2
 80031ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031b0:	461a      	mov	r2, r3
 80031b2:	2340      	movs	r3, #64	@ 0x40
 80031b4:	6093      	str	r3, [r2, #8]
 80031b6:	e305      	b.n	80037c4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	78fa      	ldrb	r2, [r7, #3]
 80031be:	4611      	mov	r1, r2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 ff12 	bl	8003fea <USB_ReadChInterrupts>
 80031c6:	4603      	mov	r3, r0
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	d11a      	bne.n	8003206 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80031d0:	78fb      	ldrb	r3, [r7, #3]
 80031d2:	015a      	lsls	r2, r3, #5
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	4413      	add	r3, r2
 80031d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031dc:	461a      	mov	r2, r3
 80031de:	2308      	movs	r3, #8
 80031e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80031e2:	78fa      	ldrb	r2, [r7, #3]
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	334d      	adds	r3, #77	@ 0x4d
 80031f2:	2206      	movs	r2, #6
 80031f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	78fa      	ldrb	r2, [r7, #3]
 80031fc:	4611      	mov	r1, r2
 80031fe:	4618      	mov	r0, r3
 8003200:	f001 fc97 	bl	8004b32 <USB_HC_Halt>
 8003204:	e2de      	b.n	80037c4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	78fa      	ldrb	r2, [r7, #3]
 800320c:	4611      	mov	r1, r2
 800320e:	4618      	mov	r0, r3
 8003210:	f000 feeb 	bl	8003fea <USB_ReadChInterrupts>
 8003214:	4603      	mov	r3, r0
 8003216:	f003 0310 	and.w	r3, r3, #16
 800321a:	2b10      	cmp	r3, #16
 800321c:	d144      	bne.n	80032a8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800321e:	78fa      	ldrb	r2, [r7, #3]
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	1a9b      	subs	r3, r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	3344      	adds	r3, #68	@ 0x44
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003232:	78fa      	ldrb	r2, [r7, #3]
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	1a9b      	subs	r3, r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	440b      	add	r3, r1
 8003240:	334d      	adds	r3, #77	@ 0x4d
 8003242:	2204      	movs	r2, #4
 8003244:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003246:	78fa      	ldrb	r2, [r7, #3]
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	1a9b      	subs	r3, r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	440b      	add	r3, r1
 8003254:	3319      	adds	r3, #25
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d114      	bne.n	8003286 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800325c:	78fa      	ldrb	r2, [r7, #3]
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	1a9b      	subs	r3, r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	3318      	adds	r3, #24
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d109      	bne.n	8003286 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003272:	78fa      	ldrb	r2, [r7, #3]
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	4613      	mov	r3, r2
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	1a9b      	subs	r3, r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	440b      	add	r3, r1
 8003280:	3319      	adds	r3, #25
 8003282:	2201      	movs	r2, #1
 8003284:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	78fa      	ldrb	r2, [r7, #3]
 800328c:	4611      	mov	r1, r2
 800328e:	4618      	mov	r0, r3
 8003290:	f001 fc4f 	bl	8004b32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003294:	78fb      	ldrb	r3, [r7, #3]
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	4413      	add	r3, r2
 800329c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032a0:	461a      	mov	r2, r3
 80032a2:	2310      	movs	r3, #16
 80032a4:	6093      	str	r3, [r2, #8]
 80032a6:	e28d      	b.n	80037c4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	78fa      	ldrb	r2, [r7, #3]
 80032ae:	4611      	mov	r1, r2
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 fe9a 	bl	8003fea <USB_ReadChInterrupts>
 80032b6:	4603      	mov	r3, r0
 80032b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032bc:	2b80      	cmp	r3, #128	@ 0x80
 80032be:	d169      	bne.n	8003394 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	799b      	ldrb	r3, [r3, #6]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d111      	bne.n	80032ec <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80032c8:	78fa      	ldrb	r2, [r7, #3]
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	4613      	mov	r3, r2
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	1a9b      	subs	r3, r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	334d      	adds	r3, #77	@ 0x4d
 80032d8:	2207      	movs	r2, #7
 80032da:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	78fa      	ldrb	r2, [r7, #3]
 80032e2:	4611      	mov	r1, r2
 80032e4:	4618      	mov	r0, r3
 80032e6:	f001 fc24 	bl	8004b32 <USB_HC_Halt>
 80032ea:	e049      	b.n	8003380 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80032ec:	78fa      	ldrb	r2, [r7, #3]
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	1a9b      	subs	r3, r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	3344      	adds	r3, #68	@ 0x44
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	1c59      	adds	r1, r3, #1
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4403      	add	r3, r0
 800330c:	3344      	adds	r3, #68	@ 0x44
 800330e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003310:	78fa      	ldrb	r2, [r7, #3]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	3344      	adds	r3, #68	@ 0x44
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2b02      	cmp	r3, #2
 8003324:	d922      	bls.n	800336c <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003326:	78fa      	ldrb	r2, [r7, #3]
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	1a9b      	subs	r3, r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	3344      	adds	r3, #68	@ 0x44
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800333a:	78fa      	ldrb	r2, [r7, #3]
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	334c      	adds	r3, #76	@ 0x4c
 800334a:	2204      	movs	r2, #4
 800334c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	334c      	adds	r3, #76	@ 0x4c
 800335e:	781a      	ldrb	r2, [r3, #0]
 8003360:	78fb      	ldrb	r3, [r7, #3]
 8003362:	4619      	mov	r1, r3
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f007 fbfd 	bl	800ab64 <HAL_HCD_HC_NotifyURBChange_Callback>
 800336a:	e009      	b.n	8003380 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800336c:	78fa      	ldrb	r2, [r7, #3]
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	4613      	mov	r3, r2
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	1a9b      	subs	r3, r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	334c      	adds	r3, #76	@ 0x4c
 800337c:	2202      	movs	r2, #2
 800337e:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003380:	78fb      	ldrb	r3, [r7, #3]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	4413      	add	r3, r2
 8003388:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800338c:	461a      	mov	r2, r3
 800338e:	2380      	movs	r3, #128	@ 0x80
 8003390:	6093      	str	r3, [r2, #8]
 8003392:	e217      	b.n	80037c4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	78fa      	ldrb	r2, [r7, #3]
 800339a:	4611      	mov	r1, r2
 800339c:	4618      	mov	r0, r3
 800339e:	f000 fe24 	bl	8003fea <USB_ReadChInterrupts>
 80033a2:	4603      	mov	r3, r0
 80033a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033ac:	d11b      	bne.n	80033e6 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80033ae:	78fa      	ldrb	r2, [r7, #3]
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	4613      	mov	r3, r2
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	1a9b      	subs	r3, r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	334d      	adds	r3, #77	@ 0x4d
 80033be:	2209      	movs	r2, #9
 80033c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	78fa      	ldrb	r2, [r7, #3]
 80033c8:	4611      	mov	r1, r2
 80033ca:	4618      	mov	r0, r3
 80033cc:	f001 fbb1 	bl	8004b32 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80033d0:	78fb      	ldrb	r3, [r7, #3]
 80033d2:	015a      	lsls	r2, r3, #5
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	4413      	add	r3, r2
 80033d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033dc:	461a      	mov	r2, r3
 80033de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033e2:	6093      	str	r3, [r2, #8]
 80033e4:	e1ee      	b.n	80037c4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	78fa      	ldrb	r2, [r7, #3]
 80033ec:	4611      	mov	r1, r2
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 fdfb 	bl	8003fea <USB_ReadChInterrupts>
 80033f4:	4603      	mov	r3, r0
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	f040 81df 	bne.w	80037be <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003400:	78fb      	ldrb	r3, [r7, #3]
 8003402:	015a      	lsls	r2, r3, #5
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	4413      	add	r3, r2
 8003408:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800340c:	461a      	mov	r2, r3
 800340e:	2302      	movs	r3, #2
 8003410:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003412:	78fa      	ldrb	r2, [r7, #3]
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	1a9b      	subs	r3, r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	334d      	adds	r3, #77	@ 0x4d
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b01      	cmp	r3, #1
 8003426:	f040 8093 	bne.w	8003550 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800342a:	78fa      	ldrb	r2, [r7, #3]
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	4613      	mov	r3, r2
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	1a9b      	subs	r3, r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	440b      	add	r3, r1
 8003438:	334d      	adds	r3, #77	@ 0x4d
 800343a:	2202      	movs	r2, #2
 800343c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800343e:	78fa      	ldrb	r2, [r7, #3]
 8003440:	6879      	ldr	r1, [r7, #4]
 8003442:	4613      	mov	r3, r2
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	1a9b      	subs	r3, r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	334c      	adds	r3, #76	@ 0x4c
 800344e:	2201      	movs	r2, #1
 8003450:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003452:	78fa      	ldrb	r2, [r7, #3]
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	1a9b      	subs	r3, r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	440b      	add	r3, r1
 8003460:	3326      	adds	r3, #38	@ 0x26
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b02      	cmp	r3, #2
 8003466:	d00b      	beq.n	8003480 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003468:	78fa      	ldrb	r2, [r7, #3]
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	4613      	mov	r3, r2
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	1a9b      	subs	r3, r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	440b      	add	r3, r1
 8003476:	3326      	adds	r3, #38	@ 0x26
 8003478:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800347a:	2b03      	cmp	r3, #3
 800347c:	f040 8190 	bne.w	80037a0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	799b      	ldrb	r3, [r3, #6]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d115      	bne.n	80034b4 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003488:	78fa      	ldrb	r2, [r7, #3]
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	4613      	mov	r3, r2
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	1a9b      	subs	r3, r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	333d      	adds	r3, #61	@ 0x3d
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	f083 0301 	eor.w	r3, r3, #1
 80034a0:	b2d8      	uxtb	r0, r3
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	1a9b      	subs	r3, r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	333d      	adds	r3, #61	@ 0x3d
 80034b0:	4602      	mov	r2, r0
 80034b2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	799b      	ldrb	r3, [r3, #6]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	f040 8171 	bne.w	80037a0 <HCD_HC_OUT_IRQHandler+0x920>
 80034be:	78fa      	ldrb	r2, [r7, #3]
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	011b      	lsls	r3, r3, #4
 80034c6:	1a9b      	subs	r3, r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	3334      	adds	r3, #52	@ 0x34
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 8165 	beq.w	80037a0 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80034d6:	78fa      	ldrb	r2, [r7, #3]
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	1a9b      	subs	r3, r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	3334      	adds	r3, #52	@ 0x34
 80034e6:	6819      	ldr	r1, [r3, #0]
 80034e8:	78fa      	ldrb	r2, [r7, #3]
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4403      	add	r3, r0
 80034f6:	3328      	adds	r3, #40	@ 0x28
 80034f8:	881b      	ldrh	r3, [r3, #0]
 80034fa:	440b      	add	r3, r1
 80034fc:	1e59      	subs	r1, r3, #1
 80034fe:	78fa      	ldrb	r2, [r7, #3]
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	1a9b      	subs	r3, r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4403      	add	r3, r0
 800350c:	3328      	adds	r3, #40	@ 0x28
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	fbb1 f3f3 	udiv	r3, r1, r3
 8003514:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 813f 	beq.w	80037a0 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003522:	78fa      	ldrb	r2, [r7, #3]
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	4613      	mov	r3, r2
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	1a9b      	subs	r3, r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	440b      	add	r3, r1
 8003530:	333d      	adds	r3, #61	@ 0x3d
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	78fa      	ldrb	r2, [r7, #3]
 8003536:	f083 0301 	eor.w	r3, r3, #1
 800353a:	b2d8      	uxtb	r0, r3
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	4613      	mov	r3, r2
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	1a9b      	subs	r3, r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	333d      	adds	r3, #61	@ 0x3d
 800354a:	4602      	mov	r2, r0
 800354c:	701a      	strb	r2, [r3, #0]
 800354e:	e127      	b.n	80037a0 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003550:	78fa      	ldrb	r2, [r7, #3]
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	334d      	adds	r3, #77	@ 0x4d
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b03      	cmp	r3, #3
 8003564:	d120      	bne.n	80035a8 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003566:	78fa      	ldrb	r2, [r7, #3]
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	334d      	adds	r3, #77	@ 0x4d
 8003576:	2202      	movs	r2, #2
 8003578:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800357a:	78fa      	ldrb	r2, [r7, #3]
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	1a9b      	subs	r3, r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	440b      	add	r3, r1
 8003588:	331b      	adds	r3, #27
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b01      	cmp	r3, #1
 800358e:	f040 8107 	bne.w	80037a0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003592:	78fa      	ldrb	r2, [r7, #3]
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	4613      	mov	r3, r2
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	1a9b      	subs	r3, r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	334c      	adds	r3, #76	@ 0x4c
 80035a2:	2202      	movs	r2, #2
 80035a4:	701a      	strb	r2, [r3, #0]
 80035a6:	e0fb      	b.n	80037a0 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80035a8:	78fa      	ldrb	r2, [r7, #3]
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	1a9b      	subs	r3, r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	334d      	adds	r3, #77	@ 0x4d
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d13a      	bne.n	8003634 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035be:	78fa      	ldrb	r2, [r7, #3]
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	334d      	adds	r3, #77	@ 0x4d
 80035ce:	2202      	movs	r2, #2
 80035d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035d2:	78fa      	ldrb	r2, [r7, #3]
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	1a9b      	subs	r3, r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	334c      	adds	r3, #76	@ 0x4c
 80035e2:	2202      	movs	r2, #2
 80035e4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80035e6:	78fa      	ldrb	r2, [r7, #3]
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	1a9b      	subs	r3, r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	331b      	adds	r3, #27
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	f040 80d1 	bne.w	80037a0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80035fe:	78fa      	ldrb	r2, [r7, #3]
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	1a9b      	subs	r3, r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	331b      	adds	r3, #27
 800360e:	2200      	movs	r2, #0
 8003610:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003612:	78fb      	ldrb	r3, [r7, #3]
 8003614:	015a      	lsls	r2, r3, #5
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	4413      	add	r3, r2
 800361a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	78fa      	ldrb	r2, [r7, #3]
 8003622:	0151      	lsls	r1, r2, #5
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	440a      	add	r2, r1
 8003628:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800362c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003630:	6053      	str	r3, [r2, #4]
 8003632:	e0b5      	b.n	80037a0 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003634:	78fa      	ldrb	r2, [r7, #3]
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	1a9b      	subs	r3, r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	334d      	adds	r3, #77	@ 0x4d
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	2b05      	cmp	r3, #5
 8003648:	d114      	bne.n	8003674 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800364a:	78fa      	ldrb	r2, [r7, #3]
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	1a9b      	subs	r3, r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	440b      	add	r3, r1
 8003658:	334d      	adds	r3, #77	@ 0x4d
 800365a:	2202      	movs	r2, #2
 800365c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800365e:	78fa      	ldrb	r2, [r7, #3]
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	1a9b      	subs	r3, r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	440b      	add	r3, r1
 800366c:	334c      	adds	r3, #76	@ 0x4c
 800366e:	2202      	movs	r2, #2
 8003670:	701a      	strb	r2, [r3, #0]
 8003672:	e095      	b.n	80037a0 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003674:	78fa      	ldrb	r2, [r7, #3]
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	4613      	mov	r3, r2
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	1a9b      	subs	r3, r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	334d      	adds	r3, #77	@ 0x4d
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b06      	cmp	r3, #6
 8003688:	d114      	bne.n	80036b4 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800368a:	78fa      	ldrb	r2, [r7, #3]
 800368c:	6879      	ldr	r1, [r7, #4]
 800368e:	4613      	mov	r3, r2
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	1a9b      	subs	r3, r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	440b      	add	r3, r1
 8003698:	334d      	adds	r3, #77	@ 0x4d
 800369a:	2202      	movs	r2, #2
 800369c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800369e:	78fa      	ldrb	r2, [r7, #3]
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	4613      	mov	r3, r2
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	1a9b      	subs	r3, r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	440b      	add	r3, r1
 80036ac:	334c      	adds	r3, #76	@ 0x4c
 80036ae:	2205      	movs	r2, #5
 80036b0:	701a      	strb	r2, [r3, #0]
 80036b2:	e075      	b.n	80037a0 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80036b4:	78fa      	ldrb	r2, [r7, #3]
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	4613      	mov	r3, r2
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	1a9b      	subs	r3, r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	334d      	adds	r3, #77	@ 0x4d
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	2b07      	cmp	r3, #7
 80036c8:	d00a      	beq.n	80036e0 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80036ca:	78fa      	ldrb	r2, [r7, #3]
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	4613      	mov	r3, r2
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	1a9b      	subs	r3, r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	334d      	adds	r3, #77	@ 0x4d
 80036da:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80036dc:	2b09      	cmp	r3, #9
 80036de:	d170      	bne.n	80037c2 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036e0:	78fa      	ldrb	r2, [r7, #3]
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	4613      	mov	r3, r2
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	1a9b      	subs	r3, r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	334d      	adds	r3, #77	@ 0x4d
 80036f0:	2202      	movs	r2, #2
 80036f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80036f4:	78fa      	ldrb	r2, [r7, #3]
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	4613      	mov	r3, r2
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	1a9b      	subs	r3, r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	3344      	adds	r3, #68	@ 0x44
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	1c59      	adds	r1, r3, #1
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	1a9b      	subs	r3, r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4403      	add	r3, r0
 8003714:	3344      	adds	r3, #68	@ 0x44
 8003716:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003718:	78fa      	ldrb	r2, [r7, #3]
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	4613      	mov	r3, r2
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	1a9b      	subs	r3, r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	3344      	adds	r3, #68	@ 0x44
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2b02      	cmp	r3, #2
 800372c:	d914      	bls.n	8003758 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800372e:	78fa      	ldrb	r2, [r7, #3]
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	4613      	mov	r3, r2
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	1a9b      	subs	r3, r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	440b      	add	r3, r1
 800373c:	3344      	adds	r3, #68	@ 0x44
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003742:	78fa      	ldrb	r2, [r7, #3]
 8003744:	6879      	ldr	r1, [r7, #4]
 8003746:	4613      	mov	r3, r2
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	1a9b      	subs	r3, r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	440b      	add	r3, r1
 8003750:	334c      	adds	r3, #76	@ 0x4c
 8003752:	2204      	movs	r2, #4
 8003754:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003756:	e022      	b.n	800379e <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003758:	78fa      	ldrb	r2, [r7, #3]
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	4613      	mov	r3, r2
 800375e:	011b      	lsls	r3, r3, #4
 8003760:	1a9b      	subs	r3, r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	334c      	adds	r3, #76	@ 0x4c
 8003768:	2202      	movs	r2, #2
 800376a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800376c:	78fb      	ldrb	r3, [r7, #3]
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	4413      	add	r3, r2
 8003774:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003782:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800378a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800378c:	78fb      	ldrb	r3, [r7, #3]
 800378e:	015a      	lsls	r2, r3, #5
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	4413      	add	r3, r2
 8003794:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003798:	461a      	mov	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800379e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80037a0:	78fa      	ldrb	r2, [r7, #3]
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	1a9b      	subs	r3, r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	334c      	adds	r3, #76	@ 0x4c
 80037b0:	781a      	ldrb	r2, [r3, #0]
 80037b2:	78fb      	ldrb	r3, [r7, #3]
 80037b4:	4619      	mov	r1, r3
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f007 f9d4 	bl	800ab64 <HAL_HCD_HC_NotifyURBChange_Callback>
 80037bc:	e002      	b.n	80037c4 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80037be:	bf00      	nop
 80037c0:	e000      	b.n	80037c4 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80037c2:	bf00      	nop
  }
}
 80037c4:	3718      	adds	r7, #24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b08a      	sub	sp, #40	@ 0x28
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037da:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	0c5b      	lsrs	r3, r3, #17
 80037f0:	f003 030f 	and.w	r3, r3, #15
 80037f4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	091b      	lsrs	r3, r3, #4
 80037fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037fe:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	2b02      	cmp	r3, #2
 8003804:	d004      	beq.n	8003810 <HCD_RXQLVL_IRQHandler+0x46>
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	2b05      	cmp	r3, #5
 800380a:	f000 80b6 	beq.w	800397a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800380e:	e0b7      	b.n	8003980 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	2b00      	cmp	r3, #0
 8003814:	f000 80b3 	beq.w	800397e <HCD_RXQLVL_IRQHandler+0x1b4>
 8003818:	6879      	ldr	r1, [r7, #4]
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	4613      	mov	r3, r2
 800381e:	011b      	lsls	r3, r3, #4
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	332c      	adds	r3, #44	@ 0x2c
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 80a7 	beq.w	800397e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	4613      	mov	r3, r2
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	1a9b      	subs	r3, r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	3338      	adds	r3, #56	@ 0x38
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	18d1      	adds	r1, r2, r3
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	4613      	mov	r3, r2
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	1a9b      	subs	r3, r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4403      	add	r3, r0
 8003854:	3334      	adds	r3, #52	@ 0x34
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4299      	cmp	r1, r3
 800385a:	f200 8083 	bhi.w	8003964 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6818      	ldr	r0, [r3, #0]
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	4613      	mov	r3, r2
 8003868:	011b      	lsls	r3, r3, #4
 800386a:	1a9b      	subs	r3, r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	440b      	add	r3, r1
 8003870:	332c      	adds	r3, #44	@ 0x2c
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	b292      	uxth	r2, r2
 8003878:	4619      	mov	r1, r3
 800387a:	f000 fb4b 	bl	8003f14 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4613      	mov	r3, r2
 8003884:	011b      	lsls	r3, r3, #4
 8003886:	1a9b      	subs	r3, r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	440b      	add	r3, r1
 800388c:	332c      	adds	r3, #44	@ 0x2c
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	18d1      	adds	r1, r2, r3
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4613      	mov	r3, r2
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	1a9b      	subs	r3, r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4403      	add	r3, r0
 80038a2:	332c      	adds	r3, #44	@ 0x2c
 80038a4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4613      	mov	r3, r2
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	1a9b      	subs	r3, r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	440b      	add	r3, r1
 80038b4:	3338      	adds	r3, #56	@ 0x38
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	18d1      	adds	r1, r2, r3
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	4613      	mov	r3, r2
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	1a9b      	subs	r3, r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4403      	add	r3, r0
 80038ca:	3338      	adds	r3, #56	@ 0x38
 80038cc:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	015a      	lsls	r2, r3, #5
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	0cdb      	lsrs	r3, r3, #19
 80038de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038e2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80038e4:	6879      	ldr	r1, [r7, #4]
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	4613      	mov	r3, r2
 80038ea:	011b      	lsls	r3, r3, #4
 80038ec:	1a9b      	subs	r3, r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	440b      	add	r3, r1
 80038f2:	3328      	adds	r3, #40	@ 0x28
 80038f4:	881b      	ldrh	r3, [r3, #0]
 80038f6:	461a      	mov	r2, r3
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d13f      	bne.n	800397e <HCD_RXQLVL_IRQHandler+0x1b4>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d03c      	beq.n	800397e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	4413      	add	r3, r2
 800390c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800391a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003922:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	4413      	add	r3, r2
 800392c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003930:	461a      	mov	r2, r3
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	4613      	mov	r3, r2
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	1a9b      	subs	r3, r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	440b      	add	r3, r1
 8003944:	333c      	adds	r3, #60	@ 0x3c
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	f083 0301 	eor.w	r3, r3, #1
 800394c:	b2d8      	uxtb	r0, r3
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	4613      	mov	r3, r2
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	1a9b      	subs	r3, r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	440b      	add	r3, r1
 800395c:	333c      	adds	r3, #60	@ 0x3c
 800395e:	4602      	mov	r2, r0
 8003960:	701a      	strb	r2, [r3, #0]
      break;
 8003962:	e00c      	b.n	800397e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	4613      	mov	r3, r2
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	1a9b      	subs	r3, r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	334c      	adds	r3, #76	@ 0x4c
 8003974:	2204      	movs	r2, #4
 8003976:	701a      	strb	r2, [r3, #0]
      break;
 8003978:	e001      	b.n	800397e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800397a:	bf00      	nop
 800397c:	e000      	b.n	8003980 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800397e:	bf00      	nop
  }
}
 8003980:	bf00      	nop
 8003982:	3728      	adds	r7, #40	@ 0x28
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	613b      	str	r3, [r7, #16]
  volatile uint32_t hprt0;
  volatile uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80039b4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d10b      	bne.n	80039d8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d102      	bne.n	80039d0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f007 f8ae 	bl	800ab2c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	f043 0302 	orr.w	r3, r3, #2
 80039d6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d132      	bne.n	8003a48 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	f043 0308 	orr.w	r3, r3, #8
 80039e8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	d126      	bne.n	8003a42 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	7a5b      	ldrb	r3, [r3, #9]
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d113      	bne.n	8003a24 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003a02:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a06:	d106      	bne.n	8003a16 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2102      	movs	r1, #2
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 fc10 	bl	8004234 <USB_InitFSLSPClkSel>
 8003a14:	e011      	b.n	8003a3a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 fc09 	bl	8004234 <USB_InitFSLSPClkSel>
 8003a22:	e00a      	b.n	8003a3a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	79db      	ldrb	r3, [r3, #7]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d106      	bne.n	8003a3a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a32:	461a      	mov	r2, r3
 8003a34:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003a38:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f007 f8a0 	bl	800ab80 <HAL_HCD_PortEnabled_Callback>
 8003a40:	e002      	b.n	8003a48 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f007 f8aa 	bl	800ab9c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 0320 	and.w	r3, r3, #32
 8003a4e:	2b20      	cmp	r3, #32
 8003a50:	d103      	bne.n	8003a5a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	f043 0320 	orr.w	r3, r3, #32
 8003a58:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003a60:	461a      	mov	r2, r3
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	6013      	str	r3, [r2, #0]
}
 8003a66:	bf00      	nop
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
	...

08003a70 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d105      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d035      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a98:	4b62      	ldr	r3, [pc, #392]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a9e:	f7fd f93f 	bl	8000d20 <HAL_GetTick>
 8003aa2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003aa6:	f7fd f93b 	bl	8000d20 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e0b0      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ab8:	4b5b      	ldr	r3, [pc, #364]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1f0      	bne.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	019a      	lsls	r2, r3, #6
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	071b      	lsls	r3, r3, #28
 8003ad0:	4955      	ldr	r1, [pc, #340]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ad8:	4b52      	ldr	r3, [pc, #328]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003ada:	2201      	movs	r2, #1
 8003adc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ade:	f7fd f91f 	bl	8000d20 <HAL_GetTick>
 8003ae2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ae6:	f7fd f91b 	bl	8000d20 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e090      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003af8:	4b4b      	ldr	r3, [pc, #300]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0f0      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 8083 	beq.w	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b12:	2300      	movs	r3, #0
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	4b44      	ldr	r3, [pc, #272]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1a:	4a43      	ldr	r2, [pc, #268]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b20:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b22:	4b41      	ldr	r3, [pc, #260]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR.reg |= PWR_CR_DBP;
 8003b2e:	4b3f      	ldr	r3, [pc, #252]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a3e      	ldr	r2, [pc, #248]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b38:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b3a:	f7fd f8f1 	bl	8000d20 <HAL_GetTick>
 8003b3e:	6178      	str	r0, [r7, #20]

    while((PWR->CR.reg & PWR_CR_DBP) == RESET)
 8003b40:	e008      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b42:	f7fd f8ed 	bl	8000d20 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e062      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR.reg & PWR_CR_DBP) == RESET)
 8003b54:	4b35      	ldr	r3, [pc, #212]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0f0      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR.reg & RCC_BDCR_RTCSEL);
 8003b60:	4b31      	ldr	r3, [pc, #196]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b68:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d02f      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d028      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR.reg & ~(RCC_BDCR_RTCSEL));
 8003b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b86:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b88:	4b29      	ldr	r3, [pc, #164]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b8e:	4b28      	ldr	r3, [pc, #160]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR.reg = tmpreg1;
 8003b94:	4a24      	ldr	r2, [pc, #144]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR.reg, RCC_BDCR_LSEON))
 8003b9a:	4b23      	ldr	r3, [pc, #140]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d014      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003ba6:	f7fd f8bb 	bl	8000d20 <HAL_GetTick>
 8003baa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bac:	e00a      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bae:	f7fd f8b7 	bl	8000d20 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e02a      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc4:	4b18      	ldr	r3, [pc, #96]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0ee      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bd8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bdc:	d10d      	bne.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003bde:	4b12      	ldr	r3, [pc, #72]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003bee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bf2:	490d      	ldr	r1, [pc, #52]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	608b      	str	r3, [r1, #8]
 8003bf8:	e005      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c00:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003c04:	6093      	str	r3, [r2, #8]
 8003c06:	4b08      	ldr	r3, [pc, #32]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c08:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c12:	4905      	ldr	r1, [pc, #20]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3718      	adds	r7, #24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	42470068 	.word	0x42470068
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	40007000 	.word	0x40007000
 8003c30:	42470e40 	.word	0x42470e40

08003c34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c34:	b084      	sub	sp, #16
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b084      	sub	sp, #16
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	f107 001c 	add.w	r0, r7, #28
 8003c42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c46:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d123      	bne.n	8003c96 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c52:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003c62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003c76:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d105      	bne.n	8003c8a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f9dc 	bl	8004048 <USB_CoreReset>
 8003c90:	4603      	mov	r3, r0
 8003c92:	73fb      	strb	r3, [r7, #15]
 8003c94:	e01b      	b.n	8003cce <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f9d0 	bl	8004048 <USB_CoreReset>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003cac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d106      	bne.n	8003cc2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	639a      	str	r2, [r3, #56]	@ 0x38
 8003cc0:	e005      	b.n	8003cce <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003cce:	7fbb      	ldrb	r3, [r7, #30]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d10b      	bne.n	8003cec <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f043 0206 	orr.w	r2, r3, #6
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f043 0220 	orr.w	r2, r3, #32
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cf8:	b004      	add	sp, #16
 8003cfa:	4770      	bx	lr

08003cfc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f043 0201 	orr.w	r2, r3, #1
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f023 0201 	bic.w	r2, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003d5c:	78fb      	ldrb	r3, [r7, #3]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d115      	bne.n	8003d8e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003d6e:	200a      	movs	r0, #10
 8003d70:	f7fc ffe2 	bl	8000d38 <HAL_Delay>
      ms += 10U;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	330a      	adds	r3, #10
 8003d78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f956 	bl	800402c <USB_GetMode>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d01e      	beq.n	8003dc4 <USB_SetCurrentMode+0x84>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2bc7      	cmp	r3, #199	@ 0xc7
 8003d8a:	d9f0      	bls.n	8003d6e <USB_SetCurrentMode+0x2e>
 8003d8c:	e01a      	b.n	8003dc4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003d8e:	78fb      	ldrb	r3, [r7, #3]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d115      	bne.n	8003dc0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003da0:	200a      	movs	r0, #10
 8003da2:	f7fc ffc9 	bl	8000d38 <HAL_Delay>
      ms += 10U;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	330a      	adds	r3, #10
 8003daa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 f93d 	bl	800402c <USB_GetMode>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d005      	beq.n	8003dc4 <USB_SetCurrentMode+0x84>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2bc7      	cmp	r3, #199	@ 0xc7
 8003dbc:	d9f0      	bls.n	8003da0 <USB_SetCurrentMode+0x60>
 8003dbe:	e001      	b.n	8003dc4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e005      	b.n	8003dd0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2bc8      	cmp	r3, #200	@ 0xc8
 8003dc8:	d101      	bne.n	8003dce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  volatile uint32_t count = 0U;
 8003de2:	2300      	movs	r3, #0
 8003de4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	3301      	adds	r3, #1
 8003dea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003df2:	d901      	bls.n	8003df8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e01b      	b.n	8003e30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	daf2      	bge.n	8003de6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	019b      	lsls	r3, r3, #6
 8003e08:	f043 0220 	orr.w	r2, r3, #32
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	3301      	adds	r3, #1
 8003e14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003e1c:	d901      	bls.n	8003e22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e006      	b.n	8003e30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	f003 0320 	and.w	r3, r3, #32
 8003e2a:	2b20      	cmp	r3, #32
 8003e2c:	d0f0      	beq.n	8003e10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  volatile uint32_t count = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003e54:	d901      	bls.n	8003e5a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e018      	b.n	8003e8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	daf2      	bge.n	8003e48 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2210      	movs	r2, #16
 8003e6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003e78:	d901      	bls.n	8003e7e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e006      	b.n	8003e8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	f003 0310 	and.w	r3, r3, #16
 8003e86:	2b10      	cmp	r3, #16
 8003e88:	d0f0      	beq.n	8003e6c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b089      	sub	sp, #36	@ 0x24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	4611      	mov	r1, r2
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	71fb      	strb	r3, [r7, #7]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003eb6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d123      	bne.n	8003f06 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003ebe:	88bb      	ldrh	r3, [r7, #4]
 8003ec0:	3303      	adds	r3, #3
 8003ec2:	089b      	lsrs	r3, r3, #2
 8003ec4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61bb      	str	r3, [r7, #24]
 8003eca:	e018      	b.n	8003efe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003ecc:	79fb      	ldrb	r3, [r7, #7]
 8003ece:	031a      	lsls	r2, r3, #12
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ed8:	461a      	mov	r2, r3
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	3301      	adds	r3, #1
 8003efc:	61bb      	str	r3, [r7, #24]
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d3e2      	bcc.n	8003ecc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3724      	adds	r7, #36	@ 0x24
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b08b      	sub	sp, #44	@ 0x2c
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003f2a:	88fb      	ldrh	r3, [r7, #6]
 8003f2c:	089b      	lsrs	r3, r3, #2
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003f32:	88fb      	ldrh	r3, [r7, #6]
 8003f34:	f003 0303 	and.w	r3, r3, #3
 8003f38:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	623b      	str	r3, [r7, #32]
 8003f3e:	e014      	b.n	8003f6a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4a:	601a      	str	r2, [r3, #0]
    pDest++;
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4e:	3301      	adds	r3, #1
 8003f50:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f54:	3301      	adds	r3, #1
 8003f56:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f60:	3301      	adds	r3, #1
 8003f62:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	3301      	adds	r3, #1
 8003f68:	623b      	str	r3, [r7, #32]
 8003f6a:	6a3a      	ldr	r2, [r7, #32]
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d3e6      	bcc.n	8003f40 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003f72:	8bfb      	ldrh	r3, [r7, #30]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d01e      	beq.n	8003fb6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f82:	461a      	mov	r2, r3
 8003f84:	f107 0310 	add.w	r3, r7, #16
 8003f88:	6812      	ldr	r2, [r2, #0]
 8003f8a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	fa22 f303 	lsr.w	r3, r2, r3
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9c:	701a      	strb	r2, [r3, #0]
      i++;
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	623b      	str	r3, [r7, #32]
      pDest++;
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003faa:	8bfb      	ldrh	r3, [r7, #30]
 8003fac:	3b01      	subs	r3, #1
 8003fae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003fb0:	8bfb      	ldrh	r3, [r7, #30]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1ea      	bne.n	8003f8c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	372c      	adds	r7, #44	@ 0x2c
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b085      	sub	sp, #20
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8003ffa:	78fb      	ldrb	r3, [r7, #3]
 8003ffc:	015a      	lsls	r2, r3, #5
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	4413      	add	r3, r2
 8004002:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800400a:	78fb      	ldrb	r3, [r7, #3]
 800400c:	015a      	lsls	r2, r3, #5
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	4413      	add	r3, r2
 8004012:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	4013      	ands	r3, r2
 800401c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800401e:	68bb      	ldr	r3, [r7, #8]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	f003 0301 	and.w	r3, r3, #1
}
 800403c:	4618      	mov	r0, r3
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  volatile uint32_t count = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	3301      	adds	r3, #1
 8004058:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004060:	d901      	bls.n	8004066 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e01b      	b.n	800409e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	2b00      	cmp	r3, #0
 800406c:	daf2      	bge.n	8004054 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800406e:	2300      	movs	r3, #0
 8004070:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	f043 0201 	orr.w	r2, r3, #1
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	3301      	adds	r3, #1
 8004082:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800408a:	d901      	bls.n	8004090 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e006      	b.n	800409e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b01      	cmp	r3, #1
 800409a:	d0f0      	beq.n	800407e <USB_CoreReset+0x36>

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
	...

080040ac <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040ac:	b084      	sub	sp, #16
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b086      	sub	sp, #24
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
 80040b6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80040ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80040be:	2300      	movs	r3, #0
 80040c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80040cc:	461a      	mov	r2, r3
 80040ce:	2300      	movs	r3, #0
 80040d0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ee:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d119      	bne.n	8004136 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004102:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004106:	2b01      	cmp	r3, #1
 8004108:	d10a      	bne.n	8004120 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004118:	f043 0304 	orr.w	r3, r3, #4
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	e014      	b.n	800414a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800412e:	f023 0304 	bic.w	r3, r3, #4
 8004132:	6013      	str	r3, [r2, #0]
 8004134:	e009      	b.n	800414a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004144:	f023 0304 	bic.w	r3, r3, #4
 8004148:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800414a:	2110      	movs	r1, #16
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7ff fe43 	bl	8003dd8 <USB_FlushTxFifo>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f7ff fe6d 	bl	8003e3c <USB_FlushRxFifo>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800416c:	2300      	movs	r3, #0
 800416e:	613b      	str	r3, [r7, #16]
 8004170:	e015      	b.n	800419e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	4413      	add	r3, r2
 800417a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800417e:	461a      	mov	r2, r3
 8004180:	f04f 33ff 	mov.w	r3, #4294967295
 8004184:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	4413      	add	r3, r2
 800418e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004192:	461a      	mov	r2, r3
 8004194:	2300      	movs	r3, #0
 8004196:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	3301      	adds	r3, #1
 800419c:	613b      	str	r3, [r7, #16]
 800419e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80041a2:	461a      	mov	r2, r3
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d3e3      	bcc.n	8004172 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f04f 32ff 	mov.w	r2, #4294967295
 80041b6:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a18      	ldr	r2, [pc, #96]	@ (800421c <USB_HostInit+0x170>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d10b      	bne.n	80041d8 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041c6:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a15      	ldr	r2, [pc, #84]	@ (8004220 <USB_HostInit+0x174>)
 80041cc:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a14      	ldr	r2, [pc, #80]	@ (8004224 <USB_HostInit+0x178>)
 80041d2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80041d6:	e009      	b.n	80041ec <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2280      	movs	r2, #128	@ 0x80
 80041dc:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a11      	ldr	r2, [pc, #68]	@ (8004228 <USB_HostInit+0x17c>)
 80041e2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a11      	ldr	r2, [pc, #68]	@ (800422c <USB_HostInit+0x180>)
 80041e8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80041ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d105      	bne.n	8004200 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	f043 0210 	orr.w	r2, r3, #16
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	699a      	ldr	r2, [r3, #24]
 8004204:	4b0a      	ldr	r3, [pc, #40]	@ (8004230 <USB_HostInit+0x184>)
 8004206:	4313      	orrs	r3, r2
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800420c:	7dfb      	ldrb	r3, [r7, #23]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3718      	adds	r7, #24
 8004212:	46bd      	mov	sp, r7
 8004214:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004218:	b004      	add	sp, #16
 800421a:	4770      	bx	lr
 800421c:	40040000 	.word	0x40040000
 8004220:	01000200 	.word	0x01000200
 8004224:	00e00300 	.word	0x00e00300
 8004228:	00600080 	.word	0x00600080
 800422c:	004000e0 	.word	0x004000e0
 8004230:	a3200008 	.word	0xa3200008

08004234 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	460b      	mov	r3, r1
 800423e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004252:	f023 0303 	bic.w	r3, r3, #3
 8004256:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	78fb      	ldrb	r3, [r7, #3]
 8004262:	f003 0303 	and.w	r3, r3, #3
 8004266:	68f9      	ldr	r1, [r7, #12]
 8004268:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800426c:	4313      	orrs	r3, r2
 800426e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004270:	78fb      	ldrb	r3, [r7, #3]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d107      	bne.n	8004286 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800427c:	461a      	mov	r2, r3
 800427e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004282:	6053      	str	r3, [r2, #4]
 8004284:	e00c      	b.n	80042a0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8004286:	78fb      	ldrb	r3, [r7, #3]
 8004288:	2b02      	cmp	r3, #2
 800428a:	d107      	bne.n	800429c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004292:	461a      	mov	r2, r3
 8004294:	f241 7370 	movw	r3, #6000	@ 0x1770
 8004298:	6053      	str	r3, [r2, #4]
 800429a:	e001      	b.n	80042a0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e000      	b.n	80042a2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b084      	sub	sp, #16
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	60fb      	str	r3, [r7, #12]

  volatile uint32_t hprt0 = 0U;
 80042ba:	2300      	movs	r3, #0
 80042bc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80042ce:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80042d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042dc:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80042de:	2064      	movs	r0, #100	@ 0x64
 80042e0:	f7fc fd2a 	bl	8000d38 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80042ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042f0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80042f2:	200a      	movs	r0, #10
 80042f4:	f7fc fd20 	bl	8000d38 <HAL_Delay>

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004302:	b480      	push	{r7}
 8004304:	b085      	sub	sp, #20
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	460b      	mov	r3, r1
 800430c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	60fb      	str	r3, [r7, #12]
  volatile uint32_t hprt0 = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004326:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d109      	bne.n	8004346 <USB_DriveVbus+0x44>
 8004332:	78fb      	ldrb	r3, [r7, #3]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d106      	bne.n	8004346 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004340:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004344:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800434c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004350:	d109      	bne.n	8004366 <USB_DriveVbus+0x64>
 8004352:	78fb      	ldrb	r3, [r7, #3]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d106      	bne.n	8004366 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004360:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004364:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	60fb      	str	r3, [r7, #12]
  volatile uint32_t hprt0 = 0U;
 8004380:	2300      	movs	r3, #0
 8004382:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	0c5b      	lsrs	r3, r3, #17
 8004392:	f003 0303 	and.w	r3, r3, #3
}
 8004396:	4618      	mov	r0, r3
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b085      	sub	sp, #20
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	b29b      	uxth	r3, r3
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3714      	adds	r7, #20
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b088      	sub	sp, #32
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	4608      	mov	r0, r1
 80043ce:	4611      	mov	r1, r2
 80043d0:	461a      	mov	r2, r3
 80043d2:	4603      	mov	r3, r0
 80043d4:	70fb      	strb	r3, [r7, #3]
 80043d6:	460b      	mov	r3, r1
 80043d8:	70bb      	strb	r3, [r7, #2]
 80043da:	4613      	mov	r3, r2
 80043dc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80043e6:	78fb      	ldrb	r3, [r7, #3]
 80043e8:	015a      	lsls	r2, r3, #5
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	4413      	add	r3, r2
 80043ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043f2:	461a      	mov	r2, r3
 80043f4:	f04f 33ff 	mov.w	r3, #4294967295
 80043f8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80043fa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d87c      	bhi.n	80044fc <USB_HC_Init+0x138>
 8004402:	a201      	add	r2, pc, #4	@ (adr r2, 8004408 <USB_HC_Init+0x44>)
 8004404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004408:	08004419 	.word	0x08004419
 800440c:	080044bf 	.word	0x080044bf
 8004410:	08004419 	.word	0x08004419
 8004414:	08004481 	.word	0x08004481
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004418:	78fb      	ldrb	r3, [r7, #3]
 800441a:	015a      	lsls	r2, r3, #5
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	4413      	add	r3, r2
 8004420:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004424:	461a      	mov	r2, r3
 8004426:	f240 439d 	movw	r3, #1181	@ 0x49d
 800442a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800442c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004430:	2b00      	cmp	r3, #0
 8004432:	da10      	bge.n	8004456 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004434:	78fb      	ldrb	r3, [r7, #3]
 8004436:	015a      	lsls	r2, r3, #5
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	4413      	add	r3, r2
 800443c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	78fa      	ldrb	r2, [r7, #3]
 8004444:	0151      	lsls	r1, r2, #5
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	440a      	add	r2, r1
 800444a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800444e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004452:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8004454:	e055      	b.n	8004502 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a6f      	ldr	r2, [pc, #444]	@ (8004618 <USB_HC_Init+0x254>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d151      	bne.n	8004502 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800445e:	78fb      	ldrb	r3, [r7, #3]
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	4413      	add	r3, r2
 8004466:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	78fa      	ldrb	r2, [r7, #3]
 800446e:	0151      	lsls	r1, r2, #5
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	440a      	add	r2, r1
 8004474:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004478:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800447c:	60d3      	str	r3, [r2, #12]
      break;
 800447e:	e040      	b.n	8004502 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004480:	78fb      	ldrb	r3, [r7, #3]
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	4413      	add	r3, r2
 8004488:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800448c:	461a      	mov	r2, r3
 800448e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8004492:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004494:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004498:	2b00      	cmp	r3, #0
 800449a:	da34      	bge.n	8004506 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800449c:	78fb      	ldrb	r3, [r7, #3]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	78fa      	ldrb	r2, [r7, #3]
 80044ac:	0151      	lsls	r1, r2, #5
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	440a      	add	r2, r1
 80044b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80044b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044ba:	60d3      	str	r3, [r2, #12]
      }

      break;
 80044bc:	e023      	b.n	8004506 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80044be:	78fb      	ldrb	r3, [r7, #3]
 80044c0:	015a      	lsls	r2, r3, #5
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	4413      	add	r3, r2
 80044c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044ca:	461a      	mov	r2, r3
 80044cc:	f240 2325 	movw	r3, #549	@ 0x225
 80044d0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80044d2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	da17      	bge.n	800450a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80044da:	78fb      	ldrb	r3, [r7, #3]
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	78fa      	ldrb	r2, [r7, #3]
 80044ea:	0151      	lsls	r1, r2, #5
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	440a      	add	r2, r1
 80044f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80044f4:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80044f8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80044fa:	e006      	b.n	800450a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	77fb      	strb	r3, [r7, #31]
      break;
 8004500:	e004      	b.n	800450c <USB_HC_Init+0x148>
      break;
 8004502:	bf00      	nop
 8004504:	e002      	b.n	800450c <USB_HC_Init+0x148>
      break;
 8004506:	bf00      	nop
 8004508:	e000      	b.n	800450c <USB_HC_Init+0x148>
      break;
 800450a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800450c:	78fb      	ldrb	r3, [r7, #3]
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	4413      	add	r3, r2
 8004514:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004518:	461a      	mov	r2, r3
 800451a:	2300      	movs	r3, #0
 800451c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800451e:	78fb      	ldrb	r3, [r7, #3]
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	4413      	add	r3, r2
 8004526:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	78fa      	ldrb	r2, [r7, #3]
 800452e:	0151      	lsls	r1, r2, #5
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	440a      	add	r2, r1
 8004534:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004538:	f043 0302 	orr.w	r3, r3, #2
 800453c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004544:	699a      	ldr	r2, [r3, #24]
 8004546:	78fb      	ldrb	r3, [r7, #3]
 8004548:	f003 030f 	and.w	r3, r3, #15
 800454c:	2101      	movs	r1, #1
 800454e:	fa01 f303 	lsl.w	r3, r1, r3
 8004552:	6939      	ldr	r1, [r7, #16]
 8004554:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004558:	4313      	orrs	r3, r2
 800455a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004568:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800456c:	2b00      	cmp	r3, #0
 800456e:	da03      	bge.n	8004578 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004570:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004574:	61bb      	str	r3, [r7, #24]
 8004576:	e001      	b.n	800457c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8004578:	2300      	movs	r3, #0
 800457a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7ff fef9 	bl	8004374 <USB_GetHostSpeed>
 8004582:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004584:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004588:	2b02      	cmp	r3, #2
 800458a:	d106      	bne.n	800459a <USB_HC_Init+0x1d6>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d003      	beq.n	800459a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004592:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	e001      	b.n	800459e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800459e:	787b      	ldrb	r3, [r7, #1]
 80045a0:	059b      	lsls	r3, r3, #22
 80045a2:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80045a6:	78bb      	ldrb	r3, [r7, #2]
 80045a8:	02db      	lsls	r3, r3, #11
 80045aa:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80045ae:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80045b0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80045b4:	049b      	lsls	r3, r3, #18
 80045b6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80045ba:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80045bc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80045be:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80045c2:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	431a      	orrs	r2, r3
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80045cc:	78fa      	ldrb	r2, [r7, #3]
 80045ce:	0151      	lsls	r1, r2, #5
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	440a      	add	r2, r1
 80045d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80045d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80045dc:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80045de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80045e2:	2b03      	cmp	r3, #3
 80045e4:	d003      	beq.n	80045ee <USB_HC_Init+0x22a>
 80045e6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d10f      	bne.n	800460e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80045ee:	78fb      	ldrb	r3, [r7, #3]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	78fa      	ldrb	r2, [r7, #3]
 80045fe:	0151      	lsls	r1, r2, #5
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	440a      	add	r2, r1
 8004604:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004608:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800460c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800460e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3720      	adds	r7, #32
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40040000 	.word	0x40040000

0800461c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b08c      	sub	sp, #48	@ 0x30
 8004620:	af02      	add	r7, sp, #8
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	4613      	mov	r3, r2
 8004628:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	785b      	ldrb	r3, [r3, #1]
 8004632:	61fb      	str	r3, [r7, #28]
  volatile uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8004634:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004638:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	4a5d      	ldr	r2, [pc, #372]	@ (80047b4 <USB_HC_StartXfer+0x198>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d12f      	bne.n	80046a2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8004642:	79fb      	ldrb	r3, [r7, #7]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d11c      	bne.n	8004682 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	7c9b      	ldrb	r3, [r3, #18]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <USB_HC_StartXfer+0x3c>
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	7c9b      	ldrb	r3, [r3, #18]
 8004654:	2b02      	cmp	r3, #2
 8004656:	d124      	bne.n	80046a2 <USB_HC_StartXfer+0x86>
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	799b      	ldrb	r3, [r3, #6]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d120      	bne.n	80046a2 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	4413      	add	r3, r2
 8004668:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	69fa      	ldr	r2, [r7, #28]
 8004670:	0151      	lsls	r1, r2, #5
 8004672:	6a3a      	ldr	r2, [r7, #32]
 8004674:	440a      	add	r2, r1
 8004676:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800467a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800467e:	60d3      	str	r3, [r2, #12]
 8004680:	e00f      	b.n	80046a2 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	791b      	ldrb	r3, [r3, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10b      	bne.n	80046a2 <USB_HC_StartXfer+0x86>
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	795b      	ldrb	r3, [r3, #5]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d107      	bne.n	80046a2 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	785b      	ldrb	r3, [r3, #1]
 8004696:	4619      	mov	r1, r3
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 fb6b 	bl	8004d74 <USB_DoPing>
        return HAL_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	e232      	b.n	8004b08 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	799b      	ldrb	r3, [r3, #6]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d158      	bne.n	800475c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80046aa:	2301      	movs	r3, #1
 80046ac:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	78db      	ldrb	r3, [r3, #3]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d007      	beq.n	80046c6 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80046b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	8a92      	ldrh	r2, [r2, #20]
 80046bc:	fb03 f202 	mul.w	r2, r3, r2
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	61da      	str	r2, [r3, #28]
 80046c4:	e07c      	b.n	80047c0 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	7c9b      	ldrb	r3, [r3, #18]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d130      	bne.n	8004730 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	2bbc      	cmp	r3, #188	@ 0xbc
 80046d4:	d918      	bls.n	8004708 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	8a9b      	ldrh	r3, [r3, #20]
 80046da:	461a      	mov	r2, r3
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	69da      	ldr	r2, [r3, #28]
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d003      	beq.n	80046f8 <USB_HC_StartXfer+0xdc>
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d103      	bne.n	8004700 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2202      	movs	r2, #2
 80046fc:	60da      	str	r2, [r3, #12]
 80046fe:	e05f      	b.n	80047c0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	2201      	movs	r2, #1
 8004704:	60da      	str	r2, [r3, #12]
 8004706:	e05b      	b.n	80047c0 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	6a1a      	ldr	r2, [r3, #32]
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d007      	beq.n	8004728 <USB_HC_StartXfer+0x10c>
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	2b02      	cmp	r3, #2
 800471e:	d003      	beq.n	8004728 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2204      	movs	r2, #4
 8004724:	60da      	str	r2, [r3, #12]
 8004726:	e04b      	b.n	80047c0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	2203      	movs	r2, #3
 800472c:	60da      	str	r2, [r3, #12]
 800472e:	e047      	b.n	80047c0 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8004730:	79fb      	ldrb	r3, [r7, #7]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d10d      	bne.n	8004752 <USB_HC_StartXfer+0x136>
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	8a92      	ldrh	r2, [r2, #20]
 800473e:	4293      	cmp	r3, r2
 8004740:	d907      	bls.n	8004752 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004742:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	8a92      	ldrh	r2, [r2, #20]
 8004748:	fb03 f202 	mul.w	r2, r3, r2
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	61da      	str	r2, [r3, #28]
 8004750:	e036      	b.n	80047c0 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	6a1a      	ldr	r2, [r3, #32]
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	61da      	str	r2, [r3, #28]
 800475a:	e031      	b.n	80047c0 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d018      	beq.n	8004796 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	8a92      	ldrh	r2, [r2, #20]
 800476c:	4413      	add	r3, r2
 800476e:	3b01      	subs	r3, #1
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	8a92      	ldrh	r2, [r2, #20]
 8004774:	fbb3 f3f2 	udiv	r3, r3, r2
 8004778:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800477a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800477c:	8b7b      	ldrh	r3, [r7, #26]
 800477e:	429a      	cmp	r2, r3
 8004780:	d90b      	bls.n	800479a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8004782:	8b7b      	ldrh	r3, [r7, #26]
 8004784:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004786:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	8a92      	ldrh	r2, [r2, #20]
 800478c:	fb03 f202 	mul.w	r2, r3, r2
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	61da      	str	r2, [r3, #28]
 8004794:	e001      	b.n	800479a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8004796:	2301      	movs	r3, #1
 8004798:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	78db      	ldrb	r3, [r3, #3]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00a      	beq.n	80047b8 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80047a2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	8a92      	ldrh	r2, [r2, #20]
 80047a8:	fb03 f202 	mul.w	r2, r3, r2
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	61da      	str	r2, [r3, #28]
 80047b0:	e006      	b.n	80047c0 <USB_HC_StartXfer+0x1a4>
 80047b2:	bf00      	nop
 80047b4:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	6a1a      	ldr	r2, [r3, #32]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	69db      	ldr	r3, [r3, #28]
 80047c4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80047c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80047ca:	04d9      	lsls	r1, r3, #19
 80047cc:	4ba3      	ldr	r3, [pc, #652]	@ (8004a5c <USB_HC_StartXfer+0x440>)
 80047ce:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80047d0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	7d9b      	ldrb	r3, [r3, #22]
 80047d6:	075b      	lsls	r3, r3, #29
 80047d8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80047dc:	69f9      	ldr	r1, [r7, #28]
 80047de:	0148      	lsls	r0, r1, #5
 80047e0:	6a39      	ldr	r1, [r7, #32]
 80047e2:	4401      	add	r1, r0
 80047e4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80047e8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80047ea:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80047ec:	79fb      	ldrb	r3, [r7, #7]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d009      	beq.n	8004806 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	6999      	ldr	r1, [r3, #24]
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	6a3b      	ldr	r3, [r7, #32]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004802:	460a      	mov	r2, r1
 8004804:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004806:	6a3b      	ldr	r3, [r7, #32]
 8004808:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	bf0c      	ite	eq
 8004816:	2301      	moveq	r3, #1
 8004818:	2300      	movne	r3, #0
 800481a:	b2db      	uxtb	r3, r3
 800481c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	015a      	lsls	r2, r3, #5
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	4413      	add	r3, r2
 8004826:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	69fa      	ldr	r2, [r7, #28]
 800482e:	0151      	lsls	r1, r2, #5
 8004830:	6a3a      	ldr	r2, [r7, #32]
 8004832:	440a      	add	r2, r1
 8004834:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004838:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800483c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	6a3b      	ldr	r3, [r7, #32]
 8004844:	4413      	add	r3, r2
 8004846:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	7e7b      	ldrb	r3, [r7, #25]
 800484e:	075b      	lsls	r3, r3, #29
 8004850:	69f9      	ldr	r1, [r7, #28]
 8004852:	0148      	lsls	r0, r1, #5
 8004854:	6a39      	ldr	r1, [r7, #32]
 8004856:	4401      	add	r1, r0
 8004858:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800485c:	4313      	orrs	r3, r2
 800485e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	799b      	ldrb	r3, [r3, #6]
 8004864:	2b01      	cmp	r3, #1
 8004866:	f040 80c3 	bne.w	80049f0 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	7c5b      	ldrb	r3, [r3, #17]
 800486e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8004874:	4313      	orrs	r3, r2
 8004876:	69fa      	ldr	r2, [r7, #28]
 8004878:	0151      	lsls	r1, r2, #5
 800487a:	6a3a      	ldr	r2, [r7, #32]
 800487c:	440a      	add	r2, r1
 800487e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8004882:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8004886:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	4413      	add	r3, r2
 8004890:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	69fa      	ldr	r2, [r7, #28]
 8004898:	0151      	lsls	r1, r2, #5
 800489a:	6a3a      	ldr	r2, [r7, #32]
 800489c:	440a      	add	r2, r1
 800489e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80048a2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80048a6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	79db      	ldrb	r3, [r3, #7]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d123      	bne.n	80048f8 <USB_HC_StartXfer+0x2dc>
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	78db      	ldrb	r3, [r3, #3]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d11f      	bne.n	80048f8 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	6a3b      	ldr	r3, [r7, #32]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	69fa      	ldr	r2, [r7, #28]
 80048c8:	0151      	lsls	r1, r2, #5
 80048ca:	6a3a      	ldr	r2, [r7, #32]
 80048cc:	440a      	add	r2, r1
 80048ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80048d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048d6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	69fa      	ldr	r2, [r7, #28]
 80048e8:	0151      	lsls	r1, r2, #5
 80048ea:	6a3a      	ldr	r2, [r7, #32]
 80048ec:	440a      	add	r2, r1
 80048ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80048f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048f6:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	7c9b      	ldrb	r3, [r3, #18]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d003      	beq.n	8004908 <USB_HC_StartXfer+0x2ec>
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	7c9b      	ldrb	r3, [r3, #18]
 8004904:	2b03      	cmp	r3, #3
 8004906:	d117      	bne.n	8004938 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800490c:	2b01      	cmp	r3, #1
 800490e:	d113      	bne.n	8004938 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	78db      	ldrb	r3, [r3, #3]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d10f      	bne.n	8004938 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	4413      	add	r3, r2
 8004920:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	69fa      	ldr	r2, [r7, #28]
 8004928:	0151      	lsls	r1, r2, #5
 800492a:	6a3a      	ldr	r2, [r7, #32]
 800492c:	440a      	add	r2, r1
 800492e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004932:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004936:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	7c9b      	ldrb	r3, [r3, #18]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d162      	bne.n	8004a06 <USB_HC_StartXfer+0x3ea>
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	78db      	ldrb	r3, [r3, #3]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d15e      	bne.n	8004a06 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	3b01      	subs	r3, #1
 800494e:	2b03      	cmp	r3, #3
 8004950:	d858      	bhi.n	8004a04 <USB_HC_StartXfer+0x3e8>
 8004952:	a201      	add	r2, pc, #4	@ (adr r2, 8004958 <USB_HC_StartXfer+0x33c>)
 8004954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004958:	08004969 	.word	0x08004969
 800495c:	0800498b 	.word	0x0800498b
 8004960:	080049ad 	.word	0x080049ad
 8004964:	080049cf 	.word	0x080049cf
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	4413      	add	r3, r2
 8004970:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	69fa      	ldr	r2, [r7, #28]
 8004978:	0151      	lsls	r1, r2, #5
 800497a:	6a3a      	ldr	r2, [r7, #32]
 800497c:	440a      	add	r2, r1
 800497e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004982:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004986:	6053      	str	r3, [r2, #4]
          break;
 8004988:	e03d      	b.n	8004a06 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	6a3b      	ldr	r3, [r7, #32]
 8004990:	4413      	add	r3, r2
 8004992:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	69fa      	ldr	r2, [r7, #28]
 800499a:	0151      	lsls	r1, r2, #5
 800499c:	6a3a      	ldr	r2, [r7, #32]
 800499e:	440a      	add	r2, r1
 80049a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80049a4:	f043 030e 	orr.w	r3, r3, #14
 80049a8:	6053      	str	r3, [r2, #4]
          break;
 80049aa:	e02c      	b.n	8004a06 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	015a      	lsls	r2, r3, #5
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	4413      	add	r3, r2
 80049b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	69fa      	ldr	r2, [r7, #28]
 80049bc:	0151      	lsls	r1, r2, #5
 80049be:	6a3a      	ldr	r2, [r7, #32]
 80049c0:	440a      	add	r2, r1
 80049c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80049c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80049ca:	6053      	str	r3, [r2, #4]
          break;
 80049cc:	e01b      	b.n	8004a06 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	015a      	lsls	r2, r3, #5
 80049d2:	6a3b      	ldr	r3, [r7, #32]
 80049d4:	4413      	add	r3, r2
 80049d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	69fa      	ldr	r2, [r7, #28]
 80049de:	0151      	lsls	r1, r2, #5
 80049e0:	6a3a      	ldr	r2, [r7, #32]
 80049e2:	440a      	add	r2, r1
 80049e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80049e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049ec:	6053      	str	r3, [r2, #4]
          break;
 80049ee:	e00a      	b.n	8004a06 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049fc:	461a      	mov	r2, r3
 80049fe:	2300      	movs	r3, #0
 8004a00:	6053      	str	r3, [r2, #4]
 8004a02:	e000      	b.n	8004a06 <USB_HC_StartXfer+0x3ea>
          break;
 8004a04:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	015a      	lsls	r2, r3, #5
 8004a0a:	6a3b      	ldr	r3, [r7, #32]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004a1c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	78db      	ldrb	r3, [r3, #3]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d004      	beq.n	8004a30 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a2c:	613b      	str	r3, [r7, #16]
 8004a2e:	e003      	b.n	8004a38 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004a36:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004a3e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	6a3b      	ldr	r3, [r7, #32]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8004a52:	79fb      	ldrb	r3, [r7, #7]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d003      	beq.n	8004a60 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	e055      	b.n	8004b08 <USB_HC_StartXfer+0x4ec>
 8004a5c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	78db      	ldrb	r3, [r3, #3]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d14e      	bne.n	8004b06 <USB_HC_StartXfer+0x4ea>
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d04a      	beq.n	8004b06 <USB_HC_StartXfer+0x4ea>
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	79db      	ldrb	r3, [r3, #7]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d146      	bne.n	8004b06 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	7c9b      	ldrb	r3, [r3, #18]
 8004a7c:	2b03      	cmp	r3, #3
 8004a7e:	d831      	bhi.n	8004ae4 <USB_HC_StartXfer+0x4c8>
 8004a80:	a201      	add	r2, pc, #4	@ (adr r2, 8004a88 <USB_HC_StartXfer+0x46c>)
 8004a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a86:	bf00      	nop
 8004a88:	08004a99 	.word	0x08004a99
 8004a8c:	08004abd 	.word	0x08004abd
 8004a90:	08004a99 	.word	0x08004a99
 8004a94:	08004abd 	.word	0x08004abd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	3303      	adds	r3, #3
 8004a9e:	089b      	lsrs	r3, r3, #2
 8004aa0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004aa2:	8afa      	ldrh	r2, [r7, #22]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d91c      	bls.n	8004ae8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	f043 0220 	orr.w	r2, r3, #32
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	619a      	str	r2, [r3, #24]
        }
        break;
 8004aba:	e015      	b.n	8004ae8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
 8004ac0:	3303      	adds	r3, #3
 8004ac2:	089b      	lsrs	r3, r3, #2
 8004ac4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004ac6:	8afa      	ldrh	r2, [r7, #22]
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d90a      	bls.n	8004aec <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	619a      	str	r2, [r3, #24]
        }
        break;
 8004ae2:	e003      	b.n	8004aec <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8004ae4:	bf00      	nop
 8004ae6:	e002      	b.n	8004aee <USB_HC_StartXfer+0x4d2>
        break;
 8004ae8:	bf00      	nop
 8004aea:	e000      	b.n	8004aee <USB_HC_StartXfer+0x4d2>
        break;
 8004aec:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	6999      	ldr	r1, [r3, #24]
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	785a      	ldrb	r2, [r3, #1]
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	2000      	movs	r0, #0
 8004afe:	9000      	str	r0, [sp, #0]
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f7ff f9c9 	bl	8003e98 <USB_WritePacket>
  }

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3728      	adds	r7, #40	@ 0x28
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	b29b      	uxth	r3, r3
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b089      	sub	sp, #36	@ 0x24
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8004b42:	78fb      	ldrb	r3, [r7, #3]
 8004b44:	61bb      	str	r3, [r7, #24]
  volatile uint32_t count = 0U;
 8004b46:	2300      	movs	r3, #0
 8004b48:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	015a      	lsls	r2, r3, #5
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	4413      	add	r3, r2
 8004b52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	0c9b      	lsrs	r3, r3, #18
 8004b5a:	f003 0303 	and.w	r3, r3, #3
 8004b5e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	0fdb      	lsrs	r3, r3, #31
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	0fdb      	lsrs	r3, r3, #31
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f003 0320 	and.w	r3, r3, #32
 8004b94:	2b20      	cmp	r3, #32
 8004b96:	d10d      	bne.n	8004bb4 <USB_HC_Halt+0x82>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10a      	bne.n	8004bb4 <USB_HC_Halt+0x82>
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d005      	beq.n	8004bb0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d002      	beq.n	8004bb0 <USB_HC_Halt+0x7e>
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2b03      	cmp	r3, #3
 8004bae:	d101      	bne.n	8004bb4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	e0d8      	b.n	8004d66 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d002      	beq.n	8004bc0 <USB_HC_Halt+0x8e>
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d173      	bne.n	8004ca8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	015a      	lsls	r2, r3, #5
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69ba      	ldr	r2, [r7, #24]
 8004bd0:	0151      	lsls	r1, r2, #5
 8004bd2:	69fa      	ldr	r2, [r7, #28]
 8004bd4:	440a      	add	r2, r1
 8004bd6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004bda:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004bde:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f003 0320 	and.w	r3, r3, #32
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d14a      	bne.n	8004c82 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d133      	bne.n	8004c60 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	0151      	lsls	r1, r2, #5
 8004c0a:	69fa      	ldr	r2, [r7, #28]
 8004c0c:	440a      	add	r2, r1
 8004c0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c12:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c16:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	0151      	lsls	r1, r2, #5
 8004c2a:	69fa      	ldr	r2, [r7, #28]
 8004c2c:	440a      	add	r2, r1
 8004c2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004c36:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004c44:	d82e      	bhi.n	8004ca4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c5c:	d0ec      	beq.n	8004c38 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004c5e:	e081      	b.n	8004d64 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	0151      	lsls	r1, r2, #5
 8004c72:	69fa      	ldr	r2, [r7, #28]
 8004c74:	440a      	add	r2, r1
 8004c76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004c7e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004c80:	e070      	b.n	8004d64 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	0151      	lsls	r1, r2, #5
 8004c94:	69fa      	ldr	r2, [r7, #28]
 8004c96:	440a      	add	r2, r1
 8004c98:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c9c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ca0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004ca2:	e05f      	b.n	8004d64 <USB_HC_Halt+0x232>
            break;
 8004ca4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004ca6:	e05d      	b.n	8004d64 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	0151      	lsls	r1, r2, #5
 8004cba:	69fa      	ldr	r2, [r7, #28]
 8004cbc:	440a      	add	r2, r1
 8004cbe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004cc2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004cc6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d133      	bne.n	8004d40 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	015a      	lsls	r2, r3, #5
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	0151      	lsls	r1, r2, #5
 8004cea:	69fa      	ldr	r2, [r7, #28]
 8004cec:	440a      	add	r2, r1
 8004cee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004cf2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004cf6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	015a      	lsls	r2, r3, #5
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	0151      	lsls	r1, r2, #5
 8004d0a:	69fa      	ldr	r2, [r7, #28]
 8004d0c:	440a      	add	r2, r1
 8004d0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004d16:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004d24:	d81d      	bhi.n	8004d62 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d3c:	d0ec      	beq.n	8004d18 <USB_HC_Halt+0x1e6>
 8004d3e:	e011      	b.n	8004d64 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	0151      	lsls	r1, r2, #5
 8004d52:	69fa      	ldr	r2, [r7, #28]
 8004d54:	440a      	add	r2, r1
 8004d56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004d5e:	6013      	str	r3, [r2, #0]
 8004d60:	e000      	b.n	8004d64 <USB_HC_Halt+0x232>
          break;
 8004d62:	bf00      	nop
    }
  }

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3724      	adds	r7, #36	@ 0x24
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
	...

08004d74 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b087      	sub	sp, #28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004d84:	78fb      	ldrb	r3, [r7, #3]
 8004d86:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	04da      	lsls	r2, r3, #19
 8004d90:	4b15      	ldr	r3, [pc, #84]	@ (8004de8 <USB_DoPing+0x74>)
 8004d92:	4013      	ands	r3, r2
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	0151      	lsls	r1, r2, #5
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	440a      	add	r2, r1
 8004d9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004da0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004da4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004dbc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004dc4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	371c      	adds	r7, #28
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	1ff80000 	.word	0x1ff80000

08004dec <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b088      	sub	sp, #32
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004df4:	2300      	movs	r3, #0
 8004df6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	617b      	str	r3, [r7, #20]
  volatile uint32_t count = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7fe ff8c 	bl	8003d1e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e06:	2110      	movs	r1, #16
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f7fe ffe5 	bl	8003dd8 <USB_FlushTxFifo>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d001      	beq.n	8004e18 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f7ff f80f 	bl	8003e3c <USB_FlushRxFifo>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d001      	beq.n	8004e28 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004e28:	2300      	movs	r3, #0
 8004e2a:	61bb      	str	r3, [r7, #24]
 8004e2c:	e01f      	b.n	8004e6e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	015a      	lsls	r2, r3, #5
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	4413      	add	r3, r2
 8004e36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e44:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004e4c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004e54:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e62:	461a      	mov	r2, r3
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	61bb      	str	r3, [r7, #24]
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	2b0f      	cmp	r3, #15
 8004e72:	d9dc      	bls.n	8004e2e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004e74:	2300      	movs	r3, #0
 8004e76:	61bb      	str	r3, [r7, #24]
 8004e78:	e034      	b.n	8004ee4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e90:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004e98:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004ea0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	015a      	lsls	r2, r3, #5
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004eae:	461a      	mov	r2, r3
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ec0:	d80c      	bhi.n	8004edc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	015a      	lsls	r2, r3, #5
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	4413      	add	r3, r2
 8004eca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ed4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ed8:	d0ec      	beq.n	8004eb4 <USB_StopHost+0xc8>
 8004eda:	e000      	b.n	8004ede <USB_StopHost+0xf2>
        break;
 8004edc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	61bb      	str	r3, [r7, #24]
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	2b0f      	cmp	r3, #15
 8004ee8:	d9c7      	bls.n	8004e7a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f04f 32ff 	mov.w	r2, #4294967295
 8004efe:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7fe fefb 	bl	8003cfc <USB_EnableGlobalInt>

  return ret;
 8004f06:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3720      	adds	r7, #32
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <GPIO_PeriphClockControl>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void GPIO_PeriphClockControl(GPIO_RegDef_t *pGPIOx, uint8_t state)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	460b      	mov	r3, r1
 8004f1a:	70fb      	strb	r3, [r7, #3]
		if(pGPIOx == GPIOA)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a41      	ldr	r2, [pc, #260]	@ (8005024 <GPIO_PeriphClockControl+0x114>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d109      	bne.n	8004f38 <GPIO_PeriphClockControl+0x28>
		{
			RCC->AHB1ENR.bit.gpioaen = state;
 8004f24:	4a40      	ldr	r2, [pc, #256]	@ (8005028 <GPIO_PeriphClockControl+0x118>)
 8004f26:	78fb      	ldrb	r3, [r7, #3]
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	b2d9      	uxtb	r1, r3
 8004f2e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004f30:	f361 0300 	bfi	r3, r1, #0, #1
 8004f34:	6313      	str	r3, [r2, #48]	@ 0x30
			RCC->AHB1ENR.bit.gpiohen = state;
		}else if(pGPIOx == GPIOI)
		{
			RCC->AHB1ENR.bit.gpioien = state;
		}
}
 8004f36:	e06e      	b.n	8005016 <GPIO_PeriphClockControl+0x106>
		}else if(pGPIOx == GPIOB)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a3c      	ldr	r2, [pc, #240]	@ (800502c <GPIO_PeriphClockControl+0x11c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d109      	bne.n	8004f54 <GPIO_PeriphClockControl+0x44>
			RCC->AHB1ENR.bit.gpioben = state;
 8004f40:	4a39      	ldr	r2, [pc, #228]	@ (8005028 <GPIO_PeriphClockControl+0x118>)
 8004f42:	78fb      	ldrb	r3, [r7, #3]
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	b2d9      	uxtb	r1, r3
 8004f4a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004f4c:	f361 0341 	bfi	r3, r1, #1, #1
 8004f50:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8004f52:	e060      	b.n	8005016 <GPIO_PeriphClockControl+0x106>
		}else if(pGPIOx == GPIOC)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a36      	ldr	r2, [pc, #216]	@ (8005030 <GPIO_PeriphClockControl+0x120>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d109      	bne.n	8004f70 <GPIO_PeriphClockControl+0x60>
			RCC->AHB1ENR.bit.gpiocen = state;
 8004f5c:	4a32      	ldr	r2, [pc, #200]	@ (8005028 <GPIO_PeriphClockControl+0x118>)
 8004f5e:	78fb      	ldrb	r3, [r7, #3]
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	b2d9      	uxtb	r1, r3
 8004f66:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004f68:	f361 0382 	bfi	r3, r1, #2, #1
 8004f6c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8004f6e:	e052      	b.n	8005016 <GPIO_PeriphClockControl+0x106>
		}else if(pGPIOx == GPIOD)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a30      	ldr	r2, [pc, #192]	@ (8005034 <GPIO_PeriphClockControl+0x124>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d109      	bne.n	8004f8c <GPIO_PeriphClockControl+0x7c>
			RCC->AHB1ENR.bit.gpioden = state;
 8004f78:	4a2b      	ldr	r2, [pc, #172]	@ (8005028 <GPIO_PeriphClockControl+0x118>)
 8004f7a:	78fb      	ldrb	r3, [r7, #3]
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	b2d9      	uxtb	r1, r3
 8004f82:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004f84:	f361 03c3 	bfi	r3, r1, #3, #1
 8004f88:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8004f8a:	e044      	b.n	8005016 <GPIO_PeriphClockControl+0x106>
		}else if(pGPIOx == GPIOE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a2a      	ldr	r2, [pc, #168]	@ (8005038 <GPIO_PeriphClockControl+0x128>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d109      	bne.n	8004fa8 <GPIO_PeriphClockControl+0x98>
			RCC->AHB1ENR.bit.gpioeen = state;
 8004f94:	4a24      	ldr	r2, [pc, #144]	@ (8005028 <GPIO_PeriphClockControl+0x118>)
 8004f96:	78fb      	ldrb	r3, [r7, #3]
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	b2d9      	uxtb	r1, r3
 8004f9e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004fa0:	f361 1304 	bfi	r3, r1, #4, #1
 8004fa4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8004fa6:	e036      	b.n	8005016 <GPIO_PeriphClockControl+0x106>
		}else if(pGPIOx == GPIOF)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a24      	ldr	r2, [pc, #144]	@ (800503c <GPIO_PeriphClockControl+0x12c>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d109      	bne.n	8004fc4 <GPIO_PeriphClockControl+0xb4>
			RCC->AHB1ENR.bit.gpiofen = state;
 8004fb0:	4a1d      	ldr	r2, [pc, #116]	@ (8005028 <GPIO_PeriphClockControl+0x118>)
 8004fb2:	78fb      	ldrb	r3, [r7, #3]
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	b2d9      	uxtb	r1, r3
 8004fba:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004fbc:	f361 1345 	bfi	r3, r1, #5, #1
 8004fc0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8004fc2:	e028      	b.n	8005016 <GPIO_PeriphClockControl+0x106>
		}else if(pGPIOx == GPIOG)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a1e      	ldr	r2, [pc, #120]	@ (8005040 <GPIO_PeriphClockControl+0x130>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d109      	bne.n	8004fe0 <GPIO_PeriphClockControl+0xd0>
			RCC->AHB1ENR.bit.gpiogen = state;
 8004fcc:	4a16      	ldr	r2, [pc, #88]	@ (8005028 <GPIO_PeriphClockControl+0x118>)
 8004fce:	78fb      	ldrb	r3, [r7, #3]
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	b2d9      	uxtb	r1, r3
 8004fd6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004fd8:	f361 1386 	bfi	r3, r1, #6, #1
 8004fdc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8004fde:	e01a      	b.n	8005016 <GPIO_PeriphClockControl+0x106>
		}else if(pGPIOx == GPIOH)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a18      	ldr	r2, [pc, #96]	@ (8005044 <GPIO_PeriphClockControl+0x134>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d109      	bne.n	8004ffc <GPIO_PeriphClockControl+0xec>
			RCC->AHB1ENR.bit.gpiohen = state;
 8004fe8:	4a0f      	ldr	r2, [pc, #60]	@ (8005028 <GPIO_PeriphClockControl+0x118>)
 8004fea:	78fb      	ldrb	r3, [r7, #3]
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	b2d9      	uxtb	r1, r3
 8004ff2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004ff4:	f361 13c7 	bfi	r3, r1, #7, #1
 8004ff8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8004ffa:	e00c      	b.n	8005016 <GPIO_PeriphClockControl+0x106>
		}else if(pGPIOx == GPIOI)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a12      	ldr	r2, [pc, #72]	@ (8005048 <GPIO_PeriphClockControl+0x138>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d108      	bne.n	8005016 <GPIO_PeriphClockControl+0x106>
			RCC->AHB1ENR.bit.gpioien = state;
 8005004:	4a08      	ldr	r2, [pc, #32]	@ (8005028 <GPIO_PeriphClockControl+0x118>)
 8005006:	78fb      	ldrb	r3, [r7, #3]
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	b2d9      	uxtb	r1, r3
 800500e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005010:	f361 2308 	bfi	r3, r1, #8, #1
 8005014:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8005016:	bf00      	nop
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	40020000 	.word	0x40020000
 8005028:	40023800 	.word	0x40023800
 800502c:	40020400 	.word	0x40020400
 8005030:	40020800 	.word	0x40020800
 8005034:	40020c00 	.word	0x40020c00
 8005038:	40021000 	.word	0x40021000
 800503c:	40021400 	.word	0x40021400
 8005040:	40021800 	.word	0x40021800
 8005044:	40021c00 	.word	0x40021c00
 8005048:	40022000 	.word	0x40022000

0800504c <GPIO_Init>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;		//temporary register var
 8005054:	2300      	movs	r3, #0
 8005056:	617b      	str	r3, [r7, #20]

	//enable peripheral clock
	GPIO_PeriphClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2101      	movs	r1, #1
 800505e:	4618      	mov	r0, r3
 8005060:	f7ff ff56 	bl	8004f10 <GPIO_PeriphClockControl>

	if(pGPIOHandle->GPIO_Config.PinMode <= GPIO_MODE_ANALOG)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	7a1b      	ldrb	r3, [r3, #8]
 8005068:	2b03      	cmp	r3, #3
 800506a:	d81f      	bhi.n	80050ac <GPIO_Init+0x60>
	{
		temp = pGPIOHandle->GPIO_Config.PinMode << (2 * pGPIOHandle->GPIO_Config.PinNumber); /*< shift to left by 2 bits because
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	7a1b      	ldrb	r3, [r3, #8]
 8005070:	461a      	mov	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	005b      	lsls	r3, r3, #1
 8005078:	fa02 f303 	lsl.w	r3, r2, r3
 800507c:	617b      	str	r3, [r7, #20]
																							 each pin in MODER is two bits >*/
		pGPIOHandle->pGPIOx->MODER.reg &= ~(0x3 << pGPIOHandle->GPIO_Config.PinNumber);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	2103      	movs	r1, #3
 800508a:	fa01 f303 	lsl.w	r3, r1, r3
 800508e:	43db      	mvns	r3, r3
 8005090:	4619      	mov	r1, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	400a      	ands	r2, r1
 8005098:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER.reg |= temp;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6819      	ldr	r1, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	601a      	str	r2, [r3, #0]
 80050aa:	e113      	b.n	80052d4 <GPIO_Init+0x288>
	}else
	{
		//interrupt mode
		if(GPIO_MODE_IT_FT == pGPIOHandle->GPIO_Config.PinMode)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	7a1b      	ldrb	r3, [r3, #8]
 80050b0:	2b06      	cmp	r3, #6
 80050b2:	d117      	bne.n	80050e4 <GPIO_Init+0x98>
		{
			//configure FTSR
			EXTI->FTSR.reg |= (1 << pGPIOHandle->GPIO_Config.PinNumber);	 	//set bit in FTSR
 80050b4:	4b6c      	ldr	r3, [pc, #432]	@ (8005268 <GPIO_Init+0x21c>)
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	6852      	ldr	r2, [r2, #4]
 80050bc:	2101      	movs	r1, #1
 80050be:	fa01 f202 	lsl.w	r2, r1, r2
 80050c2:	4611      	mov	r1, r2
 80050c4:	4a68      	ldr	r2, [pc, #416]	@ (8005268 <GPIO_Init+0x21c>)
 80050c6:	430b      	orrs	r3, r1
 80050c8:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR.reg &= ~(1 << pGPIOHandle->GPIO_Config.PinNumber); 	//clear bit in RTSR just in case it is not reset
 80050ca:	4b67      	ldr	r3, [pc, #412]	@ (8005268 <GPIO_Init+0x21c>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	6852      	ldr	r2, [r2, #4]
 80050d2:	2101      	movs	r1, #1
 80050d4:	fa01 f202 	lsl.w	r2, r1, r2
 80050d8:	43d2      	mvns	r2, r2
 80050da:	4611      	mov	r1, r2
 80050dc:	4a62      	ldr	r2, [pc, #392]	@ (8005268 <GPIO_Init+0x21c>)
 80050de:	400b      	ands	r3, r1
 80050e0:	6093      	str	r3, [r2, #8]
 80050e2:	e035      	b.n	8005150 <GPIO_Init+0x104>
		}else if(GPIO_MODE_IT_RT == pGPIOHandle->GPIO_Config.PinMode)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	7a1b      	ldrb	r3, [r3, #8]
 80050e8:	2b05      	cmp	r3, #5
 80050ea:	d117      	bne.n	800511c <GPIO_Init+0xd0>
		{
			//configure RTSR
			EXTI->RTSR.reg |= (1 << pGPIOHandle->GPIO_Config.PinNumber);	 	//set bit in RTSR
 80050ec:	4b5e      	ldr	r3, [pc, #376]	@ (8005268 <GPIO_Init+0x21c>)
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	6852      	ldr	r2, [r2, #4]
 80050f4:	2101      	movs	r1, #1
 80050f6:	fa01 f202 	lsl.w	r2, r1, r2
 80050fa:	4611      	mov	r1, r2
 80050fc:	4a5a      	ldr	r2, [pc, #360]	@ (8005268 <GPIO_Init+0x21c>)
 80050fe:	430b      	orrs	r3, r1
 8005100:	6093      	str	r3, [r2, #8]
			EXTI->FTSR.reg &= ~(1 << pGPIOHandle->GPIO_Config.PinNumber); 	//clear bit in FTSR just in case it is not reset
 8005102:	4b59      	ldr	r3, [pc, #356]	@ (8005268 <GPIO_Init+0x21c>)
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	6852      	ldr	r2, [r2, #4]
 800510a:	2101      	movs	r1, #1
 800510c:	fa01 f202 	lsl.w	r2, r1, r2
 8005110:	43d2      	mvns	r2, r2
 8005112:	4611      	mov	r1, r2
 8005114:	4a54      	ldr	r2, [pc, #336]	@ (8005268 <GPIO_Init+0x21c>)
 8005116:	400b      	ands	r3, r1
 8005118:	60d3      	str	r3, [r2, #12]
 800511a:	e019      	b.n	8005150 <GPIO_Init+0x104>
		}else if (GPIO_MODE_IT_RFT == pGPIOHandle->GPIO_Config.PinMode)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	7a1b      	ldrb	r3, [r3, #8]
 8005120:	2b07      	cmp	r3, #7
 8005122:	d115      	bne.n	8005150 <GPIO_Init+0x104>
		{
			//configure both FTSR and RTSR registers
			EXTI->RTSR.reg |= (1 << pGPIOHandle->GPIO_Config.PinNumber);	 	//set bit in RTSR
 8005124:	4b50      	ldr	r3, [pc, #320]	@ (8005268 <GPIO_Init+0x21c>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	6852      	ldr	r2, [r2, #4]
 800512c:	2101      	movs	r1, #1
 800512e:	fa01 f202 	lsl.w	r2, r1, r2
 8005132:	4611      	mov	r1, r2
 8005134:	4a4c      	ldr	r2, [pc, #304]	@ (8005268 <GPIO_Init+0x21c>)
 8005136:	430b      	orrs	r3, r1
 8005138:	6093      	str	r3, [r2, #8]
			EXTI->FTSR.reg |= (1 << pGPIOHandle->GPIO_Config.PinNumber); 	//set bit in FTSR
 800513a:	4b4b      	ldr	r3, [pc, #300]	@ (8005268 <GPIO_Init+0x21c>)
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	6852      	ldr	r2, [r2, #4]
 8005142:	2101      	movs	r1, #1
 8005144:	fa01 f202 	lsl.w	r2, r1, r2
 8005148:	4611      	mov	r1, r2
 800514a:	4a47      	ldr	r2, [pc, #284]	@ (8005268 <GPIO_Init+0x21c>)
 800514c:	430b      	orrs	r3, r1
 800514e:	60d3      	str	r3, [r2, #12]
		}

		uint8_t temp1 = pGPIOHandle->GPIO_Config.PinNumber / 4;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	089b      	lsrs	r3, r3, #2
 8005156:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_Config.PinNumber % 4;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	b2db      	uxtb	r3, r3
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	74bb      	strb	r3, [r7, #18]

		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a40      	ldr	r2, [pc, #256]	@ (800526c <GPIO_Init+0x220>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d02b      	beq.n	80051c6 <GPIO_Init+0x17a>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a3f      	ldr	r2, [pc, #252]	@ (8005270 <GPIO_Init+0x224>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d024      	beq.n	80051c2 <GPIO_Init+0x176>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a3d      	ldr	r2, [pc, #244]	@ (8005274 <GPIO_Init+0x228>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d01d      	beq.n	80051be <GPIO_Init+0x172>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a3c      	ldr	r2, [pc, #240]	@ (8005278 <GPIO_Init+0x22c>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d016      	beq.n	80051ba <GPIO_Init+0x16e>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a3a      	ldr	r2, [pc, #232]	@ (800527c <GPIO_Init+0x230>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00f      	beq.n	80051b6 <GPIO_Init+0x16a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a39      	ldr	r2, [pc, #228]	@ (8005280 <GPIO_Init+0x234>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d008      	beq.n	80051b2 <GPIO_Init+0x166>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a37      	ldr	r2, [pc, #220]	@ (8005284 <GPIO_Init+0x238>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d101      	bne.n	80051ae <GPIO_Init+0x162>
 80051aa:	2308      	movs	r3, #8
 80051ac:	e00c      	b.n	80051c8 <GPIO_Init+0x17c>
 80051ae:	2300      	movs	r3, #0
 80051b0:	e00a      	b.n	80051c8 <GPIO_Init+0x17c>
 80051b2:	2307      	movs	r3, #7
 80051b4:	e008      	b.n	80051c8 <GPIO_Init+0x17c>
 80051b6:	2304      	movs	r3, #4
 80051b8:	e006      	b.n	80051c8 <GPIO_Init+0x17c>
 80051ba:	2303      	movs	r3, #3
 80051bc:	e004      	b.n	80051c8 <GPIO_Init+0x17c>
 80051be:	2302      	movs	r3, #2
 80051c0:	e002      	b.n	80051c8 <GPIO_Init+0x17c>
 80051c2:	2301      	movs	r3, #1
 80051c4:	e000      	b.n	80051c8 <GPIO_Init+0x17c>
 80051c6:	2300      	movs	r3, #0
 80051c8:	747b      	strb	r3, [r7, #17]
		RCC->APB2ENR.reg |= RCC_APB2ENR_SYSCFGEN; 											// enable SYSCFG peripheral clock
 80051ca:	4b2f      	ldr	r3, [pc, #188]	@ (8005288 <GPIO_Init+0x23c>)
 80051cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ce:	4a2e      	ldr	r2, [pc, #184]	@ (8005288 <GPIO_Init+0x23c>)
 80051d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80051d4:	6453      	str	r3, [r2, #68]	@ 0x44
		if((0 == temp1) || (1/4 == temp1) || (2/4 == temp1) || (3/4 == temp1))
 80051d6:	7cfb      	ldrb	r3, [r7, #19]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d008      	beq.n	80051ee <GPIO_Init+0x1a2>
 80051dc:	7cfb      	ldrb	r3, [r7, #19]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d005      	beq.n	80051ee <GPIO_Init+0x1a2>
 80051e2:	7cfb      	ldrb	r3, [r7, #19]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <GPIO_Init+0x1a2>
 80051e8:	7cfb      	ldrb	r3, [r7, #19]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10b      	bne.n	8005206 <GPIO_Init+0x1ba>
		{
			SYSCFG->EXTICR[0] |= portcode << (temp2 * 4);
 80051ee:	4b27      	ldr	r3, [pc, #156]	@ (800528c <GPIO_Init+0x240>)
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	7c79      	ldrb	r1, [r7, #17]
 80051f4:	7cba      	ldrb	r2, [r7, #18]
 80051f6:	0092      	lsls	r2, r2, #2
 80051f8:	fa01 f202 	lsl.w	r2, r1, r2
 80051fc:	4611      	mov	r1, r2
 80051fe:	4a23      	ldr	r2, [pc, #140]	@ (800528c <GPIO_Init+0x240>)
 8005200:	430b      	orrs	r3, r1
 8005202:	6093      	str	r3, [r2, #8]
 8005204:	e05b      	b.n	80052be <GPIO_Init+0x272>
		}
		else if((1 == temp1) || (5/4 == temp1) || (6/4 == temp1) || (7/4 == temp1))
 8005206:	7cfb      	ldrb	r3, [r7, #19]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d008      	beq.n	800521e <GPIO_Init+0x1d2>
 800520c:	7cfb      	ldrb	r3, [r7, #19]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d005      	beq.n	800521e <GPIO_Init+0x1d2>
 8005212:	7cfb      	ldrb	r3, [r7, #19]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d002      	beq.n	800521e <GPIO_Init+0x1d2>
 8005218:	7cfb      	ldrb	r3, [r7, #19]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d10b      	bne.n	8005236 <GPIO_Init+0x1ea>
		{
			SYSCFG->EXTICR[1] |= portcode << (temp2 * 4);
 800521e:	4b1b      	ldr	r3, [pc, #108]	@ (800528c <GPIO_Init+0x240>)
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	7c79      	ldrb	r1, [r7, #17]
 8005224:	7cba      	ldrb	r2, [r7, #18]
 8005226:	0092      	lsls	r2, r2, #2
 8005228:	fa01 f202 	lsl.w	r2, r1, r2
 800522c:	4611      	mov	r1, r2
 800522e:	4a17      	ldr	r2, [pc, #92]	@ (800528c <GPIO_Init+0x240>)
 8005230:	430b      	orrs	r3, r1
 8005232:	60d3      	str	r3, [r2, #12]
 8005234:	e043      	b.n	80052be <GPIO_Init+0x272>
		}
		else if((2 == temp1) || (9/4 == temp1) || (10/4 == temp1) || (11/4 == temp1))
 8005236:	7cfb      	ldrb	r3, [r7, #19]
 8005238:	2b02      	cmp	r3, #2
 800523a:	d008      	beq.n	800524e <GPIO_Init+0x202>
 800523c:	7cfb      	ldrb	r3, [r7, #19]
 800523e:	2b02      	cmp	r3, #2
 8005240:	d005      	beq.n	800524e <GPIO_Init+0x202>
 8005242:	7cfb      	ldrb	r3, [r7, #19]
 8005244:	2b02      	cmp	r3, #2
 8005246:	d002      	beq.n	800524e <GPIO_Init+0x202>
 8005248:	7cfb      	ldrb	r3, [r7, #19]
 800524a:	2b02      	cmp	r3, #2
 800524c:	d120      	bne.n	8005290 <GPIO_Init+0x244>
		{
			SYSCFG->EXTICR[2] |= portcode << (temp2 * 4);
 800524e:	4b0f      	ldr	r3, [pc, #60]	@ (800528c <GPIO_Init+0x240>)
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	7c79      	ldrb	r1, [r7, #17]
 8005254:	7cba      	ldrb	r2, [r7, #18]
 8005256:	0092      	lsls	r2, r2, #2
 8005258:	fa01 f202 	lsl.w	r2, r1, r2
 800525c:	4611      	mov	r1, r2
 800525e:	4a0b      	ldr	r2, [pc, #44]	@ (800528c <GPIO_Init+0x240>)
 8005260:	430b      	orrs	r3, r1
 8005262:	6113      	str	r3, [r2, #16]
 8005264:	e02b      	b.n	80052be <GPIO_Init+0x272>
 8005266:	bf00      	nop
 8005268:	40013c00 	.word	0x40013c00
 800526c:	40020000 	.word	0x40020000
 8005270:	40020400 	.word	0x40020400
 8005274:	40020800 	.word	0x40020800
 8005278:	40020c00 	.word	0x40020c00
 800527c:	40021000 	.word	0x40021000
 8005280:	40021c00 	.word	0x40021c00
 8005284:	40022000 	.word	0x40022000
 8005288:	40023800 	.word	0x40023800
 800528c:	40013800 	.word	0x40013800
		}
		else if((3 == temp1) || (13/4 == temp1) || (14/4 == temp1) || (15/4 == temp1))
 8005290:	7cfb      	ldrb	r3, [r7, #19]
 8005292:	2b03      	cmp	r3, #3
 8005294:	d008      	beq.n	80052a8 <GPIO_Init+0x25c>
 8005296:	7cfb      	ldrb	r3, [r7, #19]
 8005298:	2b03      	cmp	r3, #3
 800529a:	d005      	beq.n	80052a8 <GPIO_Init+0x25c>
 800529c:	7cfb      	ldrb	r3, [r7, #19]
 800529e:	2b03      	cmp	r3, #3
 80052a0:	d002      	beq.n	80052a8 <GPIO_Init+0x25c>
 80052a2:	7cfb      	ldrb	r3, [r7, #19]
 80052a4:	2b03      	cmp	r3, #3
 80052a6:	d10a      	bne.n	80052be <GPIO_Init+0x272>
		{
			SYSCFG->EXTICR[3] |= portcode << (temp2 * 4);
 80052a8:	4b7a      	ldr	r3, [pc, #488]	@ (8005494 <GPIO_Init+0x448>)
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	7c79      	ldrb	r1, [r7, #17]
 80052ae:	7cba      	ldrb	r2, [r7, #18]
 80052b0:	0092      	lsls	r2, r2, #2
 80052b2:	fa01 f202 	lsl.w	r2, r1, r2
 80052b6:	4611      	mov	r1, r2
 80052b8:	4a76      	ldr	r2, [pc, #472]	@ (8005494 <GPIO_Init+0x448>)
 80052ba:	430b      	orrs	r3, r1
 80052bc:	6153      	str	r3, [r2, #20]
		}

		EXTI->IMR.reg |= 1 << pGPIOHandle->GPIO_Config.PinNumber;			//enable the EXTI interrupt delivery using IMR
 80052be:	4b76      	ldr	r3, [pc, #472]	@ (8005498 <GPIO_Init+0x44c>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	6852      	ldr	r2, [r2, #4]
 80052c6:	2101      	movs	r1, #1
 80052c8:	fa01 f202 	lsl.w	r2, r1, r2
 80052cc:	4611      	mov	r1, r2
 80052ce:	4a72      	ldr	r2, [pc, #456]	@ (8005498 <GPIO_Init+0x44c>)
 80052d0:	430b      	orrs	r3, r1
 80052d2:	6013      	str	r3, [r2, #0]
	}

	temp = pGPIOHandle->GPIO_Config.PinSpeed << (2 * pGPIOHandle->GPIO_Config.PinNumber);//shift to left by 2 bits
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	7a5b      	ldrb	r3, [r3, #9]
 80052d8:	461a      	mov	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	005b      	lsls	r3, r3, #1
 80052e0:	fa02 f303 	lsl.w	r3, r2, r3
 80052e4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR.reg &= ~(0x3 <<(2 * pGPIOHandle->GPIO_Config.PinNumber));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	2103      	movs	r1, #3
 80052f4:	fa01 f303 	lsl.w	r3, r1, r3
 80052f8:	43db      	mvns	r3, r3
 80052fa:	4619      	mov	r1, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	400a      	ands	r2, r1
 8005302:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR.reg |= temp;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6899      	ldr	r1, [r3, #8]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	430a      	orrs	r2, r1
 8005312:	609a      	str	r2, [r3, #8]

	temp = pGPIOHandle->GPIO_Config.PinPuPdControl << (2 * pGPIOHandle->GPIO_Config.PinNumber);//shift to left by 2 bits because
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	7a9b      	ldrb	r3, [r3, #10]
 8005318:	461a      	mov	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	fa02 f303 	lsl.w	r3, r2, r3
 8005324:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR.reg &= ~(0x3 <<( 2 * pGPIOHandle->GPIO_Config.PinNumber));
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68da      	ldr	r2, [r3, #12]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	2103      	movs	r1, #3
 8005334:	fa01 f303 	lsl.w	r3, r1, r3
 8005338:	43db      	mvns	r3, r3
 800533a:	4619      	mov	r1, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	400a      	ands	r2, r1
 8005342:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR.reg |= temp;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68d9      	ldr	r1, [r3, #12]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	430a      	orrs	r2, r1
 8005352:	60da      	str	r2, [r3, #12]

	temp = pGPIOHandle->GPIO_Config.PinOPType << pGPIOHandle->GPIO_Config.PinNumber;//shift to left by 2 bits
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	7adb      	ldrb	r3, [r3, #11]
 8005358:	461a      	mov	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	fa02 f303 	lsl.w	r3, r2, r3
 8005362:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER.reg &= ~(0x1 << pGPIOHandle->GPIO_Config.PinNumber);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	2101      	movs	r1, #1
 8005370:	fa01 f303 	lsl.w	r3, r1, r3
 8005374:	43db      	mvns	r3, r3
 8005376:	4619      	mov	r1, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	400a      	ands	r2, r1
 800537e:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER.reg |= temp;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6859      	ldr	r1, [r3, #4]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	430a      	orrs	r2, r1
 800538e:	605a      	str	r2, [r3, #4]

	if(GPIO_MODE_AF == pGPIOHandle->GPIO_Config.PinMode)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	7a1b      	ldrb	r3, [r3, #8]
 8005394:	2b02      	cmp	r3, #2
 8005396:	d178      	bne.n	800548a <GPIO_Init+0x43e>
	{
		uint8_t temp1 = 0, temp2 = 0;
 8005398:	2300      	movs	r3, #0
 800539a:	743b      	strb	r3, [r7, #16]
 800539c:	2300      	movs	r3, #0
 800539e:	73fb      	strb	r3, [r7, #15]

		temp1 = pGPIOHandle->GPIO_Config.PinNumber/8;	//AFRL = AFR[0]. Any integer smaller than 8 will be 0 after division
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	08db      	lsrs	r3, r3, #3
 80053a6:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_Config.PinNumber%8;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	73fb      	strb	r3, [r7, #15]
		if((0 == temp1) || (1/8 == temp1) || (2/8 == temp1) || (3/8 == temp1) ||
 80053b4:	7c3b      	ldrb	r3, [r7, #16]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d014      	beq.n	80053e4 <GPIO_Init+0x398>
 80053ba:	7c3b      	ldrb	r3, [r7, #16]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d011      	beq.n	80053e4 <GPIO_Init+0x398>
 80053c0:	7c3b      	ldrb	r3, [r7, #16]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00e      	beq.n	80053e4 <GPIO_Init+0x398>
 80053c6:	7c3b      	ldrb	r3, [r7, #16]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00b      	beq.n	80053e4 <GPIO_Init+0x398>
 80053cc:	7c3b      	ldrb	r3, [r7, #16]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d008      	beq.n	80053e4 <GPIO_Init+0x398>
			(4/8 == temp1 ) || (5/8 == temp1) || (6/8 == temp1) || (7/8 == temp1))
 80053d2:	7c3b      	ldrb	r3, [r7, #16]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d005      	beq.n	80053e4 <GPIO_Init+0x398>
 80053d8:	7c3b      	ldrb	r3, [r7, #16]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d002      	beq.n	80053e4 <GPIO_Init+0x398>
 80053de:	7c3b      	ldrb	r3, [r7, #16]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d11d      	bne.n	8005420 <GPIO_Init+0x3d4>
		{
			pGPIOHandle->pGPIOx->AFRL.reg &= ~(0xF << (4* temp2));
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6a1a      	ldr	r2, [r3, #32]
 80053ea:	7bfb      	ldrb	r3, [r7, #15]
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	210f      	movs	r1, #15
 80053f0:	fa01 f303 	lsl.w	r3, r1, r3
 80053f4:	43db      	mvns	r3, r3
 80053f6:	4619      	mov	r1, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	400a      	ands	r2, r1
 80053fe:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRL.reg |= pGPIOHandle->GPIO_Config.PinAltFuncMode << (4* temp2);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6a1a      	ldr	r2, [r3, #32]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	7b1b      	ldrb	r3, [r3, #12]
 800540a:	4619      	mov	r1, r3
 800540c:	7bfb      	ldrb	r3, [r7, #15]
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	fa01 f303 	lsl.w	r3, r1, r3
 8005414:	4619      	mov	r1, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	621a      	str	r2, [r3, #32]
		{
			pGPIOHandle->pGPIOx->AFRH.reg &= ~(0xF << (4* temp2));
			pGPIOHandle->pGPIOx->AFRH.reg |= pGPIOHandle->GPIO_Config.PinAltFuncMode << (4* temp2);
		}
	}
}
 800541e:	e034      	b.n	800548a <GPIO_Init+0x43e>
		else if((1 == temp1) || (9/8 == temp1) || (10/8 == temp1) || (11/8 == temp1) ||
 8005420:	7c3b      	ldrb	r3, [r7, #16]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d014      	beq.n	8005450 <GPIO_Init+0x404>
 8005426:	7c3b      	ldrb	r3, [r7, #16]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d011      	beq.n	8005450 <GPIO_Init+0x404>
 800542c:	7c3b      	ldrb	r3, [r7, #16]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d00e      	beq.n	8005450 <GPIO_Init+0x404>
 8005432:	7c3b      	ldrb	r3, [r7, #16]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d00b      	beq.n	8005450 <GPIO_Init+0x404>
 8005438:	7c3b      	ldrb	r3, [r7, #16]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d008      	beq.n	8005450 <GPIO_Init+0x404>
				(12/8 == temp1 ) || (13/8 == temp1) || (14/8 == temp1) || (15/8 == temp1))
 800543e:	7c3b      	ldrb	r3, [r7, #16]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d005      	beq.n	8005450 <GPIO_Init+0x404>
 8005444:	7c3b      	ldrb	r3, [r7, #16]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d002      	beq.n	8005450 <GPIO_Init+0x404>
 800544a:	7c3b      	ldrb	r3, [r7, #16]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d11c      	bne.n	800548a <GPIO_Init+0x43e>
			pGPIOHandle->pGPIOx->AFRH.reg &= ~(0xF << (4* temp2));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005456:	7bfb      	ldrb	r3, [r7, #15]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	210f      	movs	r1, #15
 800545c:	fa01 f303 	lsl.w	r3, r1, r3
 8005460:	43db      	mvns	r3, r3
 8005462:	4619      	mov	r1, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	400a      	ands	r2, r1
 800546a:	625a      	str	r2, [r3, #36]	@ 0x24
			pGPIOHandle->pGPIOx->AFRH.reg |= pGPIOHandle->GPIO_Config.PinAltFuncMode << (4* temp2);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	7b1b      	ldrb	r3, [r3, #12]
 8005476:	4619      	mov	r1, r3
 8005478:	7bfb      	ldrb	r3, [r7, #15]
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	fa01 f303 	lsl.w	r3, r1, r3
 8005480:	4619      	mov	r1, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800548a:	bf00      	nop
 800548c:	3718      	adds	r7, #24
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	40013800 	.word	0x40013800
 8005498:	40013c00 	.word	0x40013c00

0800549c <GPIO_WritePin>:
/* @return				-	none																		*/
/*																										*/
/* @Note				-	none																		*/
/********************************************************************************************************/
void GPIO_WritePin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t val)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	460b      	mov	r3, r1
 80054a6:	70fb      	strb	r3, [r7, #3]
 80054a8:	4613      	mov	r3, r2
 80054aa:	70bb      	strb	r3, [r7, #2]
	if(SET == val)
 80054ac:	78bb      	ldrb	r3, [r7, #2]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d109      	bne.n	80054c6 <GPIO_WritePin+0x2a>
	{
		pGPIOx->ODR.reg |= (1 << PinNumber);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	78fa      	ldrb	r2, [r7, #3]
 80054b8:	2101      	movs	r1, #1
 80054ba:	fa01 f202 	lsl.w	r2, r1, r2
 80054be:	431a      	orrs	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	615a      	str	r2, [r3, #20]
	}else
	{
		pGPIOx->ODR.reg &= ~(1 << PinNumber);
	}
}
 80054c4:	e009      	b.n	80054da <GPIO_WritePin+0x3e>
		pGPIOx->ODR.reg &= ~(1 << PinNumber);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	78fa      	ldrb	r2, [r7, #3]
 80054cc:	2101      	movs	r1, #1
 80054ce:	fa01 f202 	lsl.w	r2, r1, r2
 80054d2:	43d2      	mvns	r2, r2
 80054d4:	401a      	ands	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	615a      	str	r2, [r3, #20]
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
	...

080054e8 <RCC_OscConfig>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void RCC_OscConfig(RCC_OscInit_t *pRCC_Osc)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
	if(NULL == pRCC_Osc)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 80bc 	beq.w	8005670 <RCC_OscConfig+0x188>
	{
		return;
	}
	//configure HSE
	if(RCC_OSCILLATORTYPE_HSE == pRCC_Osc->OscillatorType)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d126      	bne.n	800554e <RCC_OscConfig+0x66>
	{
		switch(pRCC_Osc->HSEState)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	2b02      	cmp	r3, #2
 8005506:	d006      	beq.n	8005516 <RCC_OscConfig+0x2e>
 8005508:	2b02      	cmp	r3, #2
 800550a:	d81f      	bhi.n	800554c <RCC_OscConfig+0x64>
 800550c:	2b00      	cmp	r3, #0
 800550e:	d018      	beq.n	8005542 <RCC_OscConfig+0x5a>
 8005510:	2b01      	cmp	r3, #1
 8005512:	d010      	beq.n	8005536 <RCC_OscConfig+0x4e>
			case RCC_HSE_OFF:
			{
				RCC->CR.bit.hseon = RESET;
			}
			default:
				break;
 8005514:	e01a      	b.n	800554c <RCC_OscConfig+0x64>
				RCC->CR.bit.hseon = RESET;
 8005516:	4a59      	ldr	r2, [pc, #356]	@ (800567c <RCC_OscConfig+0x194>)
 8005518:	6813      	ldr	r3, [r2, #0]
 800551a:	f36f 4310 	bfc	r3, #16, #1
 800551e:	6013      	str	r3, [r2, #0]
				RCC->CR.bit.hsebyp = RCC_CR_HSEBYP;
 8005520:	4a56      	ldr	r2, [pc, #344]	@ (800567c <RCC_OscConfig+0x194>)
 8005522:	6813      	ldr	r3, [r2, #0]
 8005524:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005528:	6013      	str	r3, [r2, #0]
				RCC->CR.bit.hseon = RCC_CR_HSEON;
 800552a:	4a54      	ldr	r2, [pc, #336]	@ (800567c <RCC_OscConfig+0x194>)
 800552c:	6813      	ldr	r3, [r2, #0]
 800552e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005532:	6013      	str	r3, [r2, #0]
				break;
 8005534:	e00b      	b.n	800554e <RCC_OscConfig+0x66>
				RCC->CR.bit.hseon = RCC_CR_HSEON;
 8005536:	4a51      	ldr	r2, [pc, #324]	@ (800567c <RCC_OscConfig+0x194>)
 8005538:	6813      	ldr	r3, [r2, #0]
 800553a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800553e:	6013      	str	r3, [r2, #0]
				break;
 8005540:	e005      	b.n	800554e <RCC_OscConfig+0x66>
				RCC->CR.bit.hseon = RESET;
 8005542:	4a4e      	ldr	r2, [pc, #312]	@ (800567c <RCC_OscConfig+0x194>)
 8005544:	6813      	ldr	r3, [r2, #0]
 8005546:	f36f 4310 	bfc	r3, #16, #1
 800554a:	6013      	str	r3, [r2, #0]
				break;
 800554c:	bf00      	nop
		}
	}
	//configure HSI
	if(RCC_OSCILLATORTYPE_HSI == pRCC_Osc->OscillatorType)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b02      	cmp	r3, #2
 8005554:	d112      	bne.n	800557c <RCC_OscConfig+0x94>
	{
		switch(pRCC_Osc->HSIState)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d007      	beq.n	800556e <RCC_OscConfig+0x86>
 800555e:	2b01      	cmp	r3, #1
 8005560:	d10b      	bne.n	800557a <RCC_OscConfig+0x92>
		{
			case RCC_HSI_ON:
			{
				RCC->CR.bit.hsion = RCC_CR_HSION;
 8005562:	4a46      	ldr	r2, [pc, #280]	@ (800567c <RCC_OscConfig+0x194>)
 8005564:	6813      	ldr	r3, [r2, #0]
 8005566:	f043 0301 	orr.w	r3, r3, #1
 800556a:	6013      	str	r3, [r2, #0]
				break;
 800556c:	e006      	b.n	800557c <RCC_OscConfig+0x94>
			}
			case RCC_HSI_OFF:
			{
				RCC->CR.bit.hsion = RESET;
 800556e:	4a43      	ldr	r2, [pc, #268]	@ (800567c <RCC_OscConfig+0x194>)
 8005570:	6813      	ldr	r3, [r2, #0]
 8005572:	f36f 0300 	bfc	r3, #0, #1
 8005576:	6013      	str	r3, [r2, #0]
				break;
 8005578:	e000      	b.n	800557c <RCC_OscConfig+0x94>
			}
			default:
				break;
 800557a:	bf00      	nop
		}
	}
	//configure LSE
	if(RCC_OSCILLATORTYPE_LSE == pRCC_Osc->OscillatorType)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b04      	cmp	r3, #4
 8005582:	d112      	bne.n	80055aa <RCC_OscConfig+0xc2>
	{
		switch(pRCC_Osc->LSEState)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d007      	beq.n	800559c <RCC_OscConfig+0xb4>
 800558c:	2b01      	cmp	r3, #1
 800558e:	d10b      	bne.n	80055a8 <RCC_OscConfig+0xc0>
		{
			case RCC_LSE_ON:
			{
				RCC->BDCR.bit.lseon = RCC_BDCR_RTCSEL_LSE;
 8005590:	4a3a      	ldr	r2, [pc, #232]	@ (800567c <RCC_OscConfig+0x194>)
 8005592:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8005594:	f043 0301 	orr.w	r3, r3, #1
 8005598:	6713      	str	r3, [r2, #112]	@ 0x70
				break;
 800559a:	e006      	b.n	80055aa <RCC_OscConfig+0xc2>
			}
			case RCC_LSE_OFF:
			{
				RCC->BDCR.bit.lseon = RESET;
 800559c:	4a37      	ldr	r2, [pc, #220]	@ (800567c <RCC_OscConfig+0x194>)
 800559e:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80055a0:	f36f 0300 	bfc	r3, #0, #1
 80055a4:	6713      	str	r3, [r2, #112]	@ 0x70
				break;
 80055a6:	e000      	b.n	80055aa <RCC_OscConfig+0xc2>
			}
			default:
				break;
 80055a8:	bf00      	nop
		}
	}
	//configure LSI
	if(RCC_OSCILLATORTYPE_LSI == pRCC_Osc->OscillatorType)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2b08      	cmp	r3, #8
 80055b0:	d112      	bne.n	80055d8 <RCC_OscConfig+0xf0>
		{
			switch(pRCC_Osc->LSIState)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d007      	beq.n	80055ca <RCC_OscConfig+0xe2>
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d10b      	bne.n	80055d6 <RCC_OscConfig+0xee>
			{
				case RCC_LSI_ON:
				{
					RCC->CSR.bit.lsion = SET;
 80055be:	4a2f      	ldr	r2, [pc, #188]	@ (800567c <RCC_OscConfig+0x194>)
 80055c0:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 80055c2:	f043 0301 	orr.w	r3, r3, #1
 80055c6:	6753      	str	r3, [r2, #116]	@ 0x74
					break;
 80055c8:	e006      	b.n	80055d8 <RCC_OscConfig+0xf0>
				}
				case RCC_LSI_OFF:
				{
					RCC->CSR.bit.lsion = RESET;
 80055ca:	4a2c      	ldr	r2, [pc, #176]	@ (800567c <RCC_OscConfig+0x194>)
 80055cc:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 80055ce:	f36f 0300 	bfc	r3, #0, #1
 80055d2:	6753      	str	r3, [r2, #116]	@ 0x74
					break;
 80055d4:	e000      	b.n	80055d8 <RCC_OscConfig+0xf0>
				}
				default:
					break;
 80055d6:	bf00      	nop
			}
		}
	//configure PLL
	RCC->CR.bit.pllon = RESET;
 80055d8:	4a28      	ldr	r2, [pc, #160]	@ (800567c <RCC_OscConfig+0x194>)
 80055da:	6813      	ldr	r3, [r2, #0]
 80055dc:	f36f 6318 	bfc	r3, #24, #1
 80055e0:	6013      	str	r3, [r2, #0]
	RCC_PLLCFGR_Reg_t PLLCFGR_temp;
	if(RCC_PLL_NONE != pRCC_Osc->PLL.State)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d043      	beq.n	8005672 <RCC_OscConfig+0x18a>
	{
		switch(pRCC_Osc->PLL.State)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d002      	beq.n	80055f8 <RCC_OscConfig+0x110>
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d006      	beq.n	8005604 <RCC_OscConfig+0x11c>
				RCC->PLLCFGR.reg = PLLCFGR_temp.reg;
				RCC->CR.bit.pllon = RCC_CR_PLLON;
				break;
			}
			default:
				break;
 80055f6:	e03c      	b.n	8005672 <RCC_OscConfig+0x18a>
				RCC->CR.bit.pllon = RESET;
 80055f8:	4a20      	ldr	r2, [pc, #128]	@ (800567c <RCC_OscConfig+0x194>)
 80055fa:	6813      	ldr	r3, [r2, #0]
 80055fc:	f36f 6318 	bfc	r3, #24, #1
 8005600:	6013      	str	r3, [r2, #0]
				break;
 8005602:	e036      	b.n	8005672 <RCC_OscConfig+0x18a>
				PLLCFGR_temp.bit.pllsrc = pRCC_Osc->PLL.Source;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	69db      	ldr	r3, [r3, #28]
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	b2da      	uxtb	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f362 5396 	bfi	r3, r2, #22, #1
 8005614:	60fb      	str	r3, [r7, #12]
				PLLCFGR_temp.bit.pllm = pRCC_Osc->PLL.M;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800561e:	b2da      	uxtb	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f362 0305 	bfi	r3, r2, #0, #6
 8005626:	60fb      	str	r3, [r7, #12]
				PLLCFGR_temp.bit.pllp = pRCC_Osc->PLL.P;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800562c:	f003 0303 	and.w	r3, r3, #3
 8005630:	b2da      	uxtb	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f362 4311 	bfi	r3, r2, #16, #2
 8005638:	60fb      	str	r3, [r7, #12]
				PLLCFGR_temp.bit.plln = pRCC_Osc->PLL.N;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005642:	b29a      	uxth	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f362 138e 	bfi	r3, r2, #6, #9
 800564a:	60fb      	str	r3, [r7, #12]
				PLLCFGR_temp.bit.pllq = pRCC_Osc->PLL.Q;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005650:	f003 030f 	and.w	r3, r3, #15
 8005654:	b2da      	uxtb	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f362 631b 	bfi	r3, r2, #24, #4
 800565c:	60fb      	str	r3, [r7, #12]
				RCC->PLLCFGR.reg = PLLCFGR_temp.reg;
 800565e:	4a07      	ldr	r2, [pc, #28]	@ (800567c <RCC_OscConfig+0x194>)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6053      	str	r3, [r2, #4]
				RCC->CR.bit.pllon = RCC_CR_PLLON;
 8005664:	4a05      	ldr	r2, [pc, #20]	@ (800567c <RCC_OscConfig+0x194>)
 8005666:	6813      	ldr	r3, [r2, #0]
 8005668:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800566c:	6013      	str	r3, [r2, #0]
				break;
 800566e:	e000      	b.n	8005672 <RCC_OscConfig+0x18a>
		return;
 8005670:	bf00      	nop
		}

	}
}
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	40023800 	.word	0x40023800

08005680 <RCC_ClockConfig>:
/* @return				- none																			*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
void RCC_ClockConfig(RCC_ClkInit_t  *pRCC_Clk)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
	if(NULL == pRCC_Clk)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 8083 	beq.w	8005796 <RCC_ClockConfig+0x116>
	{
	    return;
	}
	// Set flash latency based on new system clock frequency
	FLASH->ACR.bit.latency = 0x5U; //5WS for 150 < HCLK ≤ 168
 8005690:	4a43      	ldr	r2, [pc, #268]	@ (80057a0 <RCC_ClockConfig+0x120>)
 8005692:	6813      	ldr	r3, [r2, #0]
 8005694:	2105      	movs	r1, #5
 8005696:	f361 0302 	bfi	r3, r1, #0, #3
 800569a:	6013      	str	r3, [r2, #0]
	while(!(FLASH->ACR.bit.latency = 0x5U))
 800569c:	bf00      	nop
 800569e:	4a40      	ldr	r2, [pc, #256]	@ (80057a0 <RCC_ClockConfig+0x120>)
 80056a0:	6813      	ldr	r3, [r2, #0]
 80056a2:	2105      	movs	r1, #5
 80056a4:	f361 0302 	bfi	r3, r1, #0, #3
 80056a8:	6013      	str	r3, [r2, #0]

	}

	//HCLK Configuration

	if(RCC_CLOCKTYPE_HCLK == ((pRCC_Clk->ClockType) & RCC_CLOCKTYPE_HCLK))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d013      	beq.n	80056de <RCC_ClockConfig+0x5e>
	{
		RCC->CFGR.bit.ppre1 = 0x7U;
 80056b6:	4a3b      	ldr	r2, [pc, #236]	@ (80057a4 <RCC_ClockConfig+0x124>)
 80056b8:	6893      	ldr	r3, [r2, #8]
 80056ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80056be:	6093      	str	r3, [r2, #8]
		RCC->CFGR.bit.ppre2 = 0x7U;
 80056c0:	4a38      	ldr	r2, [pc, #224]	@ (80057a4 <RCC_ClockConfig+0x124>)
 80056c2:	6893      	ldr	r3, [r2, #8]
 80056c4:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80056c8:	6093      	str	r3, [r2, #8]
		RCC->CFGR.bit.hpre = pRCC_Clk->AHBCLKDivider;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	4a35      	ldr	r2, [pc, #212]	@ (80057a4 <RCC_ClockConfig+0x124>)
 80056d0:	f003 030f 	and.w	r3, r3, #15
 80056d4:	b2d9      	uxtb	r1, r3
 80056d6:	6893      	ldr	r3, [r2, #8]
 80056d8:	f361 1307 	bfi	r3, r1, #4, #4
 80056dc:	6093      	str	r3, [r2, #8]
	}

	//SYSCLK Configuration

	if(RCC_CLOCKTYPE_SYSCLK == ((pRCC_Clk->ClockType) & RCC_CLOCKTYPE_SYSCLK))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d02f      	beq.n	800574a <RCC_ClockConfig+0xca>
	{
		//HSE is selected as System Clock Source
		if(RCC_SYSCLKSOURCE_HSE == pRCC_Clk->SYSCLKSource)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d108      	bne.n	8005704 <RCC_ClockConfig+0x84>
		{
			//wait HSE ready flag off
			while(!(RESET == RCC->CR.bit.hserdy))
 80056f2:	bf00      	nop
 80056f4:	4b2b      	ldr	r3, [pc, #172]	@ (80057a4 <RCC_ClockConfig+0x124>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1f8      	bne.n	80056f4 <RCC_ClockConfig+0x74>
 8005702:	e018      	b.n	8005736 <RCC_ClockConfig+0xb6>
			{

			}
		}
		//PLL is selected as System Clock Source
		else if((RCC_SYSCLKSOURCE_PLLCLK == pRCC_Clk->SYSCLKSource) ||
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	2b02      	cmp	r3, #2
 800570a:	d003      	beq.n	8005714 <RCC_ClockConfig+0x94>
				(RCC_SYSCLKSOURCE_PLLRCLK == pRCC_Clk->SYSCLKSource))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
		else if((RCC_SYSCLKSOURCE_PLLCLK == pRCC_Clk->SYSCLKSource) ||
 8005710:	2b03      	cmp	r3, #3
 8005712:	d108      	bne.n	8005726 <RCC_ClockConfig+0xa6>
		{
			//wait PLL ready flag
			while(!(SET == RCC->CR.bit.pllrdy))
 8005714:	bf00      	nop
 8005716:	4b23      	ldr	r3, [pc, #140]	@ (80057a4 <RCC_ClockConfig+0x124>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f3c3 6340 	ubfx	r3, r3, #25, #1
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b01      	cmp	r3, #1
 8005722:	d1f8      	bne.n	8005716 <RCC_ClockConfig+0x96>
		else if((RCC_SYSCLKSOURCE_PLLCLK == pRCC_Clk->SYSCLKSource) ||
 8005724:	e007      	b.n	8005736 <RCC_ClockConfig+0xb6>
			}
		}
		else
		{
			//wait for HSI ready flag
			while(!(SET == RCC->CR.bit.hsirdy))
 8005726:	bf00      	nop
 8005728:	4b1e      	ldr	r3, [pc, #120]	@ (80057a4 <RCC_ClockConfig+0x124>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b01      	cmp	r3, #1
 8005734:	d1f8      	bne.n	8005728 <RCC_ClockConfig+0xa8>
			{

			}
		}

		RCC->CFGR.bit.sw = pRCC_Clk->SYSCLKSource;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	4a1a      	ldr	r2, [pc, #104]	@ (80057a4 <RCC_ClockConfig+0x124>)
 800573c:	f003 0303 	and.w	r3, r3, #3
 8005740:	b2d9      	uxtb	r1, r3
 8005742:	6893      	ldr	r3, [r2, #8]
 8005744:	f361 0301 	bfi	r3, r1, #0, #2
 8005748:	6093      	str	r3, [r2, #8]
	}

	//PCLK1 Configuration
	if(RCC_CLOCKTYPE_PCLK1 == ((pRCC_Clk->ClockType) & RCC_CLOCKTYPE_PCLK1))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0304 	and.w	r3, r3, #4
 8005752:	2b00      	cmp	r3, #0
 8005754:	d009      	beq.n	800576a <RCC_ClockConfig+0xea>
	{
		RCC->CFGR.bit.ppre1 = pRCC_Clk->APB1CLKDivider;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	4a12      	ldr	r2, [pc, #72]	@ (80057a4 <RCC_ClockConfig+0x124>)
 800575c:	f003 0307 	and.w	r3, r3, #7
 8005760:	b2d9      	uxtb	r1, r3
 8005762:	6893      	ldr	r3, [r2, #8]
 8005764:	f361 238c 	bfi	r3, r1, #10, #3
 8005768:	6093      	str	r3, [r2, #8]
	}

	//PCLK2 Configuration
	if(RCC_CLOCKTYPE_PCLK2 == ((pRCC_Clk->ClockType) & RCC_CLOCKTYPE_PCLK2))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0308 	and.w	r3, r3, #8
 8005772:	2b00      	cmp	r3, #0
 8005774:	d009      	beq.n	800578a <RCC_ClockConfig+0x10a>
	{
		RCC->CFGR.bit.ppre2 = pRCC_Clk->APB2CLKDivider;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	4a0a      	ldr	r2, [pc, #40]	@ (80057a4 <RCC_ClockConfig+0x124>)
 800577c:	f003 0307 	and.w	r3, r3, #7
 8005780:	b2d9      	uxtb	r1, r3
 8005782:	6893      	ldr	r3, [r2, #8]
 8005784:	f361 334f 	bfi	r3, r1, #13, #3
 8005788:	6093      	str	r3, [r2, #8]
	}

	//Update the SystemCoreClock global variable
	SystemCoreClock = RCC_GetSysClockFreq();
 800578a:	f000 f80f 	bl	80057ac <RCC_GetSysClockFreq>
 800578e:	4603      	mov	r3, r0
 8005790:	4a05      	ldr	r2, [pc, #20]	@ (80057a8 <RCC_ClockConfig+0x128>)
 8005792:	6013      	str	r3, [r2, #0]
 8005794:	e000      	b.n	8005798 <RCC_ClockConfig+0x118>
	    return;
 8005796:	bf00      	nop
}
 8005798:	3708      	adds	r7, #8
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	40023c00 	.word	0x40023c00
 80057a4:	40023800 	.word	0x40023800
 80057a8:	20000008 	.word	0x20000008

080057ac <RCC_GetSysClockFreq>:
/* @return				- System clock frequency														*/
/*																										*/
/* @Note					- none																			*/
/********************************************************************************************************/
uint32_t RCC_GetSysClockFreq(void)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
    uint32_t sys_clk_freq = 0, clk_src = 0, temp = 0, ahb_prescaler = 0;
 80057b2:	2300      	movs	r3, #0
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	2300      	movs	r3, #0
 80057b8:	607b      	str	r3, [r7, #4]
 80057ba:	2300      	movs	r3, #0
 80057bc:	603b      	str	r3, [r7, #0]
 80057be:	2300      	movs	r3, #0
 80057c0:	60bb      	str	r3, [r7, #8]

    // Get the clock source used for the system clock
    clk_src = RCC->CFGR.bit.sws;
 80057c2:	4b1a      	ldr	r3, [pc, #104]	@ (800582c <RCC_GetSysClockFreq+0x80>)
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	607b      	str	r3, [r7, #4]

    if(RCC_SYSCLKSOURCE_HSI == clk_src)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d102      	bne.n	80057da <RCC_GetSysClockFreq+0x2e>
    {
        sys_clk_freq = 16000000; // HSI
 80057d4:	4b16      	ldr	r3, [pc, #88]	@ (8005830 <RCC_GetSysClockFreq+0x84>)
 80057d6:	60fb      	str	r3, [r7, #12]
 80057d8:	e00b      	b.n	80057f2 <RCC_GetSysClockFreq+0x46>
    }
    else if(RCC_SYSCLKSOURCE_HSE == clk_src)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d102      	bne.n	80057e6 <RCC_GetSysClockFreq+0x3a>
    {
        sys_clk_freq = 8000000; // HSE
 80057e0:	4b14      	ldr	r3, [pc, #80]	@ (8005834 <RCC_GetSysClockFreq+0x88>)
 80057e2:	60fb      	str	r3, [r7, #12]
 80057e4:	e005      	b.n	80057f2 <RCC_GetSysClockFreq+0x46>
    }
    else if(RCC_SYSCLKSOURCE_PLLCLK == clk_src)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d102      	bne.n	80057f2 <RCC_GetSysClockFreq+0x46>
    {
        sys_clk_freq = RCC_GetPLLOutputClock(); // PLL
 80057ec:	f000 f826 	bl	800583c <RCC_GetPLLOutputClock>
 80057f0:	60f8      	str	r0, [r7, #12]
    }

    // Get the AHB prescaler
    temp = RCC->CFGR.bit.hpre;
 80057f2:	4b0e      	ldr	r3, [pc, #56]	@ (800582c <RCC_GetSysClockFreq+0x80>)
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	603b      	str	r3, [r7, #0]

    if(temp < 8)
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	2b07      	cmp	r3, #7
 8005802:	d802      	bhi.n	800580a <RCC_GetSysClockFreq+0x5e>
    {
        ahb_prescaler = 1;
 8005804:	2301      	movs	r3, #1
 8005806:	60bb      	str	r3, [r7, #8]
 8005808:	e005      	b.n	8005816 <RCC_GetSysClockFreq+0x6a>
    }
    else
    {
        ahb_prescaler = a_AHB_Prescaler[temp-8];
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	3b08      	subs	r3, #8
 800580e:	4a0a      	ldr	r2, [pc, #40]	@ (8005838 <RCC_GetSysClockFreq+0x8c>)
 8005810:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005814:	60bb      	str	r3, [r7, #8]
    }

    sys_clk_freq /= ahb_prescaler;
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	fbb2 f3f3 	udiv	r3, r2, r3
 800581e:	60fb      	str	r3, [r7, #12]

    return sys_clk_freq;
 8005820:	68fb      	ldr	r3, [r7, #12]
}
 8005822:	4618      	mov	r0, r3
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	40023800 	.word	0x40023800
 8005830:	00f42400 	.word	0x00f42400
 8005834:	007a1200 	.word	0x007a1200
 8005838:	2000000c 	.word	0x2000000c

0800583c <RCC_GetPLLOutputClock>:
/* @return				- PLL output frequency															*/
/*																										*/
/* @Note				- none																			*/
/********************************************************************************************************/
uint32_t RCC_GetPLLOutputClock(void)
{
 800583c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005840:	b086      	sub	sp, #24
 8005842:	af00      	add	r7, sp, #0
    uint32_t pll_clk_src;
    uint64_t pll_input_freq, pll_output_freq;

    // Calculate the PLL input frequency
    pll_clk_src = RCC->PLLCFGR.bit.pllsrc;
 8005844:	4c36      	ldr	r4, [pc, #216]	@ (8005920 <RCC_GetPLLOutputClock+0xe4>)
 8005846:	6864      	ldr	r4, [r4, #4]
 8005848:	f3c4 5480 	ubfx	r4, r4, #22, #1
 800584c:	b2e4      	uxtb	r4, r4
 800584e:	60bc      	str	r4, [r7, #8]

    /* Determine the input frequency for the PLL */
    if (RCC_PLLCFGR_PLLSRC_HSI == pll_clk_src)
 8005850:	68bc      	ldr	r4, [r7, #8]
 8005852:	2c00      	cmp	r4, #0
 8005854:	d105      	bne.n	8005862 <RCC_GetPLLOutputClock+0x26>
    {	//HSI = 0
        pll_input_freq = HSI_VALUE;
 8005856:	4c33      	ldr	r4, [pc, #204]	@ (8005924 <RCC_GetPLLOutputClock+0xe8>)
 8005858:	f04f 0500 	mov.w	r5, #0
 800585c:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8005860:	e00e      	b.n	8005880 <RCC_GetPLLOutputClock+0x44>
    }
    else if (RCC_PLLCFGR_PLLSRC_HSE == pll_clk_src)
 8005862:	68bc      	ldr	r4, [r7, #8]
 8005864:	2c01      	cmp	r4, #1
 8005866:	d105      	bne.n	8005874 <RCC_GetPLLOutputClock+0x38>
    {
       /* Get the HSE oscillator frequency */
       pll_input_freq = HSE_VALUE;
 8005868:	4c2f      	ldr	r4, [pc, #188]	@ (8005928 <RCC_GetPLLOutputClock+0xec>)
 800586a:	f04f 0500 	mov.w	r5, #0
 800586e:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8005872:	e005      	b.n	8005880 <RCC_GetPLLOutputClock+0x44>
    }
    else
    {
       /* Invalid PLL source, set frequency to 0 */
       pll_input_freq = 0;
 8005874:	f04f 0400 	mov.w	r4, #0
 8005878:	f04f 0500 	mov.w	r5, #0
 800587c:	e9c7 4504 	strd	r4, r5, [r7, #16]
    }

    uint32_t pllp_val;
    switch (RCC->PLLCFGR.bit.pllp)
 8005880:	4c27      	ldr	r4, [pc, #156]	@ (8005920 <RCC_GetPLLOutputClock+0xe4>)
 8005882:	6864      	ldr	r4, [r4, #4]
 8005884:	f3c4 4401 	ubfx	r4, r4, #16, #2
 8005888:	b2e4      	uxtb	r4, r4
 800588a:	2c03      	cmp	r4, #3
 800588c:	d816      	bhi.n	80058bc <RCC_GetPLLOutputClock+0x80>
 800588e:	a501      	add	r5, pc, #4	@ (adr r5, 8005894 <RCC_GetPLLOutputClock+0x58>)
 8005890:	f855 f024 	ldr.w	pc, [r5, r4, lsl #2]
 8005894:	080058a5 	.word	0x080058a5
 8005898:	080058ab 	.word	0x080058ab
 800589c:	080058b1 	.word	0x080058b1
 80058a0:	080058b7 	.word	0x080058b7
    {
		case 0:
		{
			pllp_val = 2; break;
 80058a4:	2402      	movs	r4, #2
 80058a6:	60fc      	str	r4, [r7, #12]
 80058a8:	e00a      	b.n	80058c0 <RCC_GetPLLOutputClock+0x84>
		}
		case 1:
		{
			pllp_val = 4; break;
 80058aa:	2404      	movs	r4, #4
 80058ac:	60fc      	str	r4, [r7, #12]
 80058ae:	e007      	b.n	80058c0 <RCC_GetPLLOutputClock+0x84>
		}
		case 2:
		{
			pllp_val = 6; break;
 80058b0:	2406      	movs	r4, #6
 80058b2:	60fc      	str	r4, [r7, #12]
 80058b4:	e004      	b.n	80058c0 <RCC_GetPLLOutputClock+0x84>
		}
		case 3:
		{
			pllp_val = 8; break;
 80058b6:	2408      	movs	r4, #8
 80058b8:	60fc      	str	r4, [r7, #12]
 80058ba:	e001      	b.n	80058c0 <RCC_GetPLLOutputClock+0x84>
		}
		default: pllp_val = 2; // default case, should not happen
 80058bc:	2402      	movs	r4, #2
 80058be:	60fc      	str	r4, [r7, #12]
    }

    // Calculate the PLL output frequency
    pll_output_freq = (pll_input_freq * (RCC->PLLCFGR.bit.plln)) / ((RCC->PLLCFGR.bit.pllm) * pllp_val);
 80058c0:	4c17      	ldr	r4, [pc, #92]	@ (8005920 <RCC_GetPLLOutputClock+0xe4>)
 80058c2:	6864      	ldr	r4, [r4, #4]
 80058c4:	f3c4 1488 	ubfx	r4, r4, #6, #9
 80058c8:	b2a4      	uxth	r4, r4
 80058ca:	b2a4      	uxth	r4, r4
 80058cc:	2500      	movs	r5, #0
 80058ce:	4622      	mov	r2, r4
 80058d0:	462b      	mov	r3, r5
 80058d2:	693c      	ldr	r4, [r7, #16]
 80058d4:	fb03 f504 	mul.w	r5, r3, r4
 80058d8:	697c      	ldr	r4, [r7, #20]
 80058da:	fb02 f404 	mul.w	r4, r2, r4
 80058de:	442c      	add	r4, r5
 80058e0:	693d      	ldr	r5, [r7, #16]
 80058e2:	fba5 0102 	umull	r0, r1, r5, r2
 80058e6:	1863      	adds	r3, r4, r1
 80058e8:	4619      	mov	r1, r3
 80058ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005920 <RCC_GetPLLOutputClock+0xe4>)
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	461a      	mov	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	fb02 f303 	mul.w	r3, r2, r3
 80058fc:	2200      	movs	r2, #0
 80058fe:	4698      	mov	r8, r3
 8005900:	4691      	mov	r9, r2
 8005902:	4642      	mov	r2, r8
 8005904:	464b      	mov	r3, r9
 8005906:	f7fa fc5f 	bl	80001c8 <__aeabi_uldivmod>
 800590a:	4602      	mov	r2, r0
 800590c:	460b      	mov	r3, r1
 800590e:	e9c7 2300 	strd	r2, r3, [r7]


    return pll_output_freq;
 8005912:	683b      	ldr	r3, [r7, #0]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3718      	adds	r7, #24
 8005918:	46bd      	mov	sp, r7
 800591a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800591e:	bf00      	nop
 8005920:	40023800 	.word	0x40023800
 8005924:	00f42400 	.word	0x00f42400
 8005928:	007a1200 	.word	0x007a1200

0800592c <RCC_MCOConfig>:
/* @return				- none																			*/
/*																										*/
/* @Note				- PA8/PC9 should be configured in alternate function mode.						*/
/********************************************************************************************************/
void RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b08c      	sub	sp, #48	@ 0x30
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
	GPIO_Handle_t MCO1;
	GPIO_Handle_t MCO2;

	if(RCC_MCO1 == RCC_MCOx)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d12a      	bne.n	8005994 <RCC_MCOConfig+0x68>
	{
		//MCO1 configuration

		MCO1.pGPIOx = GPIOA;
 800593e:	4b2b      	ldr	r3, [pc, #172]	@ (80059ec <RCC_MCOConfig+0xc0>)
 8005940:	623b      	str	r3, [r7, #32]
		MCO1.GPIO_Config.PinMode = GPIO_MODE_AF;
 8005942:	2302      	movs	r3, #2
 8005944:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
		MCO1.GPIO_Config.PinAltFuncMode = 0;
 8005948:	2300      	movs	r3, #0
 800594a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
		MCO1.GPIO_Config.PinOPType = GPIO_OUTPUT_PP;
 800594e:	2300      	movs	r3, #0
 8005950:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		MCO1.GPIO_Config.PinPuPdControl = GPIO_PIN_NO_PUPD;
 8005954:	2300      	movs	r3, #0
 8005956:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
		MCO1.GPIO_Config.PinSpeed = GPIO_SPEED_FAST;
 800595a:	2302      	movs	r3, #2
 800595c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		MCO1.GPIO_Config.PinNumber = GPIO_PIN_8;
 8005960:	2308      	movs	r3, #8
 8005962:	627b      	str	r3, [r7, #36]	@ 0x24

		GPIO_Init(&MCO1);
 8005964:	f107 0320 	add.w	r3, r7, #32
 8005968:	4618      	mov	r0, r3
 800596a:	f7ff fb6f 	bl	800504c <GPIO_Init>

		RCC->CFGR.bit.mco1 = RCC_MCOSource;
 800596e:	4a20      	ldr	r2, [pc, #128]	@ (80059f0 <RCC_MCOConfig+0xc4>)
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	f003 0303 	and.w	r3, r3, #3
 8005976:	b2d9      	uxtb	r1, r3
 8005978:	6893      	ldr	r3, [r2, #8]
 800597a:	f361 5356 	bfi	r3, r1, #21, #2
 800597e:	6093      	str	r3, [r2, #8]
		RCC->CFGR.bit.mco1pre = RCC_MCODiv;
 8005980:	4a1b      	ldr	r2, [pc, #108]	@ (80059f0 <RCC_MCOConfig+0xc4>)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f003 0307 	and.w	r3, r3, #7
 8005988:	b2d9      	uxtb	r1, r3
 800598a:	6893      	ldr	r3, [r2, #8]
 800598c:	f361 631a 	bfi	r3, r1, #24, #3
 8005990:	6093      	str	r3, [r2, #8]
		GPIO_Init(&MCO2);

		RCC->CFGR.bit.mco2 = RCC_MCOSource;
		RCC->CFGR.bit.mco2pre = RCC_MCODiv;
	}
}
 8005992:	e027      	b.n	80059e4 <RCC_MCOConfig+0xb8>
	else if(RCC_MCO2 == RCC_MCOx)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d124      	bne.n	80059e4 <RCC_MCOConfig+0xb8>
		MCO2.pGPIOx = GPIOC;
 800599a:	4b16      	ldr	r3, [pc, #88]	@ (80059f4 <RCC_MCOConfig+0xc8>)
 800599c:	613b      	str	r3, [r7, #16]
		MCO2.GPIO_Config.PinMode = GPIO_MODE_AF;
 800599e:	2302      	movs	r3, #2
 80059a0:	763b      	strb	r3, [r7, #24]
		MCO2.GPIO_Config.PinAltFuncMode = 0;
 80059a2:	2300      	movs	r3, #0
 80059a4:	773b      	strb	r3, [r7, #28]
		MCO2.GPIO_Config.PinOPType = GPIO_OUTPUT_PP;
 80059a6:	2300      	movs	r3, #0
 80059a8:	76fb      	strb	r3, [r7, #27]
		MCO2.GPIO_Config.PinPuPdControl = GPIO_PIN_NO_PUPD;
 80059aa:	2300      	movs	r3, #0
 80059ac:	76bb      	strb	r3, [r7, #26]
		MCO2.GPIO_Config.PinSpeed = GPIO_SPEED_FAST;
 80059ae:	2302      	movs	r3, #2
 80059b0:	767b      	strb	r3, [r7, #25]
		MCO2.GPIO_Config.PinNumber = GPIO_PIN_9;
 80059b2:	2309      	movs	r3, #9
 80059b4:	617b      	str	r3, [r7, #20]
		GPIO_Init(&MCO2);
 80059b6:	f107 0310 	add.w	r3, r7, #16
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7ff fb46 	bl	800504c <GPIO_Init>
		RCC->CFGR.bit.mco2 = RCC_MCOSource;
 80059c0:	4a0b      	ldr	r2, [pc, #44]	@ (80059f0 <RCC_MCOConfig+0xc4>)
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	f003 0303 	and.w	r3, r3, #3
 80059c8:	b2d9      	uxtb	r1, r3
 80059ca:	6893      	ldr	r3, [r2, #8]
 80059cc:	f361 739f 	bfi	r3, r1, #30, #2
 80059d0:	6093      	str	r3, [r2, #8]
		RCC->CFGR.bit.mco2pre = RCC_MCODiv;
 80059d2:	4a07      	ldr	r2, [pc, #28]	@ (80059f0 <RCC_MCOConfig+0xc4>)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f003 0307 	and.w	r3, r3, #7
 80059da:	b2d9      	uxtb	r1, r3
 80059dc:	6893      	ldr	r3, [r2, #8]
 80059de:	f361 63dd 	bfi	r3, r1, #27, #3
 80059e2:	6093      	str	r3, [r2, #8]
}
 80059e4:	bf00      	nop
 80059e6:	3730      	adds	r7, #48	@ 0x30
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	40020000 	.word	0x40020000
 80059f0:	40023800 	.word	0x40023800
 80059f4:	40020800 	.word	0x40020800

080059f8 <TIM1_Config>:
#include <simple_delay.h>
#include <stm32f407xx.h>
#include <stm32f4xx.h>

void TIM1_Config(void)
{
 80059f8:	b480      	push	{r7}
 80059fa:	af00      	add	r7, sp, #0
	RCC->APB2ENR.bit.tim1en = ENABLE;  	//TIM1 EN
 80059fc:	4a11      	ldr	r2, [pc, #68]	@ (8005a44 <TIM1_Config+0x4c>)
 80059fe:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8005a00:	f043 0301 	orr.w	r3, r3, #1
 8005a04:	6453      	str	r3, [r2, #68]	@ 0x44
	TIM1->PSC = 167; 					// ~1 uS delay
 8005a06:	4b10      	ldr	r3, [pc, #64]	@ (8005a48 <TIM1_Config+0x50>)
 8005a08:	22a7      	movs	r2, #167	@ 0xa7
 8005a0a:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM1->ARR |= 0xFFFF; 				//all bits set to 1
 8005a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8005a48 <TIM1_Config+0x50>)
 8005a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a10:	4a0d      	ldr	r2, [pc, #52]	@ (8005a48 <TIM1_Config+0x50>)
 8005a12:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8005a16:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8005a1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM1->CR1.bit.cen = ENABLE; 		//timer counter EN
 8005a1c:	4a0a      	ldr	r2, [pc, #40]	@ (8005a48 <TIM1_Config+0x50>)
 8005a1e:	8813      	ldrh	r3, [r2, #0]
 8005a20:	f043 0301 	orr.w	r3, r3, #1
 8005a24:	8013      	strh	r3, [r2, #0]

	while(SET != TIM1->SR.bit.uif)
 8005a26:	bf00      	nop
 8005a28:	4b07      	ldr	r3, [pc, #28]	@ (8005a48 <TIM1_Config+0x50>)
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d1f8      	bne.n	8005a28 <TIM1_Config+0x30>
	{
		//Update interrupt pending. This bit is set by hardware when the registers are updated
	}
}
 8005a36:	bf00      	nop
 8005a38:	bf00      	nop
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	40023800 	.word	0x40023800
 8005a48:	40010000 	.word	0x40010000

08005a4c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8005a50:	4904      	ldr	r1, [pc, #16]	@ (8005a64 <MX_FATFS_Init+0x18>)
 8005a52:	4805      	ldr	r0, [pc, #20]	@ (8005a68 <MX_FATFS_Init+0x1c>)
 8005a54:	f004 ff8e 	bl	800a974 <FATFS_LinkDriver>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	4b03      	ldr	r3, [pc, #12]	@ (8005a6c <MX_FATFS_Init+0x20>)
 8005a5e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005a60:	bf00      	nop
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	20001198 	.word	0x20001198
 8005a68:	0800ba60 	.word	0x0800ba60
 8005a6c:	20001194 	.word	0x20001194

08005a70 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005a70:	b480      	push	{r7}
 8005a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005a74:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	4603      	mov	r3, r0
 8005a88:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8005aa6:	79fb      	ldrb	r3, [r7, #7]
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	4808      	ldr	r0, [pc, #32]	@ (8005acc <USBH_status+0x34>)
 8005aac:	f000 fe36 	bl	800671c <USBH_MSC_UnitIsReady>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <USBH_status+0x24>
  {
    res = RES_OK;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	73fb      	strb	r3, [r7, #15]
 8005aba:	e001      	b.n	8005ac0 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	200011d0 	.word	0x200011d0

08005ad0 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b094      	sub	sp, #80	@ 0x50
 8005ad4:	af02      	add	r7, sp, #8
 8005ad6:	60b9      	str	r1, [r7, #8]
 8005ad8:	607a      	str	r2, [r7, #4]
 8005ada:	603b      	str	r3, [r7, #0]
 8005adc:	4603      	mov	r3, r0
 8005ade:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8005ae6:	7bf9      	ldrb	r1, [r7, #15]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	4813      	ldr	r0, [pc, #76]	@ (8005b40 <USBH_read+0x70>)
 8005af2:	f000 fe5d 	bl	80067b0 <USBH_MSC_Read>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d103      	bne.n	8005b04 <USBH_read+0x34>
  {
    res = RES_OK;
 8005afc:	2300      	movs	r3, #0
 8005afe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005b02:	e017      	b.n	8005b34 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005b04:	f107 0210 	add.w	r2, r7, #16
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	480c      	ldr	r0, [pc, #48]	@ (8005b40 <USBH_read+0x70>)
 8005b0e:	f000 fe2b 	bl	8006768 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8005b12:	7f7b      	ldrb	r3, [r7, #29]
 8005b14:	2b3a      	cmp	r3, #58	@ 0x3a
 8005b16:	d005      	beq.n	8005b24 <USBH_read+0x54>
 8005b18:	2b3a      	cmp	r3, #58	@ 0x3a
 8005b1a:	dc07      	bgt.n	8005b2c <USBH_read+0x5c>
 8005b1c:	2b04      	cmp	r3, #4
 8005b1e:	d001      	beq.n	8005b24 <USBH_read+0x54>
 8005b20:	2b28      	cmp	r3, #40	@ 0x28
 8005b22:	d103      	bne.n	8005b2c <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8005b24:	2303      	movs	r3, #3
 8005b26:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8005b2a:	e003      	b.n	8005b34 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8005b32:	bf00      	nop
    }
  }

  return res;
 8005b34:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3748      	adds	r7, #72	@ 0x48
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	200011d0 	.word	0x200011d0

08005b44 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b094      	sub	sp, #80	@ 0x50
 8005b48:	af02      	add	r7, sp, #8
 8005b4a:	60b9      	str	r1, [r7, #8]
 8005b4c:	607a      	str	r2, [r7, #4]
 8005b4e:	603b      	str	r3, [r7, #0]
 8005b50:	4603      	mov	r3, r0
 8005b52:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8005b5a:	7bf9      	ldrb	r1, [r7, #15]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	4817      	ldr	r0, [pc, #92]	@ (8005bc4 <USBH_write+0x80>)
 8005b66:	f000 fe8c 	bl	8006882 <USBH_MSC_Write>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d103      	bne.n	8005b78 <USBH_write+0x34>
  {
    res = RES_OK;
 8005b70:	2300      	movs	r3, #0
 8005b72:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8005b76:	e01f      	b.n	8005bb8 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005b78:	f107 0210 	add.w	r2, r7, #16
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
 8005b7e:	4619      	mov	r1, r3
 8005b80:	4810      	ldr	r0, [pc, #64]	@ (8005bc4 <USBH_write+0x80>)
 8005b82:	f000 fdf1 	bl	8006768 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8005b86:	7f7b      	ldrb	r3, [r7, #29]
 8005b88:	2b3a      	cmp	r3, #58	@ 0x3a
 8005b8a:	d00d      	beq.n	8005ba8 <USBH_write+0x64>
 8005b8c:	2b3a      	cmp	r3, #58	@ 0x3a
 8005b8e:	dc0f      	bgt.n	8005bb0 <USBH_write+0x6c>
 8005b90:	2b28      	cmp	r3, #40	@ 0x28
 8005b92:	d009      	beq.n	8005ba8 <USBH_write+0x64>
 8005b94:	2b28      	cmp	r3, #40	@ 0x28
 8005b96:	dc0b      	bgt.n	8005bb0 <USBH_write+0x6c>
 8005b98:	2b04      	cmp	r3, #4
 8005b9a:	d005      	beq.n	8005ba8 <USBH_write+0x64>
 8005b9c:	2b27      	cmp	r3, #39	@ 0x27
 8005b9e:	d107      	bne.n	8005bb0 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8005ba6:	e007      	b.n	8005bb8 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8005bae:	e003      	b.n	8005bb8 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8005bb6:	bf00      	nop
    }
  }

  return res;
 8005bb8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3748      	adds	r7, #72	@ 0x48
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	200011d0 	.word	0x200011d0

08005bc8 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b090      	sub	sp, #64	@ 0x40
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	4603      	mov	r3, r0
 8005bd0:	603a      	str	r2, [r7, #0]
 8005bd2:	71fb      	strb	r3, [r7, #7]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8005bde:	79bb      	ldrb	r3, [r7, #6]
 8005be0:	2b03      	cmp	r3, #3
 8005be2:	d852      	bhi.n	8005c8a <USBH_ioctl+0xc2>
 8005be4:	a201      	add	r2, pc, #4	@ (adr r2, 8005bec <USBH_ioctl+0x24>)
 8005be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bea:	bf00      	nop
 8005bec:	08005bfd 	.word	0x08005bfd
 8005bf0:	08005c05 	.word	0x08005c05
 8005bf4:	08005c2f 	.word	0x08005c2f
 8005bf8:	08005c5b 	.word	0x08005c5b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8005c02:	e045      	b.n	8005c90 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005c04:	f107 0208 	add.w	r2, r7, #8
 8005c08:	79fb      	ldrb	r3, [r7, #7]
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	4823      	ldr	r0, [pc, #140]	@ (8005c9c <USBH_ioctl+0xd4>)
 8005c0e:	f000 fdab 	bl	8006768 <USBH_MSC_GetLUNInfo>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d106      	bne.n	8005c26 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005c24:	e034      	b.n	8005c90 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8005c2c:	e030      	b.n	8005c90 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005c2e:	f107 0208 	add.w	r2, r7, #8
 8005c32:	79fb      	ldrb	r3, [r7, #7]
 8005c34:	4619      	mov	r1, r3
 8005c36:	4819      	ldr	r0, [pc, #100]	@ (8005c9c <USBH_ioctl+0xd4>)
 8005c38:	f000 fd96 	bl	8006768 <USBH_MSC_GetLUNInfo>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d107      	bne.n	8005c52 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8005c42:	8a3b      	ldrh	r3, [r7, #16]
 8005c44:	461a      	mov	r2, r3
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005c50:	e01e      	b.n	8005c90 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8005c58:	e01a      	b.n	8005c90 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005c5a:	f107 0208 	add.w	r2, r7, #8
 8005c5e:	79fb      	ldrb	r3, [r7, #7]
 8005c60:	4619      	mov	r1, r3
 8005c62:	480e      	ldr	r0, [pc, #56]	@ (8005c9c <USBH_ioctl+0xd4>)
 8005c64:	f000 fd80 	bl	8006768 <USBH_MSC_GetLUNInfo>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d109      	bne.n	8005c82 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8005c6e:	8a3b      	ldrh	r3, [r7, #16]
 8005c70:	0a5b      	lsrs	r3, r3, #9
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	461a      	mov	r2, r3
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005c80:	e006      	b.n	8005c90 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8005c88:	e002      	b.n	8005c90 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8005c8a:	2304      	movs	r3, #4
 8005c8c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return res;
 8005c90:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3740      	adds	r7, #64	@ 0x40
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	200011d0 	.word	0x200011d0

08005ca0 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8005ca4:	bf00      	nop
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005cae:	b590      	push	{r4, r7, lr}
 8005cb0:	b089      	sub	sp, #36	@ 0x24
 8005cb2:	af04      	add	r7, sp, #16
 8005cb4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005cbc:	7919      	ldrb	r1, [r3, #4]
 8005cbe:	2350      	movs	r3, #80	@ 0x50
 8005cc0:	2206      	movs	r2, #6
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f001 fc86 	bl	80075d4 <USBH_FindInterface>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8005ccc:	7bfb      	ldrb	r3, [r7, #15]
 8005cce:	2bff      	cmp	r3, #255	@ 0xff
 8005cd0:	d002      	beq.n	8005cd8 <USBH_MSC_InterfaceInit+0x2a>
 8005cd2:	7bfb      	ldrb	r3, [r7, #15]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d901      	bls.n	8005cdc <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005cd8:	2302      	movs	r3, #2
 8005cda:	e106      	b.n	8005eea <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
 8005cde:	4619      	mov	r1, r3
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f001 fc5b 	bl	800759c <USBH_SelectInterface>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005cea:	7bbb      	ldrb	r3, [r7, #14]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	e0fa      	b.n	8005eea <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8005cfa:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005cfe:	f005 f985 	bl	800b00c <malloc>
 8005d02:	4603      	mov	r3, r0
 8005d04:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8005d16:	2302      	movs	r3, #2
 8005d18:	e0e7      	b.n	8005eea <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8005d1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d1e:	2100      	movs	r1, #0
 8005d20:	68b8      	ldr	r0, [r7, #8]
 8005d22:	f005 fc29 	bl	800b578 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005d26:	7bfb      	ldrb	r3, [r7, #15]
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	211a      	movs	r1, #26
 8005d2c:	fb01 f303 	mul.w	r3, r1, r3
 8005d30:	4413      	add	r3, r2
 8005d32:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	b25b      	sxtb	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	da16      	bge.n	8005d6c <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005d3e:	7bfb      	ldrb	r3, [r7, #15]
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	211a      	movs	r1, #26
 8005d44:	fb01 f303 	mul.w	r3, r1, r3
 8005d48:	4413      	add	r3, r2
 8005d4a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8005d4e:	781a      	ldrb	r2, [r3, #0]
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005d54:	7bfb      	ldrb	r3, [r7, #15]
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	211a      	movs	r1, #26
 8005d5a:	fb01 f303 	mul.w	r3, r1, r3
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005d64:	881a      	ldrh	r2, [r3, #0]
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	815a      	strh	r2, [r3, #10]
 8005d6a:	e015      	b.n	8005d98 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005d6c:	7bfb      	ldrb	r3, [r7, #15]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	211a      	movs	r1, #26
 8005d72:	fb01 f303 	mul.w	r3, r1, r3
 8005d76:	4413      	add	r3, r2
 8005d78:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8005d7c:	781a      	ldrb	r2, [r3, #0]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005d82:	7bfb      	ldrb	r3, [r7, #15]
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	211a      	movs	r1, #26
 8005d88:	fb01 f303 	mul.w	r3, r1, r3
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005d92:	881a      	ldrh	r2, [r3, #0]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005d98:	7bfb      	ldrb	r3, [r7, #15]
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	211a      	movs	r1, #26
 8005d9e:	fb01 f303 	mul.w	r3, r1, r3
 8005da2:	4413      	add	r3, r2
 8005da4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	b25b      	sxtb	r3, r3
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	da16      	bge.n	8005dde <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005db0:	7bfb      	ldrb	r3, [r7, #15]
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	211a      	movs	r1, #26
 8005db6:	fb01 f303 	mul.w	r3, r1, r3
 8005dba:	4413      	add	r3, r2
 8005dbc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8005dc0:	781a      	ldrb	r2, [r3, #0]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005dc6:	7bfb      	ldrb	r3, [r7, #15]
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	211a      	movs	r1, #26
 8005dcc:	fb01 f303 	mul.w	r3, r1, r3
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8005dd6:	881a      	ldrh	r2, [r3, #0]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	815a      	strh	r2, [r3, #10]
 8005ddc:	e015      	b.n	8005e0a <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005dde:	7bfb      	ldrb	r3, [r7, #15]
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	211a      	movs	r1, #26
 8005de4:	fb01 f303 	mul.w	r3, r1, r3
 8005de8:	4413      	add	r3, r2
 8005dea:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8005dee:	781a      	ldrb	r2, [r3, #0]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	211a      	movs	r1, #26
 8005dfa:	fb01 f303 	mul.w	r3, r1, r3
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8005e04:	881a      	ldrh	r2, [r3, #0]
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	2200      	movs	r2, #0
 8005e14:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	799b      	ldrb	r3, [r3, #6]
 8005e20:	4619      	mov	r1, r3
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f002 ff63 	bl	8008cee <USBH_AllocPipe>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	79db      	ldrb	r3, [r3, #7]
 8005e34:	4619      	mov	r1, r3
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f002 ff59 	bl	8008cee <USBH_AllocPipe>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	461a      	mov	r2, r3
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fdc1 	bl	80069cc <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	799b      	ldrb	r3, [r3, #6]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d01e      	beq.n	8005e90 <USBH_MSC_InterfaceInit+0x1e2>
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	891b      	ldrh	r3, [r3, #8]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d01a      	beq.n	8005e90 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	7959      	ldrb	r1, [r3, #5]
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	7998      	ldrb	r0, [r3, #6]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	8912      	ldrh	r2, [r2, #8]
 8005e72:	9202      	str	r2, [sp, #8]
 8005e74:	2202      	movs	r2, #2
 8005e76:	9201      	str	r2, [sp, #4]
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	4623      	mov	r3, r4
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f002 ff06 	bl	8008c90 <USBH_OpenPipe>
 8005e84:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	79db      	ldrb	r3, [r3, #7]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d02c      	beq.n	8005ee8 <USBH_MSC_InterfaceInit+0x23a>
 8005e8e:	e001      	b.n	8005e94 <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e02a      	b.n	8005eea <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	895b      	ldrh	r3, [r3, #10]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d025      	beq.n	8005ee8 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	7919      	ldrb	r1, [r3, #4]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	79d8      	ldrb	r0, [r3, #7]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	8952      	ldrh	r2, [r2, #10]
 8005eb4:	9202      	str	r2, [sp, #8]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	9201      	str	r2, [sp, #4]
 8005eba:	9300      	str	r3, [sp, #0]
 8005ebc:	4623      	mov	r3, r4
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f002 fee5 	bl	8008c90 <USBH_OpenPipe>
 8005ec6:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	791b      	ldrb	r3, [r3, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	4619      	mov	r1, r3
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f004 ffe1 	bl	800ae98 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	795b      	ldrb	r3, [r3, #5]
 8005eda:	2200      	movs	r2, #0
 8005edc:	4619      	mov	r1, r3
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f004 ffda 	bl	800ae98 <USBH_LL_SetToggle>

  return USBH_OK;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	e000      	b.n	8005eea <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 8005ee8:	2303      	movs	r3, #3
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3714      	adds	r7, #20
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd90      	pop	{r4, r7, pc}

08005ef2 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b084      	sub	sp, #16
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	795b      	ldrb	r3, [r3, #5]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00e      	beq.n	8005f2a <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	795b      	ldrb	r3, [r3, #5]
 8005f10:	4619      	mov	r1, r3
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f002 fedb 	bl	8008cce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	795b      	ldrb	r3, [r3, #5]
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f002 ff06 	bl	8008d30 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	791b      	ldrb	r3, [r3, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00e      	beq.n	8005f50 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	791b      	ldrb	r3, [r3, #4]
 8005f36:	4619      	mov	r1, r3
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f002 fec8 	bl	8008cce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	791b      	ldrb	r3, [r3, #4]
 8005f42:	4619      	mov	r1, r3
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f002 fef3 	bl	8008d30 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005f56:	69db      	ldr	r3, [r3, #28]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00b      	beq.n	8005f74 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005f62:	69db      	ldr	r3, [r3, #28]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f005 f859 	bl	800b01c <free>
    phost->pActiveClass->pData = 0U;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005f70:	2200      	movs	r2, #0
 8005f72:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b084      	sub	sp, #16
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005f8c:	69db      	ldr	r3, [r3, #28]
 8005f8e:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005f90:	2301      	movs	r3, #1
 8005f92:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	7b9b      	ldrb	r3, [r3, #14]
 8005f98:	2b03      	cmp	r3, #3
 8005f9a:	d041      	beq.n	8006020 <USBH_MSC_ClassRequest+0xa2>
 8005f9c:	2b03      	cmp	r3, #3
 8005f9e:	dc4b      	bgt.n	8006038 <USBH_MSC_ClassRequest+0xba>
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d001      	beq.n	8005fa8 <USBH_MSC_ClassRequest+0x2a>
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d147      	bne.n	8006038 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	4619      	mov	r1, r3
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 fcee 	bl	800698e <USBH_MSC_BOT_REQ_GetMaxLUN>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8005fb6:	7bfb      	ldrb	r3, [r7, #15]
 8005fb8:	2b03      	cmp	r3, #3
 8005fba:	d104      	bne.n	8005fc6 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8005fc6:	7bfb      	ldrb	r3, [r7, #15]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d137      	bne.n	800603c <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d804      	bhi.n	8005fde <USBH_MSC_ClassRequest+0x60>
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	e000      	b.n	8005fe0 <USBH_MSC_ClassRequest+0x62>
 8005fde:	2202      	movs	r2, #2
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	73bb      	strb	r3, [r7, #14]
 8005fe8:	e014      	b.n	8006014 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8005fea:	7bbb      	ldrb	r3, [r7, #14]
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	2134      	movs	r1, #52	@ 0x34
 8005ff0:	fb01 f303 	mul.w	r3, r1, r3
 8005ff4:	4413      	add	r3, r2
 8005ff6:	3392      	adds	r3, #146	@ 0x92
 8005ff8:	2202      	movs	r2, #2
 8005ffa:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8005ffc:	7bbb      	ldrb	r3, [r7, #14]
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	2134      	movs	r1, #52	@ 0x34
 8006002:	fb01 f303 	mul.w	r3, r1, r3
 8006006:	4413      	add	r3, r2
 8006008:	33c1      	adds	r3, #193	@ 0xc1
 800600a:	2200      	movs	r2, #0
 800600c:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800600e:	7bbb      	ldrb	r3, [r7, #14]
 8006010:	3301      	adds	r3, #1
 8006012:	73bb      	strb	r3, [r7, #14]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	7bba      	ldrb	r2, [r7, #14]
 800601a:	429a      	cmp	r2, r3
 800601c:	d3e5      	bcc.n	8005fea <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800601e:	e00d      	b.n	800603c <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8006020:	2100      	movs	r1, #0
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f002 f8ae 	bl	8008184 <USBH_ClrFeature>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d108      	bne.n	8006040 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	7bda      	ldrb	r2, [r3, #15]
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	739a      	strb	r2, [r3, #14]
      }
      break;
 8006036:	e003      	b.n	8006040 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8006038:	bf00      	nop
 800603a:	e002      	b.n	8006042 <USBH_MSC_ClassRequest+0xc4>
      break;
 800603c:	bf00      	nop
 800603e:	e000      	b.n	8006042 <USBH_MSC_ClassRequest+0xc4>
      break;
 8006040:	bf00      	nop
  }

  return status;
 8006042:	7bfb      	ldrb	r3, [r7, #15]
}
 8006044:	4618      	mov	r0, r3
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800605a:	69db      	ldr	r3, [r3, #28]
 800605c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800605e:	2301      	movs	r3, #1
 8006060:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8006062:	2301      	movs	r3, #1
 8006064:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8006066:	2301      	movs	r3, #1
 8006068:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	7b1b      	ldrb	r3, [r3, #12]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d003      	beq.n	800607a <USBH_MSC_Process+0x2e>
 8006072:	2b01      	cmp	r3, #1
 8006074:	f000 826f 	beq.w	8006556 <USBH_MSC_Process+0x50a>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8006078:	e270      	b.n	800655c <USBH_MSC_Process+0x510>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	7812      	ldrb	r2, [r2, #0]
 8006084:	4293      	cmp	r3, r2
 8006086:	f080 824e 	bcs.w	8006526 <USBH_MSC_Process+0x4da>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006090:	4619      	mov	r1, r3
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	2334      	movs	r3, #52	@ 0x34
 8006096:	fb01 f303 	mul.w	r3, r1, r3
 800609a:	4413      	add	r3, r2
 800609c:	3391      	adds	r3, #145	@ 0x91
 800609e:	2201      	movs	r2, #1
 80060a0:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80060a8:	4619      	mov	r1, r3
 80060aa:	693a      	ldr	r2, [r7, #16]
 80060ac:	2334      	movs	r3, #52	@ 0x34
 80060ae:	fb01 f303 	mul.w	r3, r1, r3
 80060b2:	4413      	add	r3, r2
 80060b4:	3390      	adds	r3, #144	@ 0x90
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	2b08      	cmp	r3, #8
 80060ba:	f200 8242 	bhi.w	8006542 <USBH_MSC_Process+0x4f6>
 80060be:	a201      	add	r2, pc, #4	@ (adr r2, 80060c4 <USBH_MSC_Process+0x78>)
 80060c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c4:	080060e9 	.word	0x080060e9
 80060c8:	08006543 	.word	0x08006543
 80060cc:	080061b1 	.word	0x080061b1
 80060d0:	08006335 	.word	0x08006335
 80060d4:	0800610f 	.word	0x0800610f
 80060d8:	08006401 	.word	0x08006401
 80060dc:	08006543 	.word	0x08006543
 80060e0:	08006543 	.word	0x08006543
 80060e4:	08006515 	.word	0x08006515
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80060ee:	4619      	mov	r1, r3
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	2334      	movs	r3, #52	@ 0x34
 80060f4:	fb01 f303 	mul.w	r3, r1, r3
 80060f8:	4413      	add	r3, r2
 80060fa:	3390      	adds	r3, #144	@ 0x90
 80060fc:	2204      	movs	r2, #4
 80060fe:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
            break;
 800610c:	e222      	b.n	8006554 <USBH_MSC_Process+0x508>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006114:	b2d9      	uxtb	r1, r3
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800611c:	461a      	mov	r2, r3
 800611e:	2334      	movs	r3, #52	@ 0x34
 8006120:	fb02 f303 	mul.w	r3, r2, r3
 8006124:	3398      	adds	r3, #152	@ 0x98
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	4413      	add	r3, r2
 800612a:	3307      	adds	r3, #7
 800612c:	461a      	mov	r2, r3
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 ff69 	bl	8007006 <USBH_MSC_SCSI_Inquiry>
 8006134:	4603      	mov	r3, r0
 8006136:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006138:	7bfb      	ldrb	r3, [r7, #15]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10b      	bne.n	8006156 <USBH_MSC_Process+0x10a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006144:	4619      	mov	r1, r3
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	2334      	movs	r3, #52	@ 0x34
 800614a:	fb01 f303 	mul.w	r3, r1, r3
 800614e:	4413      	add	r3, r2
 8006150:	3390      	adds	r3, #144	@ 0x90
 8006152:	2202      	movs	r2, #2
 8006154:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8006156:	7bfb      	ldrb	r3, [r7, #15]
 8006158:	2b02      	cmp	r3, #2
 800615a:	d10c      	bne.n	8006176 <USBH_MSC_Process+0x12a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006162:	4619      	mov	r1, r3
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	2334      	movs	r3, #52	@ 0x34
 8006168:	fb01 f303 	mul.w	r3, r1, r3
 800616c:	4413      	add	r3, r2
 800616e:	3390      	adds	r3, #144	@ 0x90
 8006170:	2205      	movs	r2, #5
 8006172:	701a      	strb	r2, [r3, #0]
            break;
 8006174:	e1e7      	b.n	8006546 <USBH_MSC_Process+0x4fa>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006176:	7bfb      	ldrb	r3, [r7, #15]
 8006178:	2b04      	cmp	r3, #4
 800617a:	f040 81e4 	bne.w	8006546 <USBH_MSC_Process+0x4fa>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006184:	4619      	mov	r1, r3
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	2334      	movs	r3, #52	@ 0x34
 800618a:	fb01 f303 	mul.w	r3, r1, r3
 800618e:	4413      	add	r3, r2
 8006190:	3390      	adds	r3, #144	@ 0x90
 8006192:	2201      	movs	r2, #1
 8006194:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800619c:	4619      	mov	r1, r3
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	2334      	movs	r3, #52	@ 0x34
 80061a2:	fb01 f303 	mul.w	r3, r1, r3
 80061a6:	4413      	add	r3, r2
 80061a8:	3391      	adds	r3, #145	@ 0x91
 80061aa:	2202      	movs	r2, #2
 80061ac:	701a      	strb	r2, [r3, #0]
            break;
 80061ae:	e1ca      	b.n	8006546 <USBH_MSC_Process+0x4fa>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	4619      	mov	r1, r3
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 fe66 	bl	8006e8c <USBH_MSC_SCSI_TestUnitReady>
 80061c0:	4603      	mov	r3, r0
 80061c2:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 80061c4:	7bbb      	ldrb	r3, [r7, #14]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d149      	bne.n	800625e <USBH_MSC_Process+0x212>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80061d0:	4619      	mov	r1, r3
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	2334      	movs	r3, #52	@ 0x34
 80061d6:	fb01 f303 	mul.w	r3, r1, r3
 80061da:	4413      	add	r3, r2
 80061dc:	3392      	adds	r3, #146	@ 0x92
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00c      	beq.n	80061fe <USBH_MSC_Process+0x1b2>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80061ea:	4619      	mov	r1, r3
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	2334      	movs	r3, #52	@ 0x34
 80061f0:	fb01 f303 	mul.w	r3, r1, r3
 80061f4:	4413      	add	r3, r2
 80061f6:	33c1      	adds	r3, #193	@ 0xc1
 80061f8:	2201      	movs	r2, #1
 80061fa:	701a      	strb	r2, [r3, #0]
 80061fc:	e00b      	b.n	8006216 <USBH_MSC_Process+0x1ca>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006204:	4619      	mov	r1, r3
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	2334      	movs	r3, #52	@ 0x34
 800620a:	fb01 f303 	mul.w	r3, r1, r3
 800620e:	4413      	add	r3, r2
 8006210:	33c1      	adds	r3, #193	@ 0xc1
 8006212:	2200      	movs	r2, #0
 8006214:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800621c:	4619      	mov	r1, r3
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	2334      	movs	r3, #52	@ 0x34
 8006222:	fb01 f303 	mul.w	r3, r1, r3
 8006226:	4413      	add	r3, r2
 8006228:	3390      	adds	r3, #144	@ 0x90
 800622a:	2203      	movs	r2, #3
 800622c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006234:	4619      	mov	r1, r3
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	2334      	movs	r3, #52	@ 0x34
 800623a:	fb01 f303 	mul.w	r3, r1, r3
 800623e:	4413      	add	r3, r2
 8006240:	3391      	adds	r3, #145	@ 0x91
 8006242:	2200      	movs	r2, #0
 8006244:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800624c:	4619      	mov	r1, r3
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	2334      	movs	r3, #52	@ 0x34
 8006252:	fb01 f303 	mul.w	r3, r1, r3
 8006256:	4413      	add	r3, r2
 8006258:	3392      	adds	r3, #146	@ 0x92
 800625a:	2200      	movs	r2, #0
 800625c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800625e:	7bbb      	ldrb	r3, [r7, #14]
 8006260:	2b02      	cmp	r3, #2
 8006262:	d14a      	bne.n	80062fa <USBH_MSC_Process+0x2ae>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800626a:	4619      	mov	r1, r3
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	2334      	movs	r3, #52	@ 0x34
 8006270:	fb01 f303 	mul.w	r3, r1, r3
 8006274:	4413      	add	r3, r2
 8006276:	3392      	adds	r3, #146	@ 0x92
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	2b02      	cmp	r3, #2
 800627c:	d00c      	beq.n	8006298 <USBH_MSC_Process+0x24c>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006284:	4619      	mov	r1, r3
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	2334      	movs	r3, #52	@ 0x34
 800628a:	fb01 f303 	mul.w	r3, r1, r3
 800628e:	4413      	add	r3, r2
 8006290:	33c1      	adds	r3, #193	@ 0xc1
 8006292:	2201      	movs	r2, #1
 8006294:	701a      	strb	r2, [r3, #0]
 8006296:	e00b      	b.n	80062b0 <USBH_MSC_Process+0x264>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800629e:	4619      	mov	r1, r3
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	2334      	movs	r3, #52	@ 0x34
 80062a4:	fb01 f303 	mul.w	r3, r1, r3
 80062a8:	4413      	add	r3, r2
 80062aa:	33c1      	adds	r3, #193	@ 0xc1
 80062ac:	2200      	movs	r2, #0
 80062ae:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80062b6:	4619      	mov	r1, r3
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	2334      	movs	r3, #52	@ 0x34
 80062bc:	fb01 f303 	mul.w	r3, r1, r3
 80062c0:	4413      	add	r3, r2
 80062c2:	3390      	adds	r3, #144	@ 0x90
 80062c4:	2205      	movs	r2, #5
 80062c6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80062ce:	4619      	mov	r1, r3
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	2334      	movs	r3, #52	@ 0x34
 80062d4:	fb01 f303 	mul.w	r3, r1, r3
 80062d8:	4413      	add	r3, r2
 80062da:	3391      	adds	r3, #145	@ 0x91
 80062dc:	2201      	movs	r2, #1
 80062de:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80062e6:	4619      	mov	r1, r3
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	2334      	movs	r3, #52	@ 0x34
 80062ec:	fb01 f303 	mul.w	r3, r1, r3
 80062f0:	4413      	add	r3, r2
 80062f2:	3392      	adds	r3, #146	@ 0x92
 80062f4:	2202      	movs	r2, #2
 80062f6:	701a      	strb	r2, [r3, #0]
            break;
 80062f8:	e127      	b.n	800654a <USBH_MSC_Process+0x4fe>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 80062fa:	7bbb      	ldrb	r3, [r7, #14]
 80062fc:	2b04      	cmp	r3, #4
 80062fe:	f040 8124 	bne.w	800654a <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006308:	4619      	mov	r1, r3
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	2334      	movs	r3, #52	@ 0x34
 800630e:	fb01 f303 	mul.w	r3, r1, r3
 8006312:	4413      	add	r3, r2
 8006314:	3390      	adds	r3, #144	@ 0x90
 8006316:	2201      	movs	r2, #1
 8006318:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006320:	4619      	mov	r1, r3
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	2334      	movs	r3, #52	@ 0x34
 8006326:	fb01 f303 	mul.w	r3, r1, r3
 800632a:	4413      	add	r3, r2
 800632c:	3391      	adds	r3, #145	@ 0x91
 800632e:	2202      	movs	r2, #2
 8006330:	701a      	strb	r2, [r3, #0]
            break;
 8006332:	e10a      	b.n	800654a <USBH_MSC_Process+0x4fe>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity);
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800633a:	b2d9      	uxtb	r1, r3
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006342:	461a      	mov	r2, r3
 8006344:	2334      	movs	r3, #52	@ 0x34
 8006346:	fb02 f303 	mul.w	r3, r2, r3
 800634a:	3390      	adds	r3, #144	@ 0x90
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	4413      	add	r3, r2
 8006350:	3304      	adds	r3, #4
 8006352:	461a      	mov	r2, r3
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fddc 	bl	8006f12 <USBH_MSC_SCSI_ReadCapacity>
 800635a:	4603      	mov	r3, r0
 800635c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800635e:	7bfb      	ldrb	r3, [r7, #15]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d120      	bne.n	80063a6 <USBH_MSC_Process+0x35a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800636a:	4619      	mov	r1, r3
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	2334      	movs	r3, #52	@ 0x34
 8006370:	fb01 f303 	mul.w	r3, r1, r3
 8006374:	4413      	add	r3, r2
 8006376:	3390      	adds	r3, #144	@ 0x90
 8006378:	2201      	movs	r2, #1
 800637a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006382:	4619      	mov	r1, r3
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	2334      	movs	r3, #52	@ 0x34
 8006388:	fb01 f303 	mul.w	r3, r1, r3
 800638c:	4413      	add	r3, r2
 800638e:	3391      	adds	r3, #145	@ 0x91
 8006390:	2200      	movs	r2, #0
 8006392:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800639a:	3301      	adds	r3, #1
 800639c:	b29a      	uxth	r2, r3
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 80063a4:	e0d3      	b.n	800654e <USBH_MSC_Process+0x502>
            else if (scsi_status == USBH_FAIL)
 80063a6:	7bfb      	ldrb	r3, [r7, #15]
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d10c      	bne.n	80063c6 <USBH_MSC_Process+0x37a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80063b2:	4619      	mov	r1, r3
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	2334      	movs	r3, #52	@ 0x34
 80063b8:	fb01 f303 	mul.w	r3, r1, r3
 80063bc:	4413      	add	r3, r2
 80063be:	3390      	adds	r3, #144	@ 0x90
 80063c0:	2205      	movs	r2, #5
 80063c2:	701a      	strb	r2, [r3, #0]
            break;
 80063c4:	e0c3      	b.n	800654e <USBH_MSC_Process+0x502>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80063c6:	7bfb      	ldrb	r3, [r7, #15]
 80063c8:	2b04      	cmp	r3, #4
 80063ca:	f040 80c0 	bne.w	800654e <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80063d4:	4619      	mov	r1, r3
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	2334      	movs	r3, #52	@ 0x34
 80063da:	fb01 f303 	mul.w	r3, r1, r3
 80063de:	4413      	add	r3, r2
 80063e0:	3390      	adds	r3, #144	@ 0x90
 80063e2:	2201      	movs	r2, #1
 80063e4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80063ec:	4619      	mov	r1, r3
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	2334      	movs	r3, #52	@ 0x34
 80063f2:	fb01 f303 	mul.w	r3, r1, r3
 80063f6:	4413      	add	r3, r2
 80063f8:	3391      	adds	r3, #145	@ 0x91
 80063fa:	2202      	movs	r2, #2
 80063fc:	701a      	strb	r2, [r3, #0]
            break;
 80063fe:	e0a6      	b.n	800654e <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006406:	b2d9      	uxtb	r1, r3
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800640e:	461a      	mov	r2, r3
 8006410:	2334      	movs	r3, #52	@ 0x34
 8006412:	fb02 f303 	mul.w	r3, r2, r3
 8006416:	3398      	adds	r3, #152	@ 0x98
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	4413      	add	r3, r2
 800641c:	3304      	adds	r3, #4
 800641e:	461a      	mov	r2, r3
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 fe95 	bl	8007150 <USBH_MSC_SCSI_RequestSense>
 8006426:	4603      	mov	r3, r0
 8006428:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800642a:	7bfb      	ldrb	r3, [r7, #15]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d145      	bne.n	80064bc <USBH_MSC_Process+0x470>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006436:	4619      	mov	r1, r3
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	2334      	movs	r3, #52	@ 0x34
 800643c:	fb01 f303 	mul.w	r3, r1, r3
 8006440:	4413      	add	r3, r2
 8006442:	339c      	adds	r3, #156	@ 0x9c
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	2b06      	cmp	r3, #6
 8006448:	d00c      	beq.n	8006464 <USBH_MSC_Process+0x418>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006450:	4619      	mov	r1, r3
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	2334      	movs	r3, #52	@ 0x34
 8006456:	fb01 f303 	mul.w	r3, r1, r3
 800645a:	4413      	add	r3, r2
 800645c:	339c      	adds	r3, #156	@ 0x9c
 800645e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8006460:	2b02      	cmp	r3, #2
 8006462:	d117      	bne.n	8006494 <USBH_MSC_Process+0x448>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	f242 720f 	movw	r2, #9999	@ 0x270f
 8006476:	4293      	cmp	r3, r2
 8006478:	d80c      	bhi.n	8006494 <USBH_MSC_Process+0x448>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006480:	4619      	mov	r1, r3
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	2334      	movs	r3, #52	@ 0x34
 8006486:	fb01 f303 	mul.w	r3, r1, r3
 800648a:	4413      	add	r3, r2
 800648c:	3390      	adds	r3, #144	@ 0x90
 800648e:	2202      	movs	r2, #2
 8006490:	701a      	strb	r2, [r3, #0]
                  break;
 8006492:	e05f      	b.n	8006554 <USBH_MSC_Process+0x508>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800649a:	4619      	mov	r1, r3
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	2334      	movs	r3, #52	@ 0x34
 80064a0:	fb01 f303 	mul.w	r3, r1, r3
 80064a4:	4413      	add	r3, r2
 80064a6:	3390      	adds	r3, #144	@ 0x90
 80064a8:	2201      	movs	r2, #1
 80064aa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80064b2:	3301      	adds	r3, #1
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            if (scsi_status == USBH_FAIL)
 80064bc:	7bfb      	ldrb	r3, [r7, #15]
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d10c      	bne.n	80064dc <USBH_MSC_Process+0x490>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80064c8:	4619      	mov	r1, r3
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	2334      	movs	r3, #52	@ 0x34
 80064ce:	fb01 f303 	mul.w	r3, r1, r3
 80064d2:	4413      	add	r3, r2
 80064d4:	3390      	adds	r3, #144	@ 0x90
 80064d6:	2208      	movs	r2, #8
 80064d8:	701a      	strb	r2, [r3, #0]
            break;
 80064da:	e03a      	b.n	8006552 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80064dc:	7bfb      	ldrb	r3, [r7, #15]
 80064de:	2b04      	cmp	r3, #4
 80064e0:	d137      	bne.n	8006552 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80064e8:	4619      	mov	r1, r3
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	2334      	movs	r3, #52	@ 0x34
 80064ee:	fb01 f303 	mul.w	r3, r1, r3
 80064f2:	4413      	add	r3, r2
 80064f4:	3390      	adds	r3, #144	@ 0x90
 80064f6:	2201      	movs	r2, #1
 80064f8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006500:	4619      	mov	r1, r3
 8006502:	693a      	ldr	r2, [r7, #16]
 8006504:	2334      	movs	r3, #52	@ 0x34
 8006506:	fb01 f303 	mul.w	r3, r1, r3
 800650a:	4413      	add	r3, r2
 800650c:	3391      	adds	r3, #145	@ 0x91
 800650e:	2202      	movs	r2, #2
 8006510:	701a      	strb	r2, [r3, #0]
            break;
 8006512:	e01e      	b.n	8006552 <USBH_MSC_Process+0x506>
            MSC_Handle->current_lun++;
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800651a:	3301      	adds	r3, #1
 800651c:	b29a      	uxth	r2, r3
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 8006524:	e016      	b.n	8006554 <USBH_MSC_Process+0x508>
        MSC_Handle->current_lun = 0U;
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	2200      	movs	r2, #0
 800652a:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        MSC_Handle->state = MSC_IDLE;
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	2201      	movs	r2, #1
 8006532:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800653a:	2102      	movs	r1, #2
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	4798      	blx	r3
      break;
 8006540:	e00c      	b.n	800655c <USBH_MSC_Process+0x510>
            break;
 8006542:	bf00      	nop
 8006544:	e00a      	b.n	800655c <USBH_MSC_Process+0x510>
            break;
 8006546:	bf00      	nop
 8006548:	e008      	b.n	800655c <USBH_MSC_Process+0x510>
            break;
 800654a:	bf00      	nop
 800654c:	e006      	b.n	800655c <USBH_MSC_Process+0x510>
            break;
 800654e:	bf00      	nop
 8006550:	e004      	b.n	800655c <USBH_MSC_Process+0x510>
            break;
 8006552:	bf00      	nop
      break;
 8006554:	e002      	b.n	800655c <USBH_MSC_Process+0x510>
      error = USBH_OK;
 8006556:	2300      	movs	r3, #0
 8006558:	75fb      	strb	r3, [r7, #23]
      break;
 800655a:	bf00      	nop
  }
  return error;
 800655c:	7dfb      	ldrb	r3, [r7, #23]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3718      	adds	r7, #24
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop

08006568 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	370c      	adds	r7, #12
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800657e:	b580      	push	{r7, lr}
 8006580:	b088      	sub	sp, #32
 8006582:	af02      	add	r7, sp, #8
 8006584:	6078      	str	r0, [r7, #4]
 8006586:	460b      	mov	r3, r1
 8006588:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8006594:	2301      	movs	r3, #1
 8006596:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8006598:	2301      	movs	r3, #1
 800659a:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800659c:	78fb      	ldrb	r3, [r7, #3]
 800659e:	693a      	ldr	r2, [r7, #16]
 80065a0:	2134      	movs	r1, #52	@ 0x34
 80065a2:	fb01 f303 	mul.w	r3, r1, r3
 80065a6:	4413      	add	r3, r2
 80065a8:	3390      	adds	r3, #144	@ 0x90
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	2b07      	cmp	r3, #7
 80065ae:	d03c      	beq.n	800662a <USBH_MSC_RdWrProcess+0xac>
 80065b0:	2b07      	cmp	r3, #7
 80065b2:	f300 80a7 	bgt.w	8006704 <USBH_MSC_RdWrProcess+0x186>
 80065b6:	2b05      	cmp	r3, #5
 80065b8:	d06c      	beq.n	8006694 <USBH_MSC_RdWrProcess+0x116>
 80065ba:	2b06      	cmp	r3, #6
 80065bc:	f040 80a2 	bne.w	8006704 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80065c0:	78f9      	ldrb	r1, [r7, #3]
 80065c2:	2300      	movs	r3, #0
 80065c4:	9300      	str	r3, [sp, #0]
 80065c6:	2300      	movs	r3, #0
 80065c8:	2200      	movs	r2, #0
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 fea4 	bl	8007318 <USBH_MSC_SCSI_Read>
 80065d0:	4603      	mov	r3, r0
 80065d2:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80065d4:	7bfb      	ldrb	r3, [r7, #15]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10b      	bne.n	80065f2 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80065da:	78fb      	ldrb	r3, [r7, #3]
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	2134      	movs	r1, #52	@ 0x34
 80065e0:	fb01 f303 	mul.w	r3, r1, r3
 80065e4:	4413      	add	r3, r2
 80065e6:	3390      	adds	r3, #144	@ 0x90
 80065e8:	2201      	movs	r2, #1
 80065ea:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80065ec:	2300      	movs	r3, #0
 80065ee:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80065f0:	e08a      	b.n	8006708 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 80065f2:	7bfb      	ldrb	r3, [r7, #15]
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d109      	bne.n	800660c <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80065f8:	78fb      	ldrb	r3, [r7, #3]
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	2134      	movs	r1, #52	@ 0x34
 80065fe:	fb01 f303 	mul.w	r3, r1, r3
 8006602:	4413      	add	r3, r2
 8006604:	3390      	adds	r3, #144	@ 0x90
 8006606:	2205      	movs	r2, #5
 8006608:	701a      	strb	r2, [r3, #0]
      break;
 800660a:	e07d      	b.n	8006708 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800660c:	7bfb      	ldrb	r3, [r7, #15]
 800660e:	2b04      	cmp	r3, #4
 8006610:	d17a      	bne.n	8006708 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006612:	78fb      	ldrb	r3, [r7, #3]
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	2134      	movs	r1, #52	@ 0x34
 8006618:	fb01 f303 	mul.w	r3, r1, r3
 800661c:	4413      	add	r3, r2
 800661e:	3390      	adds	r3, #144	@ 0x90
 8006620:	2208      	movs	r2, #8
 8006622:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8006624:	2302      	movs	r3, #2
 8006626:	75fb      	strb	r3, [r7, #23]
      break;
 8006628:	e06e      	b.n	8006708 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800662a:	78f9      	ldrb	r1, [r7, #3]
 800662c:	2300      	movs	r3, #0
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	2300      	movs	r3, #0
 8006632:	2200      	movs	r2, #0
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 fe04 	bl	8007242 <USBH_MSC_SCSI_Write>
 800663a:	4603      	mov	r3, r0
 800663c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800663e:	7bfb      	ldrb	r3, [r7, #15]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10b      	bne.n	800665c <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006644:	78fb      	ldrb	r3, [r7, #3]
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	2134      	movs	r1, #52	@ 0x34
 800664a:	fb01 f303 	mul.w	r3, r1, r3
 800664e:	4413      	add	r3, r2
 8006650:	3390      	adds	r3, #144	@ 0x90
 8006652:	2201      	movs	r2, #1
 8006654:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8006656:	2300      	movs	r3, #0
 8006658:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800665a:	e057      	b.n	800670c <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800665c:	7bfb      	ldrb	r3, [r7, #15]
 800665e:	2b02      	cmp	r3, #2
 8006660:	d109      	bne.n	8006676 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8006662:	78fb      	ldrb	r3, [r7, #3]
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	2134      	movs	r1, #52	@ 0x34
 8006668:	fb01 f303 	mul.w	r3, r1, r3
 800666c:	4413      	add	r3, r2
 800666e:	3390      	adds	r3, #144	@ 0x90
 8006670:	2205      	movs	r2, #5
 8006672:	701a      	strb	r2, [r3, #0]
      break;
 8006674:	e04a      	b.n	800670c <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006676:	7bfb      	ldrb	r3, [r7, #15]
 8006678:	2b04      	cmp	r3, #4
 800667a:	d147      	bne.n	800670c <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800667c:	78fb      	ldrb	r3, [r7, #3]
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	2134      	movs	r1, #52	@ 0x34
 8006682:	fb01 f303 	mul.w	r3, r1, r3
 8006686:	4413      	add	r3, r2
 8006688:	3390      	adds	r3, #144	@ 0x90
 800668a:	2208      	movs	r2, #8
 800668c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800668e:	2302      	movs	r3, #2
 8006690:	75fb      	strb	r3, [r7, #23]
      break;
 8006692:	e03b      	b.n	800670c <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8006694:	78fb      	ldrb	r3, [r7, #3]
 8006696:	2234      	movs	r2, #52	@ 0x34
 8006698:	fb02 f303 	mul.w	r3, r2, r3
 800669c:	3398      	adds	r3, #152	@ 0x98
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	4413      	add	r3, r2
 80066a2:	1d1a      	adds	r2, r3, #4
 80066a4:	78fb      	ldrb	r3, [r7, #3]
 80066a6:	4619      	mov	r1, r3
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 fd51 	bl	8007150 <USBH_MSC_SCSI_RequestSense>
 80066ae:	4603      	mov	r3, r0
 80066b0:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80066b2:	7bfb      	ldrb	r3, [r7, #15]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d113      	bne.n	80066e0 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80066b8:	78fb      	ldrb	r3, [r7, #3]
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	2134      	movs	r1, #52	@ 0x34
 80066be:	fb01 f303 	mul.w	r3, r1, r3
 80066c2:	4413      	add	r3, r2
 80066c4:	3390      	adds	r3, #144	@ 0x90
 80066c6:	2201      	movs	r2, #1
 80066c8:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 80066ca:	78fb      	ldrb	r3, [r7, #3]
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	2134      	movs	r1, #52	@ 0x34
 80066d0:	fb01 f303 	mul.w	r3, r1, r3
 80066d4:	4413      	add	r3, r2
 80066d6:	3391      	adds	r3, #145	@ 0x91
 80066d8:	2202      	movs	r2, #2
 80066da:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 80066dc:	2302      	movs	r3, #2
 80066de:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 80066e0:	7bfb      	ldrb	r3, [r7, #15]
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d014      	beq.n	8006710 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80066e6:	7bfb      	ldrb	r3, [r7, #15]
 80066e8:	2b04      	cmp	r3, #4
 80066ea:	d111      	bne.n	8006710 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80066ec:	78fb      	ldrb	r3, [r7, #3]
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	2134      	movs	r1, #52	@ 0x34
 80066f2:	fb01 f303 	mul.w	r3, r1, r3
 80066f6:	4413      	add	r3, r2
 80066f8:	3390      	adds	r3, #144	@ 0x90
 80066fa:	2208      	movs	r2, #8
 80066fc:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80066fe:	2302      	movs	r3, #2
 8006700:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006702:	e005      	b.n	8006710 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8006704:	bf00      	nop
 8006706:	e004      	b.n	8006712 <USBH_MSC_RdWrProcess+0x194>
      break;
 8006708:	bf00      	nop
 800670a:	e002      	b.n	8006712 <USBH_MSC_RdWrProcess+0x194>
      break;
 800670c:	bf00      	nop
 800670e:	e000      	b.n	8006712 <USBH_MSC_RdWrProcess+0x194>
      break;
 8006710:	bf00      	nop

  }
  return error;
 8006712:	7dfb      	ldrb	r3, [r7, #23]
}
 8006714:	4618      	mov	r0, r3
 8006716:	3718      	adds	r7, #24
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	460b      	mov	r3, r1
 8006726:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800672e:	69db      	ldr	r3, [r3, #28]
 8006730:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b0b      	cmp	r3, #11
 800673a:	d10c      	bne.n	8006756 <USBH_MSC_UnitIsReady+0x3a>
 800673c:	78fb      	ldrb	r3, [r7, #3]
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	2134      	movs	r1, #52	@ 0x34
 8006742:	fb01 f303 	mul.w	r3, r1, r3
 8006746:	4413      	add	r3, r2
 8006748:	3391      	adds	r3, #145	@ 0x91
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d102      	bne.n	8006756 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8006750:	2301      	movs	r3, #1
 8006752:	73fb      	strb	r3, [r7, #15]
 8006754:	e001      	b.n	800675a <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8006756:	2300      	movs	r3, #0
 8006758:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800675a:	7bfb      	ldrb	r3, [r7, #15]
}
 800675c:	4618      	mov	r0, r3
 800675e:	3714      	adds	r7, #20
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	460b      	mov	r3, r1
 8006772:	607a      	str	r2, [r7, #4]
 8006774:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800677c:	69db      	ldr	r3, [r3, #28]
 800677e:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b0b      	cmp	r3, #11
 8006788:	d10d      	bne.n	80067a6 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800678a:	7afb      	ldrb	r3, [r7, #11]
 800678c:	2234      	movs	r2, #52	@ 0x34
 800678e:	fb02 f303 	mul.w	r3, r2, r3
 8006792:	3390      	adds	r3, #144	@ 0x90
 8006794:	697a      	ldr	r2, [r7, #20]
 8006796:	4413      	add	r3, r2
 8006798:	2234      	movs	r2, #52	@ 0x34
 800679a:	4619      	mov	r1, r3
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f004 ff76 	bl	800b68e <memcpy>
    return USBH_OK;
 80067a2:	2300      	movs	r3, #0
 80067a4:	e000      	b.n	80067a8 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 80067a6:	2302      	movs	r3, #2
  }
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3718      	adds	r7, #24
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b088      	sub	sp, #32
 80067b4:	af02      	add	r7, sp, #8
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	607a      	str	r2, [r7, #4]
 80067ba:	603b      	str	r3, [r7, #0]
 80067bc:	460b      	mov	r3, r1
 80067be:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80067c6:	69db      	ldr	r3, [r3, #28]
 80067c8:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00e      	beq.n	80067f4 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80067dc:	2b0b      	cmp	r3, #11
 80067de:	d109      	bne.n	80067f4 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80067e0:	7afb      	ldrb	r3, [r7, #11]
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	2134      	movs	r1, #52	@ 0x34
 80067e6:	fb01 f303 	mul.w	r3, r1, r3
 80067ea:	4413      	add	r3, r2
 80067ec:	3390      	adds	r3, #144	@ 0x90
 80067ee:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d001      	beq.n	80067f8 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 80067f4:	2302      	movs	r3, #2
 80067f6:	e040      	b.n	800687a <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	2206      	movs	r2, #6
 80067fc:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 80067fe:	7afb      	ldrb	r3, [r7, #11]
 8006800:	697a      	ldr	r2, [r7, #20]
 8006802:	2134      	movs	r1, #52	@ 0x34
 8006804:	fb01 f303 	mul.w	r3, r1, r3
 8006808:	4413      	add	r3, r2
 800680a:	3390      	adds	r3, #144	@ 0x90
 800680c:	2206      	movs	r2, #6
 800680e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8006810:	7afb      	ldrb	r3, [r7, #11]
 8006812:	b29a      	uxth	r2, r3
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800681a:	7af9      	ldrb	r1, [r7, #11]
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	9300      	str	r3, [sp, #0]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f000 fd77 	bl	8007318 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006830:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006832:	e016      	b.n	8006862 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	1ad2      	subs	r2, r2, r3
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	f242 7110 	movw	r1, #10000	@ 0x2710
 8006844:	fb01 f303 	mul.w	r3, r1, r3
 8006848:	429a      	cmp	r2, r3
 800684a:	d805      	bhi.n	8006858 <USBH_MSC_Read+0xa8>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8006852:	b2db      	uxtb	r3, r3
 8006854:	2b00      	cmp	r3, #0
 8006856:	d104      	bne.n	8006862 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	2201      	movs	r2, #1
 800685c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800685e:	2302      	movs	r3, #2
 8006860:	e00b      	b.n	800687a <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006862:	7afb      	ldrb	r3, [r7, #11]
 8006864:	4619      	mov	r1, r3
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f7ff fe89 	bl	800657e <USBH_MSC_RdWrProcess>
 800686c:	4603      	mov	r3, r0
 800686e:	2b01      	cmp	r3, #1
 8006870:	d0e0      	beq.n	8006834 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	2201      	movs	r2, #1
 8006876:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3718      	adds	r7, #24
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b088      	sub	sp, #32
 8006886:	af02      	add	r7, sp, #8
 8006888:	60f8      	str	r0, [r7, #12]
 800688a:	607a      	str	r2, [r7, #4]
 800688c:	603b      	str	r3, [r7, #0]
 800688e:	460b      	mov	r3, r1
 8006890:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006898:	69db      	ldr	r3, [r3, #28]
 800689a:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00e      	beq.n	80068c6 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80068ae:	2b0b      	cmp	r3, #11
 80068b0:	d109      	bne.n	80068c6 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80068b2:	7afb      	ldrb	r3, [r7, #11]
 80068b4:	697a      	ldr	r2, [r7, #20]
 80068b6:	2134      	movs	r1, #52	@ 0x34
 80068b8:	fb01 f303 	mul.w	r3, r1, r3
 80068bc:	4413      	add	r3, r2
 80068be:	3390      	adds	r3, #144	@ 0x90
 80068c0:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d001      	beq.n	80068ca <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 80068c6:	2302      	movs	r3, #2
 80068c8:	e040      	b.n	800694c <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	2207      	movs	r2, #7
 80068ce:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80068d0:	7afb      	ldrb	r3, [r7, #11]
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	2134      	movs	r1, #52	@ 0x34
 80068d6:	fb01 f303 	mul.w	r3, r1, r3
 80068da:	4413      	add	r3, r2
 80068dc:	3390      	adds	r3, #144	@ 0x90
 80068de:	2207      	movs	r2, #7
 80068e0:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80068e2:	7afb      	ldrb	r3, [r7, #11]
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80068ec:	7af9      	ldrb	r1, [r7, #11]
 80068ee:	6a3b      	ldr	r3, [r7, #32]
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f000 fca3 	bl	8007242 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006902:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006904:	e016      	b.n	8006934 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	1ad2      	subs	r2, r2, r3
 8006910:	6a3b      	ldr	r3, [r7, #32]
 8006912:	f242 7110 	movw	r1, #10000	@ 0x2710
 8006916:	fb01 f303 	mul.w	r3, r1, r3
 800691a:	429a      	cmp	r2, r3
 800691c:	d805      	bhi.n	800692a <USBH_MSC_Write+0xa8>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8006924:	b2db      	uxtb	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d104      	bne.n	8006934 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	2201      	movs	r2, #1
 800692e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8006930:	2302      	movs	r3, #2
 8006932:	e00b      	b.n	800694c <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006934:	7afb      	ldrb	r3, [r7, #11]
 8006936:	4619      	mov	r1, r3
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f7ff fe20 	bl	800657e <USBH_MSC_RdWrProcess>
 800693e:	4603      	mov	r3, r0
 8006940:	2b01      	cmp	r3, #1
 8006942:	d0e0      	beq.n	8006906 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	2201      	movs	r2, #1
 8006948:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3718      	adds	r7, #24
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2221      	movs	r2, #33	@ 0x21
 8006960:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	22ff      	movs	r2, #255	@ 0xff
 8006966:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800697a:	2200      	movs	r2, #0
 800697c:	2100      	movs	r1, #0
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f001 ff35 	bl	80087ee <USBH_CtlReq>
 8006984:	4603      	mov	r3, r0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3708      	adds	r7, #8
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b082      	sub	sp, #8
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
 8006996:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	22a1      	movs	r2, #161	@ 0xa1
 800699c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	22fe      	movs	r2, #254	@ 0xfe
 80069a2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 80069b6:	2201      	movs	r2, #1
 80069b8:	6839      	ldr	r1, [r7, #0]
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f001 ff17 	bl	80087ee <USBH_CtlReq>
 80069c0:	4603      	mov	r3, r0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3708      	adds	r7, #8
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
	...

080069cc <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80069da:	69db      	ldr	r3, [r3, #28]
 80069dc:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	4a09      	ldr	r2, [pc, #36]	@ (8006a08 <USBH_MSC_BOT_Init+0x3c>)
 80069e2:	655a      	str	r2, [r3, #84]	@ 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	4a09      	ldr	r2, [pc, #36]	@ (8006a0c <USBH_MSC_BOT_Init+0x40>)
 80069e8:	659a      	str	r2, [r3, #88]	@ 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  return USBH_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3714      	adds	r7, #20
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr
 8006a08:	43425355 	.word	0x43425355
 8006a0c:	20304050 	.word	0x20304050

08006a10 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b088      	sub	sp, #32
 8006a14:	af02      	add	r7, sp, #8
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	460b      	mov	r3, r1
 8006a1a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8006a20:	2301      	movs	r3, #1
 8006a22:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8006a24:	2301      	movs	r3, #1
 8006a26:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006a32:	69db      	ldr	r3, [r3, #28]
 8006a34:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8006a36:	2300      	movs	r3, #0
 8006a38:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006a40:	3b01      	subs	r3, #1
 8006a42:	2b0a      	cmp	r3, #10
 8006a44:	f200 819e 	bhi.w	8006d84 <USBH_MSC_BOT_Process+0x374>
 8006a48:	a201      	add	r2, pc, #4	@ (adr r2, 8006a50 <USBH_MSC_BOT_Process+0x40>)
 8006a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4e:	bf00      	nop
 8006a50:	08006a7d 	.word	0x08006a7d
 8006a54:	08006aa5 	.word	0x08006aa5
 8006a58:	08006b0f 	.word	0x08006b0f
 8006a5c:	08006b2d 	.word	0x08006b2d
 8006a60:	08006bb1 	.word	0x08006bb1
 8006a64:	08006bd3 	.word	0x08006bd3
 8006a68:	08006c6b 	.word	0x08006c6b
 8006a6c:	08006c87 	.word	0x08006c87
 8006a70:	08006cd9 	.word	0x08006cd9
 8006a74:	08006d09 	.word	0x08006d09
 8006a78:	08006d6b 	.word	0x08006d6b
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	78fa      	ldrb	r2, [r7, #3]
 8006a80:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	2202      	movs	r2, #2
 8006a88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	795b      	ldrb	r3, [r3, #5]
 8006a96:	2201      	movs	r2, #1
 8006a98:	9200      	str	r2, [sp, #0]
 8006a9a:	221f      	movs	r2, #31
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f002 f8b4 	bl	8008c0a <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8006aa2:	e17e      	b.n	8006da2 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	795b      	ldrb	r3, [r3, #5]
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f004 f9ca 	bl	800ae44 <USBH_LL_GetURBState>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006ab4:	7d3b      	ldrb	r3, [r7, #20]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d118      	bne.n	8006aec <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00f      	beq.n	8006ae2 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8006ac8:	b25b      	sxtb	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	da04      	bge.n	8006ad8 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	2203      	movs	r2, #3
 8006ad2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006ad6:	e157      	b.n	8006d88 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	2205      	movs	r2, #5
 8006adc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8006ae0:	e152      	b.n	8006d88 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	2207      	movs	r2, #7
 8006ae6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8006aea:	e14d      	b.n	8006d88 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006aec:	7d3b      	ldrb	r3, [r7, #20]
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d104      	bne.n	8006afc <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8006afa:	e145      	b.n	8006d88 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8006afc:	7d3b      	ldrb	r3, [r7, #20]
 8006afe:	2b05      	cmp	r3, #5
 8006b00:	f040 8142 	bne.w	8006d88 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	220a      	movs	r2, #10
 8006b08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8006b0c:	e13c      	b.n	8006d88 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	895a      	ldrh	r2, [r3, #10]
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	791b      	ldrb	r3, [r3, #4]
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f002 f899 	bl	8008c54 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	2204      	movs	r2, #4
 8006b26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      break;
 8006b2a:	e13a      	b.n	8006da2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	791b      	ldrb	r3, [r3, #4]
 8006b30:	4619      	mov	r1, r3
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f004 f986 	bl	800ae44 <USBH_LL_GetURBState>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006b3c:	7d3b      	ldrb	r3, [r7, #20]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d12d      	bne.n	8006b9e <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	8952      	ldrh	r2, [r2, #10]
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d910      	bls.n	8006b70 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	8952      	ldrh	r2, [r2, #10]
 8006b58:	441a      	add	r2, r3
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	8952      	ldrh	r2, [r2, #10]
 8006b68:	1a9a      	subs	r2, r3, r2
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006b6e:	e002      	b.n	8006b76 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	2200      	movs	r2, #0
 8006b74:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00a      	beq.n	8006b94 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	895a      	ldrh	r2, [r3, #10]
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	791b      	ldrb	r3, [r3, #4]
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f002 f861 	bl	8008c54 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8006b92:	e0fb      	b.n	8006d8c <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	2207      	movs	r2, #7
 8006b98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8006b9c:	e0f6      	b.n	8006d8c <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8006b9e:	7d3b      	ldrb	r3, [r7, #20]
 8006ba0:	2b05      	cmp	r3, #5
 8006ba2:	f040 80f3 	bne.w	8006d8c <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	2209      	movs	r2, #9
 8006baa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8006bae:	e0ed      	b.n	8006d8c <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	891a      	ldrh	r2, [r3, #8]
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	795b      	ldrb	r3, [r3, #5]
 8006bbe:	2001      	movs	r0, #1
 8006bc0:	9000      	str	r0, [sp, #0]
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f002 f821 	bl	8008c0a <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	2206      	movs	r2, #6
 8006bcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8006bd0:	e0e7      	b.n	8006da2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	795b      	ldrb	r3, [r3, #5]
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f004 f933 	bl	800ae44 <USBH_LL_GetURBState>
 8006bde:	4603      	mov	r3, r0
 8006be0:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006be2:	7d3b      	ldrb	r3, [r7, #20]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d12f      	bne.n	8006c48 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bec:	693a      	ldr	r2, [r7, #16]
 8006bee:	8912      	ldrh	r2, [r2, #8]
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d910      	bls.n	8006c16 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	8912      	ldrh	r2, [r2, #8]
 8006bfe:	441a      	add	r2, r3
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	8912      	ldrh	r2, [r2, #8]
 8006c0e:	1a9a      	subs	r2, r3, r2
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006c14:	e002      	b.n	8006c1c <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00c      	beq.n	8006c3e <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	891a      	ldrh	r2, [r3, #8]
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	795b      	ldrb	r3, [r3, #5]
 8006c32:	2001      	movs	r0, #1
 8006c34:	9000      	str	r0, [sp, #0]
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f001 ffe7 	bl	8008c0a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8006c3c:	e0a8      	b.n	8006d90 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	2207      	movs	r2, #7
 8006c42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8006c46:	e0a3      	b.n	8006d90 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006c48:	7d3b      	ldrb	r3, [r7, #20]
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d104      	bne.n	8006c58 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	2205      	movs	r2, #5
 8006c52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8006c56:	e09b      	b.n	8006d90 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8006c58:	7d3b      	ldrb	r3, [r7, #20]
 8006c5a:	2b05      	cmp	r3, #5
 8006c5c:	f040 8098 	bne.w	8006d90 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	220a      	movs	r2, #10
 8006c64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8006c68:	e092      	b.n	8006d90 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	791b      	ldrb	r3, [r3, #4]
 8006c74:	220d      	movs	r2, #13
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f001 ffec 	bl	8008c54 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	2208      	movs	r2, #8
 8006c80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8006c84:	e08d      	b.n	8006da2 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	791b      	ldrb	r3, [r3, #4]
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f004 f8d9 	bl	800ae44 <USBH_LL_GetURBState>
 8006c92:	4603      	mov	r3, r0
 8006c94:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8006c96:	7d3b      	ldrb	r3, [r7, #20]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d115      	bne.n	8006cc8 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f8a9 	bl	8006e04 <USBH_MSC_DecodeCSW>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8006cb6:	7d7b      	ldrb	r3, [r7, #21]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d102      	bne.n	8006cc2 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8006cc0:	e068      	b.n	8006d94 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8006cc2:	2302      	movs	r3, #2
 8006cc4:	75fb      	strb	r3, [r7, #23]
      break;
 8006cc6:	e065      	b.n	8006d94 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8006cc8:	7d3b      	ldrb	r3, [r7, #20]
 8006cca:	2b05      	cmp	r3, #5
 8006ccc:	d162      	bne.n	8006d94 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	2209      	movs	r2, #9
 8006cd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8006cd6:	e05d      	b.n	8006d94 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8006cd8:	78fb      	ldrb	r3, [r7, #3]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	4619      	mov	r1, r3
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f864 	bl	8006dac <USBH_MSC_BOT_Abort>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8006ce8:	7dbb      	ldrb	r3, [r7, #22]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d104      	bne.n	8006cf8 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	2207      	movs	r2, #7
 8006cf2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8006cf6:	e04f      	b.n	8006d98 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8006cf8:	7dbb      	ldrb	r3, [r7, #22]
 8006cfa:	2b04      	cmp	r3, #4
 8006cfc:	d14c      	bne.n	8006d98 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	220b      	movs	r2, #11
 8006d02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8006d06:	e047      	b.n	8006d98 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8006d08:	78fb      	ldrb	r3, [r7, #3]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f84c 	bl	8006dac <USBH_MSC_BOT_Abort>
 8006d14:	4603      	mov	r3, r0
 8006d16:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8006d18:	7dbb      	ldrb	r3, [r7, #22]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d11d      	bne.n	8006d5a <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	795b      	ldrb	r3, [r3, #5]
 8006d22:	4619      	mov	r1, r3
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f004 f8ea 	bl	800aefe <USBH_LL_GetToggle>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	7959      	ldrb	r1, [r3, #5]
 8006d32:	7bfb      	ldrb	r3, [r7, #15]
 8006d34:	f1c3 0301 	rsb	r3, r3, #1
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f004 f8ab 	bl	800ae98 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	791b      	ldrb	r3, [r3, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	4619      	mov	r1, r3
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f004 f8a4 	bl	800ae98 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	2209      	movs	r2, #9
 8006d54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8006d58:	e020      	b.n	8006d9c <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8006d5a:	7dbb      	ldrb	r3, [r7, #22]
 8006d5c:	2b04      	cmp	r3, #4
 8006d5e:	d11d      	bne.n	8006d9c <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	220b      	movs	r2, #11
 8006d64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8006d68:	e018      	b.n	8006d9c <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7ff fdf2 	bl	8006954 <USBH_MSC_BOT_REQ_Reset>
 8006d70:	4603      	mov	r3, r0
 8006d72:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8006d74:	7dfb      	ldrb	r3, [r7, #23]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d112      	bne.n	8006da0 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      }
      break;
 8006d82:	e00d      	b.n	8006da0 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8006d84:	bf00      	nop
 8006d86:	e00c      	b.n	8006da2 <USBH_MSC_BOT_Process+0x392>
      break;
 8006d88:	bf00      	nop
 8006d8a:	e00a      	b.n	8006da2 <USBH_MSC_BOT_Process+0x392>
      break;
 8006d8c:	bf00      	nop
 8006d8e:	e008      	b.n	8006da2 <USBH_MSC_BOT_Process+0x392>
      break;
 8006d90:	bf00      	nop
 8006d92:	e006      	b.n	8006da2 <USBH_MSC_BOT_Process+0x392>
      break;
 8006d94:	bf00      	nop
 8006d96:	e004      	b.n	8006da2 <USBH_MSC_BOT_Process+0x392>
      break;
 8006d98:	bf00      	nop
 8006d9a:	e002      	b.n	8006da2 <USBH_MSC_BOT_Process+0x392>
      break;
 8006d9c:	bf00      	nop
 8006d9e:	e000      	b.n	8006da2 <USBH_MSC_BOT_Process+0x392>
      break;
 8006da0:	bf00      	nop
  }
  return status;
 8006da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3718      	adds	r7, #24
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	460b      	mov	r3, r1
 8006db6:	70fb      	strb	r3, [r7, #3]
 8006db8:	4613      	mov	r3, r2
 8006dba:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006dc6:	69db      	ldr	r3, [r3, #28]
 8006dc8:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8006dca:	78bb      	ldrb	r3, [r7, #2]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d002      	beq.n	8006dd6 <USBH_MSC_BOT_Abort+0x2a>
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d009      	beq.n	8006de8 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8006dd4:	e011      	b.n	8006dfa <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	79db      	ldrb	r3, [r3, #7]
 8006dda:	4619      	mov	r1, r3
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f001 f9d1 	bl	8008184 <USBH_ClrFeature>
 8006de2:	4603      	mov	r3, r0
 8006de4:	73fb      	strb	r3, [r7, #15]
      break;
 8006de6:	e008      	b.n	8006dfa <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	799b      	ldrb	r3, [r3, #6]
 8006dec:	4619      	mov	r1, r3
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f001 f9c8 	bl	8008184 <USBH_ClrFeature>
 8006df4:	4603      	mov	r3, r0
 8006df6:	73fb      	strb	r3, [r7, #15]
      break;
 8006df8:	bf00      	nop
  }
  return status;
 8006dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e12:	69db      	ldr	r3, [r3, #28]
 8006e14:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8006e16:	2301      	movs	r3, #1
 8006e18:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	791b      	ldrb	r3, [r3, #4]
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f003 ff7d 	bl	800ad20 <USBH_LL_GetLastXferSize>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b0d      	cmp	r3, #13
 8006e2a:	d002      	beq.n	8006e32 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	73fb      	strb	r3, [r7, #15]
 8006e30:	e024      	b.n	8006e7c <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e36:	4a14      	ldr	r2, [pc, #80]	@ (8006e88 <USBH_MSC_DecodeCSW+0x84>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d11d      	bne.n	8006e78 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d119      	bne.n	8006e7c <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d102      	bne.n	8006e58 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8006e52:	2300      	movs	r3, #0
 8006e54:	73fb      	strb	r3, [r7, #15]
 8006e56:	e011      	b.n	8006e7c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d102      	bne.n	8006e68 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8006e62:	2301      	movs	r3, #1
 8006e64:	73fb      	strb	r3, [r7, #15]
 8006e66:	e009      	b.n	8006e7c <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d104      	bne.n	8006e7c <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8006e72:	2302      	movs	r3, #2
 8006e74:	73fb      	strb	r3, [r7, #15]
 8006e76:	e001      	b.n	8006e7c <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8006e78:	2302      	movs	r3, #2
 8006e7a:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8006e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	53425355 	.word	0x53425355

08006e8c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	460b      	mov	r3, r1
 8006e96:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL;
 8006e98:	2302      	movs	r3, #2
 8006e9a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ea2:	69db      	ldr	r3, [r3, #28]
 8006ea4:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d002      	beq.n	8006eb6 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d021      	beq.n	8006ef8 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8006eb4:	e028      	b.n	8006f08 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	220a      	movs	r2, #10
 8006ec8:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	3363      	adds	r3, #99	@ 0x63
 8006ed0:	2210      	movs	r2, #16
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f004 fb4f 	bl	800b578 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	2202      	movs	r2, #2
 8006eee:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      error = USBH_BUSY;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	73fb      	strb	r3, [r7, #15]
      break;
 8006ef6:	e007      	b.n	8006f08 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006ef8:	78fb      	ldrb	r3, [r7, #3]
 8006efa:	4619      	mov	r1, r3
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f7ff fd87 	bl	8006a10 <USBH_MSC_BOT_Process>
 8006f02:	4603      	mov	r3, r0
 8006f04:	73fb      	strb	r3, [r7, #15]
      break;
 8006f06:	bf00      	nop
  }

  return error;
 8006f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}

08006f12 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b086      	sub	sp, #24
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	60f8      	str	r0, [r7, #12]
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	607a      	str	r2, [r7, #4]
 8006f1e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY;
 8006f20:	2301      	movs	r3, #1
 8006f22:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f2a:	69db      	ldr	r3, [r3, #28]
 8006f2c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d002      	beq.n	8006f3e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d027      	beq.n	8006f8c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8006f3c:	e05e      	b.n	8006ffc <USBH_MSC_SCSI_ReadCapacity+0xea>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	2208      	movs	r2, #8
 8006f42:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	2280      	movs	r2, #128	@ 0x80
 8006f48:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	220a      	movs	r2, #10
 8006f50:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	3363      	adds	r3, #99	@ 0x63
 8006f58:	2210      	movs	r2, #16
 8006f5a:	2100      	movs	r1, #0
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f004 fb0b 	bl	800b578 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	2225      	movs	r2, #37	@ 0x25
 8006f66:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	2202      	movs	r2, #2
 8006f76:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	f103 0210 	add.w	r2, r3, #16
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8006f86:	2301      	movs	r3, #1
 8006f88:	75fb      	strb	r3, [r7, #23]
      break;
 8006f8a:	e037      	b.n	8006ffc <USBH_MSC_SCSI_ReadCapacity+0xea>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006f8c:	7afb      	ldrb	r3, [r7, #11]
 8006f8e:	4619      	mov	r1, r3
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f7ff fd3d 	bl	8006a10 <USBH_MSC_BOT_Process>
 8006f96:	4603      	mov	r3, r0
 8006f98:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006f9a:	7dfb      	ldrb	r3, [r7, #23]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d12c      	bne.n	8006ffa <USBH_MSC_SCSI_ReadCapacity+0xe8>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006fa6:	3303      	adds	r3, #3
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	461a      	mov	r2, r3
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006fb2:	3302      	adds	r3, #2
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	021b      	lsls	r3, r3, #8
 8006fb8:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006fc6:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	061b      	lsls	r3, r3, #24
 8006fd2:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006fde:	3307      	adds	r3, #7
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006fea:	3306      	adds	r3, #6
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	021b      	lsls	r3, r3, #8
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	809a      	strh	r2, [r3, #4]
      break;
 8006ffa:	bf00      	nop
  }

  return error;
 8006ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3718      	adds	r7, #24
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b086      	sub	sp, #24
 800700a:	af00      	add	r7, sp, #0
 800700c:	60f8      	str	r0, [r7, #12]
 800700e:	460b      	mov	r3, r1
 8007010:	607a      	str	r2, [r7, #4]
 8007012:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8007014:	2302      	movs	r3, #2
 8007016:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800701e:	69db      	ldr	r3, [r3, #28]
 8007020:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8007028:	2b01      	cmp	r3, #1
 800702a:	d002      	beq.n	8007032 <USBH_MSC_SCSI_Inquiry+0x2c>
 800702c:	2b02      	cmp	r3, #2
 800702e:	d03d      	beq.n	80070ac <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8007030:	e089      	b.n	8007146 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	2224      	movs	r2, #36	@ 0x24
 8007036:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	2280      	movs	r2, #128	@ 0x80
 800703c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	220a      	movs	r2, #10
 8007044:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	3363      	adds	r3, #99	@ 0x63
 800704c:	220a      	movs	r2, #10
 800704e:	2100      	movs	r1, #0
 8007050:	4618      	mov	r0, r3
 8007052:	f004 fa91 	bl	800b578 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	2212      	movs	r2, #18
 800705a:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800705e:	7afb      	ldrb	r3, [r7, #11]
 8007060:	015b      	lsls	r3, r3, #5
 8007062:	b2da      	uxtb	r2, r3
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	2200      	movs	r2, #0
 800706e:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	2224      	movs	r2, #36	@ 0x24
 800707e:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	2201      	movs	r2, #1
 800708e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	2202      	movs	r2, #2
 8007096:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	f103 0210 	add.w	r2, r3, #16
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 80070a6:	2301      	movs	r3, #1
 80070a8:	75fb      	strb	r3, [r7, #23]
      break;
 80070aa:	e04c      	b.n	8007146 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 80070ac:	7afb      	ldrb	r3, [r7, #11]
 80070ae:	4619      	mov	r1, r3
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f7ff fcad 	bl	8006a10 <USBH_MSC_BOT_Process>
 80070b6:	4603      	mov	r3, r0
 80070b8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80070ba:	7dfb      	ldrb	r3, [r7, #23]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d141      	bne.n	8007144 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 80070c0:	2222      	movs	r2, #34	@ 0x22
 80070c2:	2100      	movs	r1, #0
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f004 fa57 	bl	800b578 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	f003 031f 	and.w	r3, r3, #31
 80070d6:	b2da      	uxtb	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	095b      	lsrs	r3, r3, #5
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070f2:	3301      	adds	r3, #1
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	b25b      	sxtb	r3, r3
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	da03      	bge.n	8007104 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	709a      	strb	r2, [r3, #2]
 8007102:	e002      	b.n	800710a <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	1cd8      	adds	r0, r3, #3
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007114:	3308      	adds	r3, #8
 8007116:	2208      	movs	r2, #8
 8007118:	4619      	mov	r1, r3
 800711a:	f004 fab8 	bl	800b68e <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f103 000c 	add.w	r0, r3, #12
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800712a:	3310      	adds	r3, #16
 800712c:	2210      	movs	r2, #16
 800712e:	4619      	mov	r1, r3
 8007130:	f004 faad 	bl	800b68e <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	331d      	adds	r3, #29
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 800713e:	3220      	adds	r2, #32
 8007140:	6812      	ldr	r2, [r2, #0]
 8007142:	601a      	str	r2, [r3, #0]
      break;
 8007144:	bf00      	nop
  }

  return error;
 8007146:	7dfb      	ldrb	r3, [r7, #23]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3718      	adds	r7, #24
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	460b      	mov	r3, r1
 800715a:	607a      	str	r2, [r7, #4]
 800715c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 800715e:	2302      	movs	r3, #2
 8007160:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007168:	69db      	ldr	r3, [r3, #28]
 800716a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8007172:	2b01      	cmp	r3, #1
 8007174:	d002      	beq.n	800717c <USBH_MSC_SCSI_RequestSense+0x2c>
 8007176:	2b02      	cmp	r3, #2
 8007178:	d03d      	beq.n	80071f6 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800717a:	e05d      	b.n	8007238 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	220e      	movs	r2, #14
 8007180:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	2280      	movs	r2, #128	@ 0x80
 8007186:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	220a      	movs	r2, #10
 800718e:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	3363      	adds	r3, #99	@ 0x63
 8007196:	2210      	movs	r2, #16
 8007198:	2100      	movs	r1, #0
 800719a:	4618      	mov	r0, r3
 800719c:	f004 f9ec 	bl	800b578 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	2203      	movs	r2, #3
 80071a4:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80071a8:	7afb      	ldrb	r3, [r7, #11]
 80071aa:	015b      	lsls	r3, r3, #5
 80071ac:	b2da      	uxtb	r2, r3
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	220e      	movs	r2, #14
 80071c8:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	2202      	movs	r2, #2
 80071e0:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	f103 0210 	add.w	r2, r3, #16
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 80071f0:	2301      	movs	r3, #1
 80071f2:	75fb      	strb	r3, [r7, #23]
      break;
 80071f4:	e020      	b.n	8007238 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 80071f6:	7afb      	ldrb	r3, [r7, #11]
 80071f8:	4619      	mov	r1, r3
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f7ff fc08 	bl	8006a10 <USBH_MSC_BOT_Process>
 8007200:	4603      	mov	r3, r0
 8007202:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007204:	7dfb      	ldrb	r3, [r7, #23]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d115      	bne.n	8007236 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007210:	3302      	adds	r3, #2
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	f003 030f 	and.w	r3, r3, #15
 8007218:	b2da      	uxtb	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007224:	7b1a      	ldrb	r2, [r3, #12]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007230:	7b5a      	ldrb	r2, [r3, #13]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	709a      	strb	r2, [r3, #2]
      break;
 8007236:	bf00      	nop
  }

  return error;
 8007238:	7dfb      	ldrb	r3, [r7, #23]
}
 800723a:	4618      	mov	r0, r3
 800723c:	3718      	adds	r7, #24
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b086      	sub	sp, #24
 8007246:	af00      	add	r7, sp, #0
 8007248:	60f8      	str	r0, [r7, #12]
 800724a:	607a      	str	r2, [r7, #4]
 800724c:	603b      	str	r3, [r7, #0]
 800724e:	460b      	mov	r3, r1
 8007250:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 8007252:	2302      	movs	r3, #2
 8007254:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800725c:	69db      	ldr	r3, [r3, #28]
 800725e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8007266:	2b01      	cmp	r3, #1
 8007268:	d002      	beq.n	8007270 <USBH_MSC_SCSI_Write+0x2e>
 800726a:	2b02      	cmp	r3, #2
 800726c:	d047      	beq.n	80072fe <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800726e:	e04e      	b.n	800730e <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 8007276:	461a      	mov	r2, r3
 8007278:	6a3b      	ldr	r3, [r7, #32]
 800727a:	fb03 f202 	mul.w	r2, r3, r2
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	220a      	movs	r2, #10
 800728e:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	3363      	adds	r3, #99	@ 0x63
 8007296:	2210      	movs	r2, #16
 8007298:	2100      	movs	r1, #0
 800729a:	4618      	mov	r0, r3
 800729c:	f004 f96c 	bl	800b578 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	222a      	movs	r2, #42	@ 0x2a
 80072a4:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80072a8:	79fa      	ldrb	r2, [r7, #7]
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80072b0:	79ba      	ldrb	r2, [r7, #6]
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80072b8:	797a      	ldrb	r2, [r7, #5]
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80072c0:	1d3b      	adds	r3, r7, #4
 80072c2:	781a      	ldrb	r2, [r3, #0]
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]);
 80072ca:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]);
 80072d4:	f107 0320 	add.w	r3, r7, #32
 80072d8:	781a      	ldrb	r2, [r3, #0]
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	2202      	movs	r2, #2
 80072ec:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	683a      	ldr	r2, [r7, #0]
 80072f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 80072f8:	2301      	movs	r3, #1
 80072fa:	75fb      	strb	r3, [r7, #23]
      break;
 80072fc:	e007      	b.n	800730e <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 80072fe:	7afb      	ldrb	r3, [r7, #11]
 8007300:	4619      	mov	r1, r3
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f7ff fb84 	bl	8006a10 <USBH_MSC_BOT_Process>
 8007308:	4603      	mov	r3, r0
 800730a:	75fb      	strb	r3, [r7, #23]
      break;
 800730c:	bf00      	nop
  }

  return error;
 800730e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007310:	4618      	mov	r0, r3
 8007312:	3718      	adds	r7, #24
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b086      	sub	sp, #24
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	607a      	str	r2, [r7, #4]
 8007322:	603b      	str	r3, [r7, #0]
 8007324:	460b      	mov	r3, r1
 8007326:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 8007328:	2302      	movs	r3, #2
 800732a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007332:	69db      	ldr	r3, [r3, #28]
 8007334:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800733c:	2b01      	cmp	r3, #1
 800733e:	d002      	beq.n	8007346 <USBH_MSC_SCSI_Read+0x2e>
 8007340:	2b02      	cmp	r3, #2
 8007342:	d047      	beq.n	80073d4 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007344:	e04e      	b.n	80073e4 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 800734c:	461a      	mov	r2, r3
 800734e:	6a3b      	ldr	r3, [r7, #32]
 8007350:	fb03 f202 	mul.w	r2, r3, r2
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	2280      	movs	r2, #128	@ 0x80
 800735c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	220a      	movs	r2, #10
 8007364:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	3363      	adds	r3, #99	@ 0x63
 800736c:	2210      	movs	r2, #16
 800736e:	2100      	movs	r1, #0
 8007370:	4618      	mov	r0, r3
 8007372:	f004 f901 	bl	800b578 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	2228      	movs	r2, #40	@ 0x28
 800737a:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800737e:	79fa      	ldrb	r2, [r7, #7]
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8007386:	79ba      	ldrb	r2, [r7, #6]
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800738e:	797a      	ldrb	r2, [r7, #5]
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8007396:	1d3b      	adds	r3, r7, #4
 8007398:	781a      	ldrb	r2, [r3, #0]
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]);
 80073a0:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]);
 80073aa:	f107 0320 	add.w	r3, r7, #32
 80073ae:	781a      	ldrb	r2, [r3, #0]
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	2202      	movs	r2, #2
 80073c2:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	683a      	ldr	r2, [r7, #0]
 80073ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 80073ce:	2301      	movs	r3, #1
 80073d0:	75fb      	strb	r3, [r7, #23]
      break;
 80073d2:	e007      	b.n	80073e4 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 80073d4:	7afb      	ldrb	r3, [r7, #11]
 80073d6:	4619      	mov	r1, r3
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f7ff fb19 	bl	8006a10 <USBH_MSC_BOT_Process>
 80073de:	4603      	mov	r3, r0
 80073e0:	75fb      	strb	r3, [r7, #23]
      break;
 80073e2:	bf00      	nop
  }

  return error;
 80073e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3718      	adds	r7, #24
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b084      	sub	sp, #16
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	60f8      	str	r0, [r7, #12]
 80073f6:	60b9      	str	r1, [r7, #8]
 80073f8:	4613      	mov	r3, r2
 80073fa:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007402:	2302      	movs	r3, #2
 8007404:	e029      	b.n	800745a <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	79fa      	ldrb	r2, [r7, #7]
 800740a:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f000 f81f 	bl	8007462 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2200      	movs	r2, #0
 8007428:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2200      	movs	r2, #0
 8007430:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d003      	beq.n	8007452 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f003 fbb0 	bl	800abb8 <USBH_LL_Init>

  return USBH_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007462:	b580      	push	{r7, lr}
 8007464:	b084      	sub	sp, #16
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800746a:	2300      	movs	r3, #0
 800746c:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800746e:	2300      	movs	r3, #0
 8007470:	60fb      	str	r3, [r7, #12]
 8007472:	e009      	b.n	8007488 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	33e0      	adds	r3, #224	@ 0xe0
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	4413      	add	r3, r2
 800747e:	2200      	movs	r2, #0
 8007480:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	3301      	adds	r3, #1
 8007486:	60fb      	str	r3, [r7, #12]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2b0f      	cmp	r3, #15
 800748c:	d9f2      	bls.n	8007474 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800748e:	2300      	movs	r3, #0
 8007490:	60fb      	str	r3, [r7, #12]
 8007492:	e009      	b.n	80074a8 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	4413      	add	r3, r2
 800749a:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800749e:	2200      	movs	r2, #0
 80074a0:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	3301      	adds	r3, #1
 80074a6:	60fb      	str	r3, [r7, #12]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074ae:	d3f1      	bcc.n	8007494 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2240      	movs	r2, #64	@ 0x40
 80074d4:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	331c      	adds	r3, #28
 8007500:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007504:	2100      	movs	r1, #0
 8007506:	4618      	mov	r0, r3
 8007508:	f004 f836 	bl	800b578 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007512:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007516:	2100      	movs	r1, #0
 8007518:	4618      	mov	r0, r3
 800751a:	f004 f82d 	bl	800b578 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007524:	2212      	movs	r2, #18
 8007526:	2100      	movs	r1, #0
 8007528:	4618      	mov	r0, r3
 800752a:	f004 f825 	bl	800b578 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007534:	223e      	movs	r2, #62	@ 0x3e
 8007536:	2100      	movs	r1, #0
 8007538:	4618      	mov	r0, r3
 800753a:	f004 f81d 	bl	800b578 <memset>

  return USBH_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007552:	2300      	movs	r3, #0
 8007554:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d016      	beq.n	800758a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007562:	2b00      	cmp	r3, #0
 8007564:	d10e      	bne.n	8007584 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800756c:	1c59      	adds	r1, r3, #1
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	33de      	adds	r3, #222	@ 0xde
 8007578:	6839      	ldr	r1, [r7, #0]
 800757a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800757e:	2300      	movs	r3, #0
 8007580:	73fb      	strb	r3, [r7, #15]
 8007582:	e004      	b.n	800758e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007584:	2302      	movs	r3, #2
 8007586:	73fb      	strb	r3, [r7, #15]
 8007588:	e001      	b.n	800758e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800758a:	2302      	movs	r3, #2
 800758c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800758e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007590:	4618      	mov	r0, r3
 8007592:	3714      	adds	r7, #20
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	460b      	mov	r3, r1
 80075a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80075a8:	2300      	movs	r3, #0
 80075aa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80075b2:	78fa      	ldrb	r2, [r7, #3]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d204      	bcs.n	80075c2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	78fa      	ldrb	r2, [r7, #3]
 80075bc:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80075c0:	e001      	b.n	80075c6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80075c2:	2302      	movs	r3, #2
 80075c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80075c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3714      	adds	r7, #20
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b087      	sub	sp, #28
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	4608      	mov	r0, r1
 80075de:	4611      	mov	r1, r2
 80075e0:	461a      	mov	r2, r3
 80075e2:	4603      	mov	r3, r0
 80075e4:	70fb      	strb	r3, [r7, #3]
 80075e6:	460b      	mov	r3, r1
 80075e8:	70bb      	strb	r3, [r7, #2]
 80075ea:	4613      	mov	r3, r2
 80075ec:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80075ee:	2300      	movs	r3, #0
 80075f0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80075f2:	2300      	movs	r3, #0
 80075f4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80075fc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80075fe:	e025      	b.n	800764c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007600:	7dfb      	ldrb	r3, [r7, #23]
 8007602:	221a      	movs	r2, #26
 8007604:	fb02 f303 	mul.w	r3, r2, r3
 8007608:	3308      	adds	r3, #8
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	4413      	add	r3, r2
 800760e:	3302      	adds	r3, #2
 8007610:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	795b      	ldrb	r3, [r3, #5]
 8007616:	78fa      	ldrb	r2, [r7, #3]
 8007618:	429a      	cmp	r2, r3
 800761a:	d002      	beq.n	8007622 <USBH_FindInterface+0x4e>
 800761c:	78fb      	ldrb	r3, [r7, #3]
 800761e:	2bff      	cmp	r3, #255	@ 0xff
 8007620:	d111      	bne.n	8007646 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007626:	78ba      	ldrb	r2, [r7, #2]
 8007628:	429a      	cmp	r2, r3
 800762a:	d002      	beq.n	8007632 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800762c:	78bb      	ldrb	r3, [r7, #2]
 800762e:	2bff      	cmp	r3, #255	@ 0xff
 8007630:	d109      	bne.n	8007646 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007636:	787a      	ldrb	r2, [r7, #1]
 8007638:	429a      	cmp	r2, r3
 800763a:	d002      	beq.n	8007642 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800763c:	787b      	ldrb	r3, [r7, #1]
 800763e:	2bff      	cmp	r3, #255	@ 0xff
 8007640:	d101      	bne.n	8007646 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007642:	7dfb      	ldrb	r3, [r7, #23]
 8007644:	e006      	b.n	8007654 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007646:	7dfb      	ldrb	r3, [r7, #23]
 8007648:	3301      	adds	r3, #1
 800764a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800764c:	7dfb      	ldrb	r3, [r7, #23]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d9d6      	bls.n	8007600 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007652:	23ff      	movs	r3, #255	@ 0xff
}
 8007654:	4618      	mov	r0, r3
 8007656:	371c      	adds	r7, #28
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f003 fae1 	bl	800ac30 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800766e:	2101      	movs	r1, #1
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f003 fbfa 	bl	800ae6a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b088      	sub	sp, #32
 8007684:	af04      	add	r7, sp, #16
 8007686:	6078      	str	r0, [r7, #4]
  volatile USBH_StatusTypeDef status = USBH_FAIL;
 8007688:	2302      	movs	r3, #2
 800768a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800768c:	2300      	movs	r3, #0
 800768e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007696:	b2db      	uxtb	r3, r3
 8007698:	2b01      	cmp	r3, #1
 800769a:	d102      	bne.n	80076a2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2203      	movs	r2, #3
 80076a0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	2b0b      	cmp	r3, #11
 80076aa:	f200 81bb 	bhi.w	8007a24 <USBH_Process+0x3a4>
 80076ae:	a201      	add	r2, pc, #4	@ (adr r2, 80076b4 <USBH_Process+0x34>)
 80076b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b4:	080076e5 	.word	0x080076e5
 80076b8:	08007717 	.word	0x08007717
 80076bc:	0800777f 	.word	0x0800777f
 80076c0:	080079bf 	.word	0x080079bf
 80076c4:	08007a25 	.word	0x08007a25
 80076c8:	0800781f 	.word	0x0800781f
 80076cc:	08007965 	.word	0x08007965
 80076d0:	08007855 	.word	0x08007855
 80076d4:	08007875 	.word	0x08007875
 80076d8:	08007893 	.word	0x08007893
 80076dc:	080078d7 	.word	0x080078d7
 80076e0:	080079a7 	.word	0x080079a7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f000 819b 	beq.w	8007a28 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2201      	movs	r2, #1
 80076f6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80076f8:	20c8      	movs	r0, #200	@ 0xc8
 80076fa:	f003 fc33 	bl	800af64 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f003 faf3 	bl	800acea <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007714:	e188      	b.n	8007a28 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800771c:	2b01      	cmp	r3, #1
 800771e:	d107      	bne.n	8007730 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2202      	movs	r2, #2
 800772c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800772e:	e18a      	b.n	8007a46 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007736:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800773a:	d914      	bls.n	8007766 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007742:	3301      	adds	r3, #1
 8007744:	b2da      	uxtb	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007752:	2b03      	cmp	r3, #3
 8007754:	d903      	bls.n	800775e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	220d      	movs	r2, #13
 800775a:	701a      	strb	r2, [r3, #0]
      break;
 800775c:	e173      	b.n	8007a46 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	701a      	strb	r2, [r3, #0]
      break;
 8007764:	e16f      	b.n	8007a46 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800776c:	f103 020a 	add.w	r2, r3, #10
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007776:	200a      	movs	r0, #10
 8007778:	f003 fbf4 	bl	800af64 <USBH_Delay>
      break;
 800777c:	e163      	b.n	8007a46 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007784:	2b00      	cmp	r3, #0
 8007786:	d005      	beq.n	8007794 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800778e:	2104      	movs	r1, #4
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007794:	2064      	movs	r0, #100	@ 0x64
 8007796:	f003 fbe5 	bl	800af64 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f003 fa7e 	bl	800ac9c <USBH_LL_GetSpeed>
 80077a0:	4603      	mov	r3, r0
 80077a2:	461a      	mov	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2205      	movs	r2, #5
 80077ae:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80077b0:	2100      	movs	r1, #0
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f001 fa9b 	bl	8008cee <USBH_AllocPipe>
 80077b8:	4603      	mov	r3, r0
 80077ba:	461a      	mov	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80077c0:	2180      	movs	r1, #128	@ 0x80
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f001 fa93 	bl	8008cee <USBH_AllocPipe>
 80077c8:	4603      	mov	r3, r0
 80077ca:	461a      	mov	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	7919      	ldrb	r1, [r3, #4]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80077e4:	9202      	str	r2, [sp, #8]
 80077e6:	2200      	movs	r2, #0
 80077e8:	9201      	str	r2, [sp, #4]
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	4603      	mov	r3, r0
 80077ee:	2280      	movs	r2, #128	@ 0x80
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f001 fa4d 	bl	8008c90 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	7959      	ldrb	r1, [r3, #5]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800780a:	9202      	str	r2, [sp, #8]
 800780c:	2200      	movs	r2, #0
 800780e:	9201      	str	r2, [sp, #4]
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	4603      	mov	r3, r0
 8007814:	2200      	movs	r2, #0
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f001 fa3a 	bl	8008c90 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800781c:	e113      	b.n	8007a46 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 f916 	bl	8007a50 <USBH_HandleEnum>
 8007824:	4603      	mov	r3, r0
 8007826:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007828:	7bbb      	ldrb	r3, [r7, #14]
 800782a:	b2db      	uxtb	r3, r3
 800782c:	2b00      	cmp	r3, #0
 800782e:	f040 80fd 	bne.w	8007a2c <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007840:	2b01      	cmp	r3, #1
 8007842:	d103      	bne.n	800784c <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2208      	movs	r2, #8
 8007848:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800784a:	e0ef      	b.n	8007a2c <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2207      	movs	r2, #7
 8007850:	701a      	strb	r2, [r3, #0]
      break;
 8007852:	e0eb      	b.n	8007a2c <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800785a:	2b00      	cmp	r3, #0
 800785c:	f000 80e8 	beq.w	8007a30 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007866:	2101      	movs	r1, #1
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2208      	movs	r2, #8
 8007870:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007872:	e0dd      	b.n	8007a30 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800787a:	4619      	mov	r1, r3
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fc3a 	bl	80080f6 <USBH_SetCfg>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	f040 80d5 	bne.w	8007a34 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2209      	movs	r2, #9
 800788e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007890:	e0d0      	b.n	8007a34 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007898:	f003 0320 	and.w	r3, r3, #32
 800789c:	2b00      	cmp	r3, #0
 800789e:	d016      	beq.n	80078ce <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80078a0:	2101      	movs	r1, #1
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fc4a 	bl	800813c <USBH_SetFeature>
 80078a8:	4603      	mov	r3, r0
 80078aa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80078ac:	7bbb      	ldrb	r3, [r7, #14]
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d103      	bne.n	80078bc <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	220a      	movs	r2, #10
 80078b8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80078ba:	e0bd      	b.n	8007a38 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 80078bc:	7bbb      	ldrb	r3, [r7, #14]
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	2b03      	cmp	r3, #3
 80078c2:	f040 80b9 	bne.w	8007a38 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	220a      	movs	r2, #10
 80078ca:	701a      	strb	r2, [r3, #0]
      break;
 80078cc:	e0b4      	b.n	8007a38 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	220a      	movs	r2, #10
 80078d2:	701a      	strb	r2, [r3, #0]
      break;
 80078d4:	e0b0      	b.n	8007a38 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f000 80ad 	beq.w	8007a3c <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80078ea:	2300      	movs	r3, #0
 80078ec:	73fb      	strb	r3, [r7, #15]
 80078ee:	e016      	b.n	800791e <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80078f0:	7bfa      	ldrb	r2, [r7, #15]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	32de      	adds	r2, #222	@ 0xde
 80078f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078fa:	791a      	ldrb	r2, [r3, #4]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007902:	429a      	cmp	r2, r3
 8007904:	d108      	bne.n	8007918 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007906:	7bfa      	ldrb	r2, [r7, #15]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	32de      	adds	r2, #222	@ 0xde
 800790c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007916:	e005      	b.n	8007924 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007918:	7bfb      	ldrb	r3, [r7, #15]
 800791a:	3301      	adds	r3, #1
 800791c:	73fb      	strb	r3, [r7, #15]
 800791e:	7bfb      	ldrb	r3, [r7, #15]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d0e5      	beq.n	80078f0 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800792a:	2b00      	cmp	r3, #0
 800792c:	d016      	beq.n	800795c <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	4798      	blx	r3
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d109      	bne.n	8007954 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2206      	movs	r2, #6
 8007944:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800794c:	2103      	movs	r1, #3
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007952:	e073      	b.n	8007a3c <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	220d      	movs	r2, #13
 8007958:	701a      	strb	r2, [r3, #0]
      break;
 800795a:	e06f      	b.n	8007a3c <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	220d      	movs	r2, #13
 8007960:	701a      	strb	r2, [r3, #0]
      break;
 8007962:	e06b      	b.n	8007a3c <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800796a:	2b00      	cmp	r3, #0
 800796c:	d017      	beq.n	800799e <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	4798      	blx	r3
 800797a:	4603      	mov	r3, r0
 800797c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800797e:	7bbb      	ldrb	r3, [r7, #14]
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d103      	bne.n	800798e <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	220b      	movs	r2, #11
 800798a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800798c:	e058      	b.n	8007a40 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800798e:	7bbb      	ldrb	r3, [r7, #14]
 8007990:	b2db      	uxtb	r3, r3
 8007992:	2b02      	cmp	r3, #2
 8007994:	d154      	bne.n	8007a40 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	220d      	movs	r2, #13
 800799a:	701a      	strb	r2, [r3, #0]
      break;
 800799c:	e050      	b.n	8007a40 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	220d      	movs	r2, #13
 80079a2:	701a      	strb	r2, [r3, #0]
      break;
 80079a4:	e04c      	b.n	8007a40 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d049      	beq.n	8007a44 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80079b6:	695b      	ldr	r3, [r3, #20]
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	4798      	blx	r3
      }
      break;
 80079bc:	e042      	b.n	8007a44 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f7ff fd4b 	bl	8007462 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d009      	beq.n	80079ea <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d005      	beq.n	8007a00 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80079fa:	2105      	movs	r1, #5
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d107      	bne.n	8007a1c <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f7ff fe23 	bl	8007660 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007a1a:	e014      	b.n	8007a46 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f003 f907 	bl	800ac30 <USBH_LL_Start>
      break;
 8007a22:	e010      	b.n	8007a46 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007a24:	bf00      	nop
 8007a26:	e00e      	b.n	8007a46 <USBH_Process+0x3c6>
      break;
 8007a28:	bf00      	nop
 8007a2a:	e00c      	b.n	8007a46 <USBH_Process+0x3c6>
      break;
 8007a2c:	bf00      	nop
 8007a2e:	e00a      	b.n	8007a46 <USBH_Process+0x3c6>
    break;
 8007a30:	bf00      	nop
 8007a32:	e008      	b.n	8007a46 <USBH_Process+0x3c6>
      break;
 8007a34:	bf00      	nop
 8007a36:	e006      	b.n	8007a46 <USBH_Process+0x3c6>
      break;
 8007a38:	bf00      	nop
 8007a3a:	e004      	b.n	8007a46 <USBH_Process+0x3c6>
      break;
 8007a3c:	bf00      	nop
 8007a3e:	e002      	b.n	8007a46 <USBH_Process+0x3c6>
      break;
 8007a40:	bf00      	nop
 8007a42:	e000      	b.n	8007a46 <USBH_Process+0x3c6>
      break;
 8007a44:	bf00      	nop
  }
  return USBH_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b088      	sub	sp, #32
 8007a54:	af04      	add	r7, sp, #16
 8007a56:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	785b      	ldrb	r3, [r3, #1]
 8007a64:	2b07      	cmp	r3, #7
 8007a66:	f200 81bd 	bhi.w	8007de4 <USBH_HandleEnum+0x394>
 8007a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a70 <USBH_HandleEnum+0x20>)
 8007a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a70:	08007a91 	.word	0x08007a91
 8007a74:	08007b4b 	.word	0x08007b4b
 8007a78:	08007bb5 	.word	0x08007bb5
 8007a7c:	08007c3f 	.word	0x08007c3f
 8007a80:	08007ca9 	.word	0x08007ca9
 8007a84:	08007d19 	.word	0x08007d19
 8007a88:	08007d5f 	.word	0x08007d5f
 8007a8c:	08007da5 	.word	0x08007da5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007a90:	2108      	movs	r1, #8
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fa4c 	bl	8007f30 <USBH_Get_DevDesc>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a9c:	7bbb      	ldrb	r3, [r7, #14]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d12e      	bne.n	8007b00 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	7919      	ldrb	r1, [r3, #4]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007ac6:	9202      	str	r2, [sp, #8]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	9201      	str	r2, [sp, #4]
 8007acc:	9300      	str	r3, [sp, #0]
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2280      	movs	r2, #128	@ 0x80
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f001 f8dc 	bl	8008c90 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	7959      	ldrb	r1, [r3, #5]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007aec:	9202      	str	r2, [sp, #8]
 8007aee:	2200      	movs	r2, #0
 8007af0:	9201      	str	r2, [sp, #4]
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	4603      	mov	r3, r0
 8007af6:	2200      	movs	r2, #0
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f001 f8c9 	bl	8008c90 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007afe:	e173      	b.n	8007de8 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b00:	7bbb      	ldrb	r3, [r7, #14]
 8007b02:	2b03      	cmp	r3, #3
 8007b04:	f040 8170 	bne.w	8007de8 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007b0e:	3301      	adds	r3, #1
 8007b10:	b2da      	uxtb	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007b1e:	2b03      	cmp	r3, #3
 8007b20:	d903      	bls.n	8007b2a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	220d      	movs	r2, #13
 8007b26:	701a      	strb	r2, [r3, #0]
      break;
 8007b28:	e15e      	b.n	8007de8 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	795b      	ldrb	r3, [r3, #5]
 8007b2e:	4619      	mov	r1, r3
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f001 f8fd 	bl	8008d30 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	791b      	ldrb	r3, [r3, #4]
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f001 f8f7 	bl	8008d30 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	701a      	strb	r2, [r3, #0]
      break;
 8007b48:	e14e      	b.n	8007de8 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007b4a:	2112      	movs	r1, #18
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f9ef 	bl	8007f30 <USBH_Get_DevDesc>
 8007b52:	4603      	mov	r3, r0
 8007b54:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b56:	7bbb      	ldrb	r3, [r7, #14]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d103      	bne.n	8007b64 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2202      	movs	r2, #2
 8007b60:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b62:	e143      	b.n	8007dec <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b64:	7bbb      	ldrb	r3, [r7, #14]
 8007b66:	2b03      	cmp	r3, #3
 8007b68:	f040 8140 	bne.w	8007dec <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007b72:	3301      	adds	r3, #1
 8007b74:	b2da      	uxtb	r2, r3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007b82:	2b03      	cmp	r3, #3
 8007b84:	d903      	bls.n	8007b8e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	220d      	movs	r2, #13
 8007b8a:	701a      	strb	r2, [r3, #0]
      break;
 8007b8c:	e12e      	b.n	8007dec <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	795b      	ldrb	r3, [r3, #5]
 8007b92:	4619      	mov	r1, r3
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f001 f8cb 	bl	8008d30 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	791b      	ldrb	r3, [r3, #4]
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f001 f8c5 	bl	8008d30 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	701a      	strb	r2, [r3, #0]
      break;
 8007bb2:	e11b      	b.n	8007dec <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007bb4:	2101      	movs	r1, #1
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fa79 	bl	80080ae <USBH_SetAddress>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007bc0:	7bbb      	ldrb	r3, [r7, #14]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d130      	bne.n	8007c28 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007bc6:	2002      	movs	r0, #2
 8007bc8:	f003 f9cc 	bl	800af64 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2203      	movs	r2, #3
 8007bd8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	7919      	ldrb	r1, [r3, #4]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007bee:	9202      	str	r2, [sp, #8]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	9201      	str	r2, [sp, #4]
 8007bf4:	9300      	str	r3, [sp, #0]
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2280      	movs	r2, #128	@ 0x80
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f001 f848 	bl	8008c90 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	7959      	ldrb	r1, [r3, #5]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007c14:	9202      	str	r2, [sp, #8]
 8007c16:	2200      	movs	r2, #0
 8007c18:	9201      	str	r2, [sp, #4]
 8007c1a:	9300      	str	r3, [sp, #0]
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2200      	movs	r2, #0
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f001 f835 	bl	8008c90 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007c26:	e0e3      	b.n	8007df0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c28:	7bbb      	ldrb	r3, [r7, #14]
 8007c2a:	2b03      	cmp	r3, #3
 8007c2c:	f040 80e0 	bne.w	8007df0 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	220d      	movs	r2, #13
 8007c34:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	705a      	strb	r2, [r3, #1]
      break;
 8007c3c:	e0d8      	b.n	8007df0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007c3e:	2109      	movs	r1, #9
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 f9a1 	bl	8007f88 <USBH_Get_CfgDesc>
 8007c46:	4603      	mov	r3, r0
 8007c48:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c4a:	7bbb      	ldrb	r3, [r7, #14]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d103      	bne.n	8007c58 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2204      	movs	r2, #4
 8007c54:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007c56:	e0cd      	b.n	8007df4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c58:	7bbb      	ldrb	r3, [r7, #14]
 8007c5a:	2b03      	cmp	r3, #3
 8007c5c:	f040 80ca 	bne.w	8007df4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007c66:	3301      	adds	r3, #1
 8007c68:	b2da      	uxtb	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007c76:	2b03      	cmp	r3, #3
 8007c78:	d903      	bls.n	8007c82 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	220d      	movs	r2, #13
 8007c7e:	701a      	strb	r2, [r3, #0]
      break;
 8007c80:	e0b8      	b.n	8007df4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	795b      	ldrb	r3, [r3, #5]
 8007c86:	4619      	mov	r1, r3
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f001 f851 	bl	8008d30 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	791b      	ldrb	r3, [r3, #4]
 8007c92:	4619      	mov	r1, r3
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f001 f84b 	bl	8008d30 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	701a      	strb	r2, [r3, #0]
      break;
 8007ca6:	e0a5      	b.n	8007df4 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007cae:	4619      	mov	r1, r3
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 f969 	bl	8007f88 <USBH_Get_CfgDesc>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007cba:	7bbb      	ldrb	r3, [r7, #14]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d103      	bne.n	8007cc8 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2205      	movs	r2, #5
 8007cc4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007cc6:	e097      	b.n	8007df8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cc8:	7bbb      	ldrb	r3, [r7, #14]
 8007cca:	2b03      	cmp	r3, #3
 8007ccc:	f040 8094 	bne.w	8007df8 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	b2da      	uxtb	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007ce6:	2b03      	cmp	r3, #3
 8007ce8:	d903      	bls.n	8007cf2 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	220d      	movs	r2, #13
 8007cee:	701a      	strb	r2, [r3, #0]
      break;
 8007cf0:	e082      	b.n	8007df8 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	795b      	ldrb	r3, [r3, #5]
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f001 f819 	bl	8008d30 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	791b      	ldrb	r3, [r3, #4]
 8007d02:	4619      	mov	r1, r3
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f001 f813 	bl	8008d30 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	701a      	strb	r2, [r3, #0]
      break;
 8007d16:	e06f      	b.n	8007df8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d019      	beq.n	8007d56 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007d2e:	23ff      	movs	r3, #255	@ 0xff
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 f953 	bl	8007fdc <USBH_Get_StringDesc>
 8007d36:	4603      	mov	r3, r0
 8007d38:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d3a:	7bbb      	ldrb	r3, [r7, #14]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d103      	bne.n	8007d48 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2206      	movs	r2, #6
 8007d44:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007d46:	e059      	b.n	8007dfc <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d48:	7bbb      	ldrb	r3, [r7, #14]
 8007d4a:	2b03      	cmp	r3, #3
 8007d4c:	d156      	bne.n	8007dfc <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2206      	movs	r2, #6
 8007d52:	705a      	strb	r2, [r3, #1]
      break;
 8007d54:	e052      	b.n	8007dfc <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2206      	movs	r2, #6
 8007d5a:	705a      	strb	r2, [r3, #1]
      break;
 8007d5c:	e04e      	b.n	8007dfc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d019      	beq.n	8007d9c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007d74:	23ff      	movs	r3, #255	@ 0xff
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 f930 	bl	8007fdc <USBH_Get_StringDesc>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d80:	7bbb      	ldrb	r3, [r7, #14]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d103      	bne.n	8007d8e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2207      	movs	r2, #7
 8007d8a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007d8c:	e038      	b.n	8007e00 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d8e:	7bbb      	ldrb	r3, [r7, #14]
 8007d90:	2b03      	cmp	r3, #3
 8007d92:	d135      	bne.n	8007e00 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2207      	movs	r2, #7
 8007d98:	705a      	strb	r2, [r3, #1]
      break;
 8007d9a:	e031      	b.n	8007e00 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2207      	movs	r2, #7
 8007da0:	705a      	strb	r2, [r3, #1]
      break;
 8007da2:	e02d      	b.n	8007e00 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d017      	beq.n	8007dde <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007dba:	23ff      	movs	r3, #255	@ 0xff
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 f90d 	bl	8007fdc <USBH_Get_StringDesc>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007dc6:	7bbb      	ldrb	r3, [r7, #14]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d102      	bne.n	8007dd2 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007dd0:	e018      	b.n	8007e04 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007dd2:	7bbb      	ldrb	r3, [r7, #14]
 8007dd4:	2b03      	cmp	r3, #3
 8007dd6:	d115      	bne.n	8007e04 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	73fb      	strb	r3, [r7, #15]
      break;
 8007ddc:	e012      	b.n	8007e04 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	73fb      	strb	r3, [r7, #15]
      break;
 8007de2:	e00f      	b.n	8007e04 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007de4:	bf00      	nop
 8007de6:	e00e      	b.n	8007e06 <USBH_HandleEnum+0x3b6>
      break;
 8007de8:	bf00      	nop
 8007dea:	e00c      	b.n	8007e06 <USBH_HandleEnum+0x3b6>
      break;
 8007dec:	bf00      	nop
 8007dee:	e00a      	b.n	8007e06 <USBH_HandleEnum+0x3b6>
      break;
 8007df0:	bf00      	nop
 8007df2:	e008      	b.n	8007e06 <USBH_HandleEnum+0x3b6>
      break;
 8007df4:	bf00      	nop
 8007df6:	e006      	b.n	8007e06 <USBH_HandleEnum+0x3b6>
      break;
 8007df8:	bf00      	nop
 8007dfa:	e004      	b.n	8007e06 <USBH_HandleEnum+0x3b6>
      break;
 8007dfc:	bf00      	nop
 8007dfe:	e002      	b.n	8007e06 <USBH_HandleEnum+0x3b6>
      break;
 8007e00:	bf00      	nop
 8007e02:	e000      	b.n	8007e06 <USBH_HandleEnum+0x3b6>
      break;
 8007e04:	bf00      	nop
  }
  return Status;
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	683a      	ldr	r2, [r7, #0]
 8007e1e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007e22:	bf00      	nop
 8007e24:	370c      	adds	r7, #12
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr

08007e2e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b082      	sub	sp, #8
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007e3c:	1c5a      	adds	r2, r3, #1
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f804 	bl	8007e52 <USBH_HandleSof>
}
 8007e4a:	bf00      	nop
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b082      	sub	sp, #8
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	2b0b      	cmp	r3, #11
 8007e62:	d10a      	bne.n	8007e7a <USBH_HandleSof+0x28>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d005      	beq.n	8007e7a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	4798      	blx	r3
  }
}
 8007e7a:	bf00      	nop
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007e82:	b480      	push	{r7}
 8007e84:	b083      	sub	sp, #12
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007e92:	bf00      	nop
}
 8007e94:	370c      	adds	r7, #12
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b083      	sub	sp, #12
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007eae:	bf00      	nop
}
 8007eb0:	370c      	adds	r7, #12
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007eba:	b480      	push	{r7}
 8007ebc:	b083      	sub	sp, #12
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f002 feac 	bl	800ac66 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	791b      	ldrb	r3, [r3, #4]
 8007f12:	4619      	mov	r1, r3
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 ff0b 	bl	8008d30 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	795b      	ldrb	r3, [r3, #5]
 8007f1e:	4619      	mov	r1, r3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 ff05 	bl	8008d30 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007f26:	2300      	movs	r3, #0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af02      	add	r7, sp, #8
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	460b      	mov	r3, r1
 8007f3a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007f3c:	887b      	ldrh	r3, [r7, #2]
 8007f3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f42:	d901      	bls.n	8007f48 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007f44:	2303      	movs	r3, #3
 8007f46:	e01b      	b.n	8007f80 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007f4e:	887b      	ldrh	r3, [r7, #2]
 8007f50:	9300      	str	r3, [sp, #0]
 8007f52:	4613      	mov	r3, r2
 8007f54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007f58:	2100      	movs	r1, #0
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 f872 	bl	8008044 <USBH_GetDescriptor>
 8007f60:	4603      	mov	r3, r0
 8007f62:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007f64:	7bfb      	ldrb	r3, [r7, #15]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d109      	bne.n	8007f7e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007f70:	887a      	ldrh	r2, [r7, #2]
 8007f72:	4619      	mov	r1, r3
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 f929 	bl	80081cc <USBH_ParseDevDesc>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b086      	sub	sp, #24
 8007f8c:	af02      	add	r7, sp, #8
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	460b      	mov	r3, r1
 8007f92:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	331c      	adds	r3, #28
 8007f98:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007f9a:	887b      	ldrh	r3, [r7, #2]
 8007f9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fa0:	d901      	bls.n	8007fa6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	e016      	b.n	8007fd4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007fa6:	887b      	ldrh	r3, [r7, #2]
 8007fa8:	9300      	str	r3, [sp, #0]
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 f846 	bl	8008044 <USBH_GetDescriptor>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007fbc:	7bfb      	ldrb	r3, [r7, #15]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d107      	bne.n	8007fd2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007fc2:	887b      	ldrh	r3, [r7, #2]
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	68b9      	ldr	r1, [r7, #8]
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 f9af 	bl	800832c <USBH_ParseCfgDesc>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b088      	sub	sp, #32
 8007fe0:	af02      	add	r7, sp, #8
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	607a      	str	r2, [r7, #4]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	460b      	mov	r3, r1
 8007fea:	72fb      	strb	r3, [r7, #11]
 8007fec:	4613      	mov	r3, r2
 8007fee:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007ff0:	893b      	ldrh	r3, [r7, #8]
 8007ff2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ff6:	d802      	bhi.n	8007ffe <USBH_Get_StringDesc+0x22>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d101      	bne.n	8008002 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007ffe:	2303      	movs	r3, #3
 8008000:	e01c      	b.n	800803c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8008002:	7afb      	ldrb	r3, [r7, #11]
 8008004:	b29b      	uxth	r3, r3
 8008006:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800800a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008012:	893b      	ldrh	r3, [r7, #8]
 8008014:	9300      	str	r3, [sp, #0]
 8008016:	460b      	mov	r3, r1
 8008018:	2100      	movs	r1, #0
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f000 f812 	bl	8008044 <USBH_GetDescriptor>
 8008020:	4603      	mov	r3, r0
 8008022:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008024:	7dfb      	ldrb	r3, [r7, #23]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d107      	bne.n	800803a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008030:	893a      	ldrh	r2, [r7, #8]
 8008032:	6879      	ldr	r1, [r7, #4]
 8008034:	4618      	mov	r0, r3
 8008036:	f000 fb8d 	bl	8008754 <USBH_ParseStringDesc>
  }

  return status;
 800803a:	7dfb      	ldrb	r3, [r7, #23]
}
 800803c:	4618      	mov	r0, r3
 800803e:	3718      	adds	r7, #24
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	607b      	str	r3, [r7, #4]
 800804e:	460b      	mov	r3, r1
 8008050:	72fb      	strb	r3, [r7, #11]
 8008052:	4613      	mov	r3, r2
 8008054:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	789b      	ldrb	r3, [r3, #2]
 800805a:	2b01      	cmp	r3, #1
 800805c:	d11c      	bne.n	8008098 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800805e:	7afb      	ldrb	r3, [r7, #11]
 8008060:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008064:	b2da      	uxtb	r2, r3
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2206      	movs	r2, #6
 800806e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	893a      	ldrh	r2, [r7, #8]
 8008074:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008076:	893b      	ldrh	r3, [r7, #8]
 8008078:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800807c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008080:	d104      	bne.n	800808c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f240 4209 	movw	r2, #1033	@ 0x409
 8008088:	829a      	strh	r2, [r3, #20]
 800808a:	e002      	b.n	8008092 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	8b3a      	ldrh	r2, [r7, #24]
 8008096:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008098:	8b3b      	ldrh	r3, [r7, #24]
 800809a:	461a      	mov	r2, r3
 800809c:	6879      	ldr	r1, [r7, #4]
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f000 fba5 	bl	80087ee <USBH_CtlReq>
 80080a4:	4603      	mov	r3, r0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b082      	sub	sp, #8
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
 80080b6:	460b      	mov	r3, r1
 80080b8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	789b      	ldrb	r3, [r3, #2]
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d10f      	bne.n	80080e2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2205      	movs	r2, #5
 80080cc:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80080ce:	78fb      	ldrb	r3, [r7, #3]
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80080e2:	2200      	movs	r2, #0
 80080e4:	2100      	movs	r1, #0
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fb81 	bl	80087ee <USBH_CtlReq>
 80080ec:	4603      	mov	r3, r0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3708      	adds	r7, #8
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b082      	sub	sp, #8
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
 80080fe:	460b      	mov	r3, r1
 8008100:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	789b      	ldrb	r3, [r3, #2]
 8008106:	2b01      	cmp	r3, #1
 8008108:	d10e      	bne.n	8008128 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2209      	movs	r2, #9
 8008114:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	887a      	ldrh	r2, [r7, #2]
 800811a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008128:	2200      	movs	r2, #0
 800812a:	2100      	movs	r1, #0
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 fb5e 	bl	80087ee <USBH_CtlReq>
 8008132:	4603      	mov	r3, r0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	460b      	mov	r3, r1
 8008146:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	789b      	ldrb	r3, [r3, #2]
 800814c:	2b01      	cmp	r3, #1
 800814e:	d10f      	bne.n	8008170 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2203      	movs	r2, #3
 800815a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800815c:	78fb      	ldrb	r3, [r7, #3]
 800815e:	b29a      	uxth	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008170:	2200      	movs	r2, #0
 8008172:	2100      	movs	r1, #0
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 fb3a 	bl	80087ee <USBH_CtlReq>
 800817a:	4603      	mov	r3, r0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	460b      	mov	r3, r1
 800818e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	789b      	ldrb	r3, [r3, #2]
 8008194:	2b01      	cmp	r3, #1
 8008196:	d10f      	bne.n	80081b8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2202      	movs	r2, #2
 800819c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2201      	movs	r2, #1
 80081a2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80081aa:	78fb      	ldrb	r3, [r7, #3]
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80081b8:	2200      	movs	r2, #0
 80081ba:	2100      	movs	r1, #0
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 fb16 	bl	80087ee <USBH_CtlReq>
 80081c2:	4603      	mov	r3, r0
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3708      	adds	r7, #8
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b087      	sub	sp, #28
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	4613      	mov	r3, r2
 80081d8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80081e0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80081e2:	2300      	movs	r3, #0
 80081e4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d101      	bne.n	80081f0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80081ec:	2302      	movs	r3, #2
 80081ee:	e094      	b.n	800831a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	781a      	ldrb	r2, [r3, #0]
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	785a      	ldrb	r2, [r3, #1]
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	3302      	adds	r3, #2
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	461a      	mov	r2, r3
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	3303      	adds	r3, #3
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	021b      	lsls	r3, r3, #8
 8008210:	b29b      	uxth	r3, r3
 8008212:	4313      	orrs	r3, r2
 8008214:	b29a      	uxth	r2, r3
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	791a      	ldrb	r2, [r3, #4]
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	795a      	ldrb	r2, [r3, #5]
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	799a      	ldrb	r2, [r3, #6]
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	79da      	ldrb	r2, [r3, #7]
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008240:	2b00      	cmp	r3, #0
 8008242:	d004      	beq.n	800824e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800824a:	2b01      	cmp	r3, #1
 800824c:	d11b      	bne.n	8008286 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	79db      	ldrb	r3, [r3, #7]
 8008252:	2b20      	cmp	r3, #32
 8008254:	dc0f      	bgt.n	8008276 <USBH_ParseDevDesc+0xaa>
 8008256:	2b08      	cmp	r3, #8
 8008258:	db0f      	blt.n	800827a <USBH_ParseDevDesc+0xae>
 800825a:	3b08      	subs	r3, #8
 800825c:	4a32      	ldr	r2, [pc, #200]	@ (8008328 <USBH_ParseDevDesc+0x15c>)
 800825e:	fa22 f303 	lsr.w	r3, r2, r3
 8008262:	f003 0301 	and.w	r3, r3, #1
 8008266:	2b00      	cmp	r3, #0
 8008268:	bf14      	ite	ne
 800826a:	2301      	movne	r3, #1
 800826c:	2300      	moveq	r3, #0
 800826e:	b2db      	uxtb	r3, r3
 8008270:	2b00      	cmp	r3, #0
 8008272:	d106      	bne.n	8008282 <USBH_ParseDevDesc+0xb6>
 8008274:	e001      	b.n	800827a <USBH_ParseDevDesc+0xae>
 8008276:	2b40      	cmp	r3, #64	@ 0x40
 8008278:	d003      	beq.n	8008282 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	2208      	movs	r2, #8
 800827e:	71da      	strb	r2, [r3, #7]
        break;
 8008280:	e000      	b.n	8008284 <USBH_ParseDevDesc+0xb8>
        break;
 8008282:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008284:	e00e      	b.n	80082a4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800828c:	2b02      	cmp	r3, #2
 800828e:	d107      	bne.n	80082a0 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	79db      	ldrb	r3, [r3, #7]
 8008294:	2b08      	cmp	r3, #8
 8008296:	d005      	beq.n	80082a4 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	2208      	movs	r2, #8
 800829c:	71da      	strb	r2, [r3, #7]
 800829e:	e001      	b.n	80082a4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80082a0:	2303      	movs	r3, #3
 80082a2:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80082a4:	88fb      	ldrh	r3, [r7, #6]
 80082a6:	2b08      	cmp	r3, #8
 80082a8:	d936      	bls.n	8008318 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	3308      	adds	r3, #8
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	461a      	mov	r2, r3
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	3309      	adds	r3, #9
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	021b      	lsls	r3, r3, #8
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	4313      	orrs	r3, r2
 80082be:	b29a      	uxth	r2, r3
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	330a      	adds	r3, #10
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	461a      	mov	r2, r3
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	330b      	adds	r3, #11
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	021b      	lsls	r3, r3, #8
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	4313      	orrs	r3, r2
 80082d8:	b29a      	uxth	r2, r3
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	330c      	adds	r3, #12
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	461a      	mov	r2, r3
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	330d      	adds	r3, #13
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	021b      	lsls	r3, r3, #8
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	4313      	orrs	r3, r2
 80082f2:	b29a      	uxth	r2, r3
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	7b9a      	ldrb	r2, [r3, #14]
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	7bda      	ldrb	r2, [r3, #15]
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	7c1a      	ldrb	r2, [r3, #16]
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	7c5a      	ldrb	r2, [r3, #17]
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008318:	7dfb      	ldrb	r3, [r7, #23]
}
 800831a:	4618      	mov	r0, r3
 800831c:	371c      	adds	r7, #28
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	01000101 	.word	0x01000101

0800832c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b08c      	sub	sp, #48	@ 0x30
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	4613      	mov	r3, r2
 8008338:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008340:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008342:	2300      	movs	r3, #0
 8008344:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008348:	2300      	movs	r3, #0
 800834a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800834e:	2300      	movs	r3, #0
 8008350:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d101      	bne.n	800835e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800835a:	2302      	movs	r3, #2
 800835c:	e0da      	b.n	8008514 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	781a      	ldrb	r2, [r3, #0]
 8008366:	6a3b      	ldr	r3, [r7, #32]
 8008368:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	785a      	ldrb	r2, [r3, #1]
 800836e:	6a3b      	ldr	r3, [r7, #32]
 8008370:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	3302      	adds	r3, #2
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	461a      	mov	r2, r3
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	3303      	adds	r3, #3
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	021b      	lsls	r3, r3, #8
 8008382:	b29b      	uxth	r3, r3
 8008384:	4313      	orrs	r3, r2
 8008386:	b29b      	uxth	r3, r3
 8008388:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800838c:	bf28      	it	cs
 800838e:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008392:	b29a      	uxth	r2, r3
 8008394:	6a3b      	ldr	r3, [r7, #32]
 8008396:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	791a      	ldrb	r2, [r3, #4]
 800839c:	6a3b      	ldr	r3, [r7, #32]
 800839e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	795a      	ldrb	r2, [r3, #5]
 80083a4:	6a3b      	ldr	r3, [r7, #32]
 80083a6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	799a      	ldrb	r2, [r3, #6]
 80083ac:	6a3b      	ldr	r3, [r7, #32]
 80083ae:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	79da      	ldrb	r2, [r3, #7]
 80083b4:	6a3b      	ldr	r3, [r7, #32]
 80083b6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	7a1a      	ldrb	r2, [r3, #8]
 80083bc:	6a3b      	ldr	r3, [r7, #32]
 80083be:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80083c0:	6a3b      	ldr	r3, [r7, #32]
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	2b09      	cmp	r3, #9
 80083c6:	d002      	beq.n	80083ce <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80083c8:	6a3b      	ldr	r3, [r7, #32]
 80083ca:	2209      	movs	r2, #9
 80083cc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80083ce:	88fb      	ldrh	r3, [r7, #6]
 80083d0:	2b09      	cmp	r3, #9
 80083d2:	f240 809d 	bls.w	8008510 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80083d6:	2309      	movs	r3, #9
 80083d8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80083da:	2300      	movs	r3, #0
 80083dc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80083de:	e081      	b.n	80084e4 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80083e0:	f107 0316 	add.w	r3, r7, #22
 80083e4:	4619      	mov	r1, r3
 80083e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083e8:	f000 f9e7 	bl	80087ba <USBH_GetNextDesc>
 80083ec:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80083ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f0:	785b      	ldrb	r3, [r3, #1]
 80083f2:	2b04      	cmp	r3, #4
 80083f4:	d176      	bne.n	80084e4 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80083f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	2b09      	cmp	r3, #9
 80083fc:	d002      	beq.n	8008404 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80083fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008400:	2209      	movs	r2, #9
 8008402:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008404:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008408:	221a      	movs	r2, #26
 800840a:	fb02 f303 	mul.w	r3, r2, r3
 800840e:	3308      	adds	r3, #8
 8008410:	6a3a      	ldr	r2, [r7, #32]
 8008412:	4413      	add	r3, r2
 8008414:	3302      	adds	r3, #2
 8008416:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008418:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800841a:	69f8      	ldr	r0, [r7, #28]
 800841c:	f000 f87e 	bl	800851c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008420:	2300      	movs	r3, #0
 8008422:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008426:	2300      	movs	r3, #0
 8008428:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800842a:	e043      	b.n	80084b4 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800842c:	f107 0316 	add.w	r3, r7, #22
 8008430:	4619      	mov	r1, r3
 8008432:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008434:	f000 f9c1 	bl	80087ba <USBH_GetNextDesc>
 8008438:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800843a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800843c:	785b      	ldrb	r3, [r3, #1]
 800843e:	2b05      	cmp	r3, #5
 8008440:	d138      	bne.n	80084b4 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	795b      	ldrb	r3, [r3, #5]
 8008446:	2b01      	cmp	r3, #1
 8008448:	d113      	bne.n	8008472 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800844e:	2b02      	cmp	r3, #2
 8008450:	d003      	beq.n	800845a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008452:	69fb      	ldr	r3, [r7, #28]
 8008454:	799b      	ldrb	r3, [r3, #6]
 8008456:	2b03      	cmp	r3, #3
 8008458:	d10b      	bne.n	8008472 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	79db      	ldrb	r3, [r3, #7]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d10b      	bne.n	800847a <USBH_ParseCfgDesc+0x14e>
 8008462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	2b09      	cmp	r3, #9
 8008468:	d007      	beq.n	800847a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800846a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800846c:	2209      	movs	r2, #9
 800846e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008470:	e003      	b.n	800847a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008474:	2207      	movs	r2, #7
 8008476:	701a      	strb	r2, [r3, #0]
 8008478:	e000      	b.n	800847c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800847a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800847c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008480:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008484:	3201      	adds	r2, #1
 8008486:	00d2      	lsls	r2, r2, #3
 8008488:	211a      	movs	r1, #26
 800848a:	fb01 f303 	mul.w	r3, r1, r3
 800848e:	4413      	add	r3, r2
 8008490:	3308      	adds	r3, #8
 8008492:	6a3a      	ldr	r2, [r7, #32]
 8008494:	4413      	add	r3, r2
 8008496:	3304      	adds	r3, #4
 8008498:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800849a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800849c:	69b9      	ldr	r1, [r7, #24]
 800849e:	68f8      	ldr	r0, [r7, #12]
 80084a0:	f000 f870 	bl	8008584 <USBH_ParseEPDesc>
 80084a4:	4603      	mov	r3, r0
 80084a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80084aa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80084ae:	3301      	adds	r3, #1
 80084b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	791b      	ldrb	r3, [r3, #4]
 80084b8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80084bc:	429a      	cmp	r2, r3
 80084be:	d204      	bcs.n	80084ca <USBH_ParseCfgDesc+0x19e>
 80084c0:	6a3b      	ldr	r3, [r7, #32]
 80084c2:	885a      	ldrh	r2, [r3, #2]
 80084c4:	8afb      	ldrh	r3, [r7, #22]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d8b0      	bhi.n	800842c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	791b      	ldrb	r3, [r3, #4]
 80084ce:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d201      	bcs.n	80084da <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80084d6:	2303      	movs	r3, #3
 80084d8:	e01c      	b.n	8008514 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80084da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80084de:	3301      	adds	r3, #1
 80084e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80084e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d805      	bhi.n	80084f8 <USBH_ParseCfgDesc+0x1cc>
 80084ec:	6a3b      	ldr	r3, [r7, #32]
 80084ee:	885a      	ldrh	r2, [r3, #2]
 80084f0:	8afb      	ldrh	r3, [r7, #22]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	f63f af74 	bhi.w	80083e0 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80084f8:	6a3b      	ldr	r3, [r7, #32]
 80084fa:	791b      	ldrb	r3, [r3, #4]
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	bf28      	it	cs
 8008500:	2302      	movcs	r3, #2
 8008502:	b2db      	uxtb	r3, r3
 8008504:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008508:	429a      	cmp	r2, r3
 800850a:	d201      	bcs.n	8008510 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800850c:	2303      	movs	r3, #3
 800850e:	e001      	b.n	8008514 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008510:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008514:	4618      	mov	r0, r3
 8008516:	3730      	adds	r7, #48	@ 0x30
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	781a      	ldrb	r2, [r3, #0]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	785a      	ldrb	r2, [r3, #1]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	789a      	ldrb	r2, [r3, #2]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	78da      	ldrb	r2, [r3, #3]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	3304      	adds	r3, #4
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	2b02      	cmp	r3, #2
 800854e:	bf28      	it	cs
 8008550:	2302      	movcs	r3, #2
 8008552:	b2da      	uxtb	r2, r3
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	795a      	ldrb	r2, [r3, #5]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	799a      	ldrb	r2, [r3, #6]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	79da      	ldrb	r2, [r3, #7]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	7a1a      	ldrb	r2, [r3, #8]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	721a      	strb	r2, [r3, #8]
}
 8008578:	bf00      	nop
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008584:	b480      	push	{r7}
 8008586:	b087      	sub	sp, #28
 8008588:	af00      	add	r7, sp, #0
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	60b9      	str	r1, [r7, #8]
 800858e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008590:	2300      	movs	r3, #0
 8008592:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	781a      	ldrb	r2, [r3, #0]
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	785a      	ldrb	r2, [r3, #1]
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	789a      	ldrb	r2, [r3, #2]
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	78da      	ldrb	r2, [r3, #3]
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	3304      	adds	r3, #4
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	461a      	mov	r2, r3
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	3305      	adds	r3, #5
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	021b      	lsls	r3, r3, #8
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	4313      	orrs	r3, r2
 80085c8:	b29a      	uxth	r2, r3
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	799a      	ldrb	r2, [r3, #6]
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	889b      	ldrh	r3, [r3, #4]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d009      	beq.n	80085f2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80085e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085e6:	d804      	bhi.n	80085f2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80085ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085f0:	d901      	bls.n	80085f6 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80085f2:	2303      	movs	r3, #3
 80085f4:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d136      	bne.n	800866e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	78db      	ldrb	r3, [r3, #3]
 8008604:	f003 0303 	and.w	r3, r3, #3
 8008608:	2b02      	cmp	r3, #2
 800860a:	d108      	bne.n	800861e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	889b      	ldrh	r3, [r3, #4]
 8008610:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008614:	f240 8097 	bls.w	8008746 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008618:	2303      	movs	r3, #3
 800861a:	75fb      	strb	r3, [r7, #23]
 800861c:	e093      	b.n	8008746 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	78db      	ldrb	r3, [r3, #3]
 8008622:	f003 0303 	and.w	r3, r3, #3
 8008626:	2b00      	cmp	r3, #0
 8008628:	d107      	bne.n	800863a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	889b      	ldrh	r3, [r3, #4]
 800862e:	2b40      	cmp	r3, #64	@ 0x40
 8008630:	f240 8089 	bls.w	8008746 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008634:	2303      	movs	r3, #3
 8008636:	75fb      	strb	r3, [r7, #23]
 8008638:	e085      	b.n	8008746 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	78db      	ldrb	r3, [r3, #3]
 800863e:	f003 0303 	and.w	r3, r3, #3
 8008642:	2b01      	cmp	r3, #1
 8008644:	d005      	beq.n	8008652 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	78db      	ldrb	r3, [r3, #3]
 800864a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800864e:	2b03      	cmp	r3, #3
 8008650:	d10a      	bne.n	8008668 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	799b      	ldrb	r3, [r3, #6]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d003      	beq.n	8008662 <USBH_ParseEPDesc+0xde>
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	799b      	ldrb	r3, [r3, #6]
 800865e:	2b10      	cmp	r3, #16
 8008660:	d970      	bls.n	8008744 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008662:	2303      	movs	r3, #3
 8008664:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008666:	e06d      	b.n	8008744 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008668:	2303      	movs	r3, #3
 800866a:	75fb      	strb	r3, [r7, #23]
 800866c:	e06b      	b.n	8008746 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008674:	2b01      	cmp	r3, #1
 8008676:	d13c      	bne.n	80086f2 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	78db      	ldrb	r3, [r3, #3]
 800867c:	f003 0303 	and.w	r3, r3, #3
 8008680:	2b02      	cmp	r3, #2
 8008682:	d005      	beq.n	8008690 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	78db      	ldrb	r3, [r3, #3]
 8008688:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800868c:	2b00      	cmp	r3, #0
 800868e:	d106      	bne.n	800869e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	889b      	ldrh	r3, [r3, #4]
 8008694:	2b40      	cmp	r3, #64	@ 0x40
 8008696:	d956      	bls.n	8008746 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008698:	2303      	movs	r3, #3
 800869a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800869c:	e053      	b.n	8008746 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	78db      	ldrb	r3, [r3, #3]
 80086a2:	f003 0303 	and.w	r3, r3, #3
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d10e      	bne.n	80086c8 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	799b      	ldrb	r3, [r3, #6]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d007      	beq.n	80086c2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80086b6:	2b10      	cmp	r3, #16
 80086b8:	d803      	bhi.n	80086c2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80086be:	2b40      	cmp	r3, #64	@ 0x40
 80086c0:	d941      	bls.n	8008746 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80086c2:	2303      	movs	r3, #3
 80086c4:	75fb      	strb	r3, [r7, #23]
 80086c6:	e03e      	b.n	8008746 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	78db      	ldrb	r3, [r3, #3]
 80086cc:	f003 0303 	and.w	r3, r3, #3
 80086d0:	2b03      	cmp	r3, #3
 80086d2:	d10b      	bne.n	80086ec <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	799b      	ldrb	r3, [r3, #6]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d004      	beq.n	80086e6 <USBH_ParseEPDesc+0x162>
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	889b      	ldrh	r3, [r3, #4]
 80086e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086e4:	d32f      	bcc.n	8008746 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80086e6:	2303      	movs	r3, #3
 80086e8:	75fb      	strb	r3, [r7, #23]
 80086ea:	e02c      	b.n	8008746 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80086ec:	2303      	movs	r3, #3
 80086ee:	75fb      	strb	r3, [r7, #23]
 80086f0:	e029      	b.n	8008746 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d120      	bne.n	800873e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	78db      	ldrb	r3, [r3, #3]
 8008700:	f003 0303 	and.w	r3, r3, #3
 8008704:	2b00      	cmp	r3, #0
 8008706:	d106      	bne.n	8008716 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	889b      	ldrh	r3, [r3, #4]
 800870c:	2b08      	cmp	r3, #8
 800870e:	d01a      	beq.n	8008746 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008710:	2303      	movs	r3, #3
 8008712:	75fb      	strb	r3, [r7, #23]
 8008714:	e017      	b.n	8008746 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	78db      	ldrb	r3, [r3, #3]
 800871a:	f003 0303 	and.w	r3, r3, #3
 800871e:	2b03      	cmp	r3, #3
 8008720:	d10a      	bne.n	8008738 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	799b      	ldrb	r3, [r3, #6]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d003      	beq.n	8008732 <USBH_ParseEPDesc+0x1ae>
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	889b      	ldrh	r3, [r3, #4]
 800872e:	2b08      	cmp	r3, #8
 8008730:	d909      	bls.n	8008746 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008732:	2303      	movs	r3, #3
 8008734:	75fb      	strb	r3, [r7, #23]
 8008736:	e006      	b.n	8008746 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008738:	2303      	movs	r3, #3
 800873a:	75fb      	strb	r3, [r7, #23]
 800873c:	e003      	b.n	8008746 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800873e:	2303      	movs	r3, #3
 8008740:	75fb      	strb	r3, [r7, #23]
 8008742:	e000      	b.n	8008746 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008744:	bf00      	nop
  }

  return status;
 8008746:	7dfb      	ldrb	r3, [r7, #23]
}
 8008748:	4618      	mov	r0, r3
 800874a:	371c      	adds	r7, #28
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008754:	b480      	push	{r7}
 8008756:	b087      	sub	sp, #28
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	4613      	mov	r3, r2
 8008760:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	3301      	adds	r3, #1
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	2b03      	cmp	r3, #3
 800876a:	d120      	bne.n	80087ae <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	1e9a      	subs	r2, r3, #2
 8008772:	88fb      	ldrh	r3, [r7, #6]
 8008774:	4293      	cmp	r3, r2
 8008776:	bf28      	it	cs
 8008778:	4613      	movcs	r3, r2
 800877a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	3302      	adds	r3, #2
 8008780:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008782:	2300      	movs	r3, #0
 8008784:	82fb      	strh	r3, [r7, #22]
 8008786:	e00b      	b.n	80087a0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008788:	8afb      	ldrh	r3, [r7, #22]
 800878a:	68fa      	ldr	r2, [r7, #12]
 800878c:	4413      	add	r3, r2
 800878e:	781a      	ldrb	r2, [r3, #0]
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	3301      	adds	r3, #1
 8008798:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800879a:	8afb      	ldrh	r3, [r7, #22]
 800879c:	3302      	adds	r3, #2
 800879e:	82fb      	strh	r3, [r7, #22]
 80087a0:	8afa      	ldrh	r2, [r7, #22]
 80087a2:	8abb      	ldrh	r3, [r7, #20]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d3ef      	bcc.n	8008788 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	2200      	movs	r2, #0
 80087ac:	701a      	strb	r2, [r3, #0]
  }
}
 80087ae:	bf00      	nop
 80087b0:	371c      	adds	r7, #28
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr

080087ba <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80087ba:	b480      	push	{r7}
 80087bc:	b085      	sub	sp, #20
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
 80087c2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	881b      	ldrh	r3, [r3, #0]
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	7812      	ldrb	r2, [r2, #0]
 80087cc:	4413      	add	r3, r2
 80087ce:	b29a      	uxth	r2, r3
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4413      	add	r3, r2
 80087de:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80087e0:	68fb      	ldr	r3, [r7, #12]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3714      	adds	r7, #20
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr

080087ee <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b086      	sub	sp, #24
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	60f8      	str	r0, [r7, #12]
 80087f6:	60b9      	str	r1, [r7, #8]
 80087f8:	4613      	mov	r3, r2
 80087fa:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80087fc:	2301      	movs	r3, #1
 80087fe:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	789b      	ldrb	r3, [r3, #2]
 8008804:	2b01      	cmp	r3, #1
 8008806:	d002      	beq.n	800880e <USBH_CtlReq+0x20>
 8008808:	2b02      	cmp	r3, #2
 800880a:	d00f      	beq.n	800882c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800880c:	e027      	b.n	800885e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	68ba      	ldr	r2, [r7, #8]
 8008812:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	88fa      	ldrh	r2, [r7, #6]
 8008818:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2201      	movs	r2, #1
 800881e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2202      	movs	r2, #2
 8008824:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008826:	2301      	movs	r3, #1
 8008828:	75fb      	strb	r3, [r7, #23]
      break;
 800882a:	e018      	b.n	800885e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f000 f81b 	bl	8008868 <USBH_HandleControl>
 8008832:	4603      	mov	r3, r0
 8008834:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008836:	7dfb      	ldrb	r3, [r7, #23]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d002      	beq.n	8008842 <USBH_CtlReq+0x54>
 800883c:	7dfb      	ldrb	r3, [r7, #23]
 800883e:	2b03      	cmp	r3, #3
 8008840:	d106      	bne.n	8008850 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2201      	movs	r2, #1
 8008846:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2200      	movs	r2, #0
 800884c:	761a      	strb	r2, [r3, #24]
      break;
 800884e:	e005      	b.n	800885c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008850:	7dfb      	ldrb	r3, [r7, #23]
 8008852:	2b02      	cmp	r3, #2
 8008854:	d102      	bne.n	800885c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2201      	movs	r2, #1
 800885a:	709a      	strb	r2, [r3, #2]
      break;
 800885c:	bf00      	nop
  }
  return status;
 800885e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008860:	4618      	mov	r0, r3
 8008862:	3718      	adds	r7, #24
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b086      	sub	sp, #24
 800886c:	af02      	add	r7, sp, #8
 800886e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008870:	2301      	movs	r3, #1
 8008872:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008874:	2300      	movs	r3, #0
 8008876:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	7e1b      	ldrb	r3, [r3, #24]
 800887c:	3b01      	subs	r3, #1
 800887e:	2b0a      	cmp	r3, #10
 8008880:	f200 8156 	bhi.w	8008b30 <USBH_HandleControl+0x2c8>
 8008884:	a201      	add	r2, pc, #4	@ (adr r2, 800888c <USBH_HandleControl+0x24>)
 8008886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800888a:	bf00      	nop
 800888c:	080088b9 	.word	0x080088b9
 8008890:	080088d3 	.word	0x080088d3
 8008894:	0800893d 	.word	0x0800893d
 8008898:	08008963 	.word	0x08008963
 800889c:	0800899b 	.word	0x0800899b
 80088a0:	080089c5 	.word	0x080089c5
 80088a4:	08008a17 	.word	0x08008a17
 80088a8:	08008a39 	.word	0x08008a39
 80088ac:	08008a75 	.word	0x08008a75
 80088b0:	08008a9b 	.word	0x08008a9b
 80088b4:	08008ad9 	.word	0x08008ad9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f103 0110 	add.w	r1, r3, #16
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	795b      	ldrb	r3, [r3, #5]
 80088c2:	461a      	mov	r2, r3
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 f943 	bl	8008b50 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2202      	movs	r2, #2
 80088ce:	761a      	strb	r2, [r3, #24]
      break;
 80088d0:	e139      	b.n	8008b46 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	795b      	ldrb	r3, [r3, #5]
 80088d6:	4619      	mov	r1, r3
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f002 fab3 	bl	800ae44 <USBH_LL_GetURBState>
 80088de:	4603      	mov	r3, r0
 80088e0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80088e2:	7bbb      	ldrb	r3, [r7, #14]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d11e      	bne.n	8008926 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	7c1b      	ldrb	r3, [r3, #16]
 80088ec:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80088f0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	8adb      	ldrh	r3, [r3, #22]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d00a      	beq.n	8008910 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80088fa:	7b7b      	ldrb	r3, [r7, #13]
 80088fc:	2b80      	cmp	r3, #128	@ 0x80
 80088fe:	d103      	bne.n	8008908 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2203      	movs	r2, #3
 8008904:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008906:	e115      	b.n	8008b34 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2205      	movs	r2, #5
 800890c:	761a      	strb	r2, [r3, #24]
      break;
 800890e:	e111      	b.n	8008b34 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008910:	7b7b      	ldrb	r3, [r7, #13]
 8008912:	2b80      	cmp	r3, #128	@ 0x80
 8008914:	d103      	bne.n	800891e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2209      	movs	r2, #9
 800891a:	761a      	strb	r2, [r3, #24]
      break;
 800891c:	e10a      	b.n	8008b34 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2207      	movs	r2, #7
 8008922:	761a      	strb	r2, [r3, #24]
      break;
 8008924:	e106      	b.n	8008b34 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008926:	7bbb      	ldrb	r3, [r7, #14]
 8008928:	2b04      	cmp	r3, #4
 800892a:	d003      	beq.n	8008934 <USBH_HandleControl+0xcc>
 800892c:	7bbb      	ldrb	r3, [r7, #14]
 800892e:	2b02      	cmp	r3, #2
 8008930:	f040 8100 	bne.w	8008b34 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	220b      	movs	r2, #11
 8008938:	761a      	strb	r2, [r3, #24]
      break;
 800893a:	e0fb      	b.n	8008b34 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008942:	b29a      	uxth	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6899      	ldr	r1, [r3, #8]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	899a      	ldrh	r2, [r3, #12]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	791b      	ldrb	r3, [r3, #4]
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 f93a 	bl	8008bce <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2204      	movs	r2, #4
 800895e:	761a      	strb	r2, [r3, #24]
      break;
 8008960:	e0f1      	b.n	8008b46 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	791b      	ldrb	r3, [r3, #4]
 8008966:	4619      	mov	r1, r3
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f002 fa6b 	bl	800ae44 <USBH_LL_GetURBState>
 800896e:	4603      	mov	r3, r0
 8008970:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008972:	7bbb      	ldrb	r3, [r7, #14]
 8008974:	2b01      	cmp	r3, #1
 8008976:	d102      	bne.n	800897e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2209      	movs	r2, #9
 800897c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800897e:	7bbb      	ldrb	r3, [r7, #14]
 8008980:	2b05      	cmp	r3, #5
 8008982:	d102      	bne.n	800898a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008984:	2303      	movs	r3, #3
 8008986:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008988:	e0d6      	b.n	8008b38 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800898a:	7bbb      	ldrb	r3, [r7, #14]
 800898c:	2b04      	cmp	r3, #4
 800898e:	f040 80d3 	bne.w	8008b38 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	220b      	movs	r2, #11
 8008996:	761a      	strb	r2, [r3, #24]
      break;
 8008998:	e0ce      	b.n	8008b38 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6899      	ldr	r1, [r3, #8]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	899a      	ldrh	r2, [r3, #12]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	795b      	ldrb	r3, [r3, #5]
 80089a6:	2001      	movs	r0, #1
 80089a8:	9000      	str	r0, [sp, #0]
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 f8ea 	bl	8008b84 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2206      	movs	r2, #6
 80089c0:	761a      	strb	r2, [r3, #24]
      break;
 80089c2:	e0c0      	b.n	8008b46 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	795b      	ldrb	r3, [r3, #5]
 80089c8:	4619      	mov	r1, r3
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f002 fa3a 	bl	800ae44 <USBH_LL_GetURBState>
 80089d0:	4603      	mov	r3, r0
 80089d2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80089d4:	7bbb      	ldrb	r3, [r7, #14]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d103      	bne.n	80089e2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2207      	movs	r2, #7
 80089de:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80089e0:	e0ac      	b.n	8008b3c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80089e2:	7bbb      	ldrb	r3, [r7, #14]
 80089e4:	2b05      	cmp	r3, #5
 80089e6:	d105      	bne.n	80089f4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	220c      	movs	r2, #12
 80089ec:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80089ee:	2303      	movs	r3, #3
 80089f0:	73fb      	strb	r3, [r7, #15]
      break;
 80089f2:	e0a3      	b.n	8008b3c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80089f4:	7bbb      	ldrb	r3, [r7, #14]
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d103      	bne.n	8008a02 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2205      	movs	r2, #5
 80089fe:	761a      	strb	r2, [r3, #24]
      break;
 8008a00:	e09c      	b.n	8008b3c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008a02:	7bbb      	ldrb	r3, [r7, #14]
 8008a04:	2b04      	cmp	r3, #4
 8008a06:	f040 8099 	bne.w	8008b3c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	220b      	movs	r2, #11
 8008a0e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008a10:	2302      	movs	r3, #2
 8008a12:	73fb      	strb	r3, [r7, #15]
      break;
 8008a14:	e092      	b.n	8008b3c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	791b      	ldrb	r3, [r3, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	2100      	movs	r1, #0
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 f8d5 	bl	8008bce <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2208      	movs	r2, #8
 8008a34:	761a      	strb	r2, [r3, #24]

      break;
 8008a36:	e086      	b.n	8008b46 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	791b      	ldrb	r3, [r3, #4]
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f002 fa00 	bl	800ae44 <USBH_LL_GetURBState>
 8008a44:	4603      	mov	r3, r0
 8008a46:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008a48:	7bbb      	ldrb	r3, [r7, #14]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d105      	bne.n	8008a5a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	220d      	movs	r2, #13
 8008a52:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008a54:	2300      	movs	r3, #0
 8008a56:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008a58:	e072      	b.n	8008b40 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008a5a:	7bbb      	ldrb	r3, [r7, #14]
 8008a5c:	2b04      	cmp	r3, #4
 8008a5e:	d103      	bne.n	8008a68 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	220b      	movs	r2, #11
 8008a64:	761a      	strb	r2, [r3, #24]
      break;
 8008a66:	e06b      	b.n	8008b40 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008a68:	7bbb      	ldrb	r3, [r7, #14]
 8008a6a:	2b05      	cmp	r3, #5
 8008a6c:	d168      	bne.n	8008b40 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008a6e:	2303      	movs	r3, #3
 8008a70:	73fb      	strb	r3, [r7, #15]
      break;
 8008a72:	e065      	b.n	8008b40 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	795b      	ldrb	r3, [r3, #5]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	9200      	str	r2, [sp, #0]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	2100      	movs	r1, #0
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 f87f 	bl	8008b84 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	220a      	movs	r2, #10
 8008a96:	761a      	strb	r2, [r3, #24]
      break;
 8008a98:	e055      	b.n	8008b46 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	795b      	ldrb	r3, [r3, #5]
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f002 f9cf 	bl	800ae44 <USBH_LL_GetURBState>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008aaa:	7bbb      	ldrb	r3, [r7, #14]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d105      	bne.n	8008abc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	220d      	movs	r2, #13
 8008ab8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008aba:	e043      	b.n	8008b44 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008abc:	7bbb      	ldrb	r3, [r7, #14]
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d103      	bne.n	8008aca <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2209      	movs	r2, #9
 8008ac6:	761a      	strb	r2, [r3, #24]
      break;
 8008ac8:	e03c      	b.n	8008b44 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008aca:	7bbb      	ldrb	r3, [r7, #14]
 8008acc:	2b04      	cmp	r3, #4
 8008ace:	d139      	bne.n	8008b44 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	220b      	movs	r2, #11
 8008ad4:	761a      	strb	r2, [r3, #24]
      break;
 8008ad6:	e035      	b.n	8008b44 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	7e5b      	ldrb	r3, [r3, #25]
 8008adc:	3301      	adds	r3, #1
 8008ade:	b2da      	uxtb	r2, r3
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	765a      	strb	r2, [r3, #25]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	7e5b      	ldrb	r3, [r3, #25]
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	d806      	bhi.n	8008afa <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2201      	movs	r2, #1
 8008af0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2201      	movs	r2, #1
 8008af6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008af8:	e025      	b.n	8008b46 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008b00:	2106      	movs	r1, #6
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	795b      	ldrb	r3, [r3, #5]
 8008b10:	4619      	mov	r1, r3
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f90c 	bl	8008d30 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	791b      	ldrb	r3, [r3, #4]
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 f906 	bl	8008d30 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008b2a:	2302      	movs	r3, #2
 8008b2c:	73fb      	strb	r3, [r7, #15]
      break;
 8008b2e:	e00a      	b.n	8008b46 <USBH_HandleControl+0x2de>

    default:
      break;
 8008b30:	bf00      	nop
 8008b32:	e008      	b.n	8008b46 <USBH_HandleControl+0x2de>
      break;
 8008b34:	bf00      	nop
 8008b36:	e006      	b.n	8008b46 <USBH_HandleControl+0x2de>
      break;
 8008b38:	bf00      	nop
 8008b3a:	e004      	b.n	8008b46 <USBH_HandleControl+0x2de>
      break;
 8008b3c:	bf00      	nop
 8008b3e:	e002      	b.n	8008b46 <USBH_HandleControl+0x2de>
      break;
 8008b40:	bf00      	nop
 8008b42:	e000      	b.n	8008b46 <USBH_HandleControl+0x2de>
      break;
 8008b44:	bf00      	nop
  }

  return status;
 8008b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3710      	adds	r7, #16
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b088      	sub	sp, #32
 8008b54:	af04      	add	r7, sp, #16
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b5e:	79f9      	ldrb	r1, [r7, #7]
 8008b60:	2300      	movs	r3, #0
 8008b62:	9303      	str	r3, [sp, #12]
 8008b64:	2308      	movs	r3, #8
 8008b66:	9302      	str	r3, [sp, #8]
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	9301      	str	r3, [sp, #4]
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	9300      	str	r3, [sp, #0]
 8008b70:	2300      	movs	r3, #0
 8008b72:	2200      	movs	r2, #0
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f002 f934 	bl	800ade2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3710      	adds	r7, #16
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b088      	sub	sp, #32
 8008b88:	af04      	add	r7, sp, #16
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	4611      	mov	r1, r2
 8008b90:	461a      	mov	r2, r3
 8008b92:	460b      	mov	r3, r1
 8008b94:	80fb      	strh	r3, [r7, #6]
 8008b96:	4613      	mov	r3, r2
 8008b98:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d001      	beq.n	8008ba8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ba8:	7979      	ldrb	r1, [r7, #5]
 8008baa:	7e3b      	ldrb	r3, [r7, #24]
 8008bac:	9303      	str	r3, [sp, #12]
 8008bae:	88fb      	ldrh	r3, [r7, #6]
 8008bb0:	9302      	str	r3, [sp, #8]
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	9301      	str	r3, [sp, #4]
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	9300      	str	r3, [sp, #0]
 8008bba:	2300      	movs	r3, #0
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f002 f90f 	bl	800ade2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b088      	sub	sp, #32
 8008bd2:	af04      	add	r7, sp, #16
 8008bd4:	60f8      	str	r0, [r7, #12]
 8008bd6:	60b9      	str	r1, [r7, #8]
 8008bd8:	4611      	mov	r1, r2
 8008bda:	461a      	mov	r2, r3
 8008bdc:	460b      	mov	r3, r1
 8008bde:	80fb      	strh	r3, [r7, #6]
 8008be0:	4613      	mov	r3, r2
 8008be2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008be4:	7979      	ldrb	r1, [r7, #5]
 8008be6:	2300      	movs	r3, #0
 8008be8:	9303      	str	r3, [sp, #12]
 8008bea:	88fb      	ldrh	r3, [r7, #6]
 8008bec:	9302      	str	r3, [sp, #8]
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	9301      	str	r3, [sp, #4]
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f002 f8f1 	bl	800ade2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008c00:	2300      	movs	r3, #0

}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3710      	adds	r7, #16
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}

08008c0a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b088      	sub	sp, #32
 8008c0e:	af04      	add	r7, sp, #16
 8008c10:	60f8      	str	r0, [r7, #12]
 8008c12:	60b9      	str	r1, [r7, #8]
 8008c14:	4611      	mov	r1, r2
 8008c16:	461a      	mov	r2, r3
 8008c18:	460b      	mov	r3, r1
 8008c1a:	80fb      	strh	r3, [r7, #6]
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d001      	beq.n	8008c2e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c2e:	7979      	ldrb	r1, [r7, #5]
 8008c30:	7e3b      	ldrb	r3, [r7, #24]
 8008c32:	9303      	str	r3, [sp, #12]
 8008c34:	88fb      	ldrh	r3, [r7, #6]
 8008c36:	9302      	str	r3, [sp, #8]
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	9301      	str	r3, [sp, #4]
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	9300      	str	r3, [sp, #0]
 8008c40:	2302      	movs	r3, #2
 8008c42:	2200      	movs	r2, #0
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f002 f8cc 	bl	800ade2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3710      	adds	r7, #16
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b088      	sub	sp, #32
 8008c58:	af04      	add	r7, sp, #16
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	4611      	mov	r1, r2
 8008c60:	461a      	mov	r2, r3
 8008c62:	460b      	mov	r3, r1
 8008c64:	80fb      	strh	r3, [r7, #6]
 8008c66:	4613      	mov	r3, r2
 8008c68:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c6a:	7979      	ldrb	r1, [r7, #5]
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	9303      	str	r3, [sp, #12]
 8008c70:	88fb      	ldrh	r3, [r7, #6]
 8008c72:	9302      	str	r3, [sp, #8]
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	9301      	str	r3, [sp, #4]
 8008c78:	2301      	movs	r3, #1
 8008c7a:	9300      	str	r3, [sp, #0]
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	2201      	movs	r2, #1
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f002 f8ae 	bl	800ade2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3710      	adds	r7, #16
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b086      	sub	sp, #24
 8008c94:	af04      	add	r7, sp, #16
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	4608      	mov	r0, r1
 8008c9a:	4611      	mov	r1, r2
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	70fb      	strb	r3, [r7, #3]
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	70bb      	strb	r3, [r7, #2]
 8008ca6:	4613      	mov	r3, r2
 8008ca8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008caa:	7878      	ldrb	r0, [r7, #1]
 8008cac:	78ba      	ldrb	r2, [r7, #2]
 8008cae:	78f9      	ldrb	r1, [r7, #3]
 8008cb0:	8b3b      	ldrh	r3, [r7, #24]
 8008cb2:	9302      	str	r3, [sp, #8]
 8008cb4:	7d3b      	ldrb	r3, [r7, #20]
 8008cb6:	9301      	str	r3, [sp, #4]
 8008cb8:	7c3b      	ldrb	r3, [r7, #16]
 8008cba:	9300      	str	r3, [sp, #0]
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f002 f841 	bl	800ad46 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3708      	adds	r7, #8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b082      	sub	sp, #8
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008cda:	78fb      	ldrb	r3, [r7, #3]
 8008cdc:	4619      	mov	r1, r3
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f002 f860 	bl	800ada4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3708      	adds	r7, #8
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}

08008cee <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008cee:	b580      	push	{r7, lr}
 8008cf0:	b084      	sub	sp, #16
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f836 	bl	8008d6c <USBH_GetFreePipe>
 8008d00:	4603      	mov	r3, r0
 8008d02:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008d04:	89fb      	ldrh	r3, [r7, #14]
 8008d06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d00a      	beq.n	8008d24 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008d0e:	78fa      	ldrb	r2, [r7, #3]
 8008d10:	89fb      	ldrh	r3, [r7, #14]
 8008d12:	f003 030f 	and.w	r3, r3, #15
 8008d16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008d1a:	6879      	ldr	r1, [r7, #4]
 8008d1c:	33e0      	adds	r3, #224	@ 0xe0
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	440b      	add	r3, r1
 8008d22:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008d24:	89fb      	ldrh	r3, [r7, #14]
 8008d26:	b2db      	uxtb	r3, r3
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	460b      	mov	r3, r1
 8008d3a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008d3c:	78fb      	ldrb	r3, [r7, #3]
 8008d3e:	2b0f      	cmp	r3, #15
 8008d40:	d80d      	bhi.n	8008d5e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008d42:	78fb      	ldrb	r3, [r7, #3]
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	33e0      	adds	r3, #224	@ 0xe0
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	4413      	add	r3, r2
 8008d4c:	685a      	ldr	r2, [r3, #4]
 8008d4e:	78fb      	ldrb	r3, [r7, #3]
 8008d50:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008d54:	6879      	ldr	r1, [r7, #4]
 8008d56:	33e0      	adds	r3, #224	@ 0xe0
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	440b      	add	r3, r1
 8008d5c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008d5e:	2300      	movs	r3, #0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008d74:	2300      	movs	r3, #0
 8008d76:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008d78:	2300      	movs	r3, #0
 8008d7a:	73fb      	strb	r3, [r7, #15]
 8008d7c:	e00f      	b.n	8008d9e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008d7e:	7bfb      	ldrb	r3, [r7, #15]
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	33e0      	adds	r3, #224	@ 0xe0
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	4413      	add	r3, r2
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d102      	bne.n	8008d98 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008d92:	7bfb      	ldrb	r3, [r7, #15]
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	e007      	b.n	8008da8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008d98:	7bfb      	ldrb	r3, [r7, #15]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	73fb      	strb	r3, [r7, #15]
 8008d9e:	7bfb      	ldrb	r3, [r7, #15]
 8008da0:	2b0f      	cmp	r3, #15
 8008da2:	d9ec      	bls.n	8008d7e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008da4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3714      	adds	r7, #20
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	4603      	mov	r3, r0
 8008dbc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008dbe:	79fb      	ldrb	r3, [r7, #7]
 8008dc0:	4a08      	ldr	r2, [pc, #32]	@ (8008de4 <disk_status+0x30>)
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	4413      	add	r3, r2
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	79fa      	ldrb	r2, [r7, #7]
 8008dcc:	4905      	ldr	r1, [pc, #20]	@ (8008de4 <disk_status+0x30>)
 8008dce:	440a      	add	r2, r1
 8008dd0:	7a12      	ldrb	r2, [r2, #8]
 8008dd2:	4610      	mov	r0, r2
 8008dd4:	4798      	blx	r3
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	200011c4 	.word	0x200011c4

08008de8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	4603      	mov	r3, r0
 8008df0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008df2:	2300      	movs	r3, #0
 8008df4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008df6:	79fb      	ldrb	r3, [r7, #7]
 8008df8:	4a0e      	ldr	r2, [pc, #56]	@ (8008e34 <disk_initialize+0x4c>)
 8008dfa:	5cd3      	ldrb	r3, [r2, r3]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d114      	bne.n	8008e2a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008e00:	79fb      	ldrb	r3, [r7, #7]
 8008e02:	4a0c      	ldr	r2, [pc, #48]	@ (8008e34 <disk_initialize+0x4c>)
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4413      	add	r3, r2
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	79fa      	ldrb	r2, [r7, #7]
 8008e0e:	4909      	ldr	r1, [pc, #36]	@ (8008e34 <disk_initialize+0x4c>)
 8008e10:	440a      	add	r2, r1
 8008e12:	7a12      	ldrb	r2, [r2, #8]
 8008e14:	4610      	mov	r0, r2
 8008e16:	4798      	blx	r3
 8008e18:	4603      	mov	r3, r0
 8008e1a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8008e1c:	7bfb      	ldrb	r3, [r7, #15]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d103      	bne.n	8008e2a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8008e22:	79fb      	ldrb	r3, [r7, #7]
 8008e24:	4a03      	ldr	r2, [pc, #12]	@ (8008e34 <disk_initialize+0x4c>)
 8008e26:	2101      	movs	r1, #1
 8008e28:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8008e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	200011c4 	.word	0x200011c4

08008e38 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008e38:	b590      	push	{r4, r7, lr}
 8008e3a:	b087      	sub	sp, #28
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	60b9      	str	r1, [r7, #8]
 8008e40:	607a      	str	r2, [r7, #4]
 8008e42:	603b      	str	r3, [r7, #0]
 8008e44:	4603      	mov	r3, r0
 8008e46:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
 8008e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8008e74 <disk_read+0x3c>)
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	4413      	add	r3, r2
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	689c      	ldr	r4, [r3, #8]
 8008e54:	7bfb      	ldrb	r3, [r7, #15]
 8008e56:	4a07      	ldr	r2, [pc, #28]	@ (8008e74 <disk_read+0x3c>)
 8008e58:	4413      	add	r3, r2
 8008e5a:	7a18      	ldrb	r0, [r3, #8]
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	68b9      	ldr	r1, [r7, #8]
 8008e62:	47a0      	blx	r4
 8008e64:	4603      	mov	r3, r0
 8008e66:	75fb      	strb	r3, [r7, #23]
  return res;
 8008e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	371c      	adds	r7, #28
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd90      	pop	{r4, r7, pc}
 8008e72:	bf00      	nop
 8008e74:	200011c4 	.word	0x200011c4

08008e78 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008e78:	b590      	push	{r4, r7, lr}
 8008e7a:	b087      	sub	sp, #28
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60b9      	str	r1, [r7, #8]
 8008e80:	607a      	str	r2, [r7, #4]
 8008e82:	603b      	str	r3, [r7, #0]
 8008e84:	4603      	mov	r3, r0
 8008e86:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008e88:	7bfb      	ldrb	r3, [r7, #15]
 8008e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8008eb4 <disk_write+0x3c>)
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	4413      	add	r3, r2
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	68dc      	ldr	r4, [r3, #12]
 8008e94:	7bfb      	ldrb	r3, [r7, #15]
 8008e96:	4a07      	ldr	r2, [pc, #28]	@ (8008eb4 <disk_write+0x3c>)
 8008e98:	4413      	add	r3, r2
 8008e9a:	7a18      	ldrb	r0, [r3, #8]
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	68b9      	ldr	r1, [r7, #8]
 8008ea2:	47a0      	blx	r4
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	75fb      	strb	r3, [r7, #23]
  return res;
 8008ea8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	371c      	adds	r7, #28
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd90      	pop	{r4, r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	200011c4 	.word	0x200011c4

08008eb8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	603a      	str	r2, [r7, #0]
 8008ec2:	71fb      	strb	r3, [r7, #7]
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008ec8:	79fb      	ldrb	r3, [r7, #7]
 8008eca:	4a09      	ldr	r2, [pc, #36]	@ (8008ef0 <disk_ioctl+0x38>)
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	4413      	add	r3, r2
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	691b      	ldr	r3, [r3, #16]
 8008ed4:	79fa      	ldrb	r2, [r7, #7]
 8008ed6:	4906      	ldr	r1, [pc, #24]	@ (8008ef0 <disk_ioctl+0x38>)
 8008ed8:	440a      	add	r2, r1
 8008eda:	7a10      	ldrb	r0, [r2, #8]
 8008edc:	79b9      	ldrb	r1, [r7, #6]
 8008ede:	683a      	ldr	r2, [r7, #0]
 8008ee0:	4798      	blx	r3
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	73fb      	strb	r3, [r7, #15]
  return res;
 8008ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	200011c4 	.word	0x200011c4

08008ef4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b085      	sub	sp, #20
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	3301      	adds	r3, #1
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008f04:	89fb      	ldrh	r3, [r7, #14]
 8008f06:	021b      	lsls	r3, r3, #8
 8008f08:	b21a      	sxth	r2, r3
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	b21b      	sxth	r3, r3
 8008f10:	4313      	orrs	r3, r2
 8008f12:	b21b      	sxth	r3, r3
 8008f14:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008f16:	89fb      	ldrh	r3, [r7, #14]
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3714      	adds	r7, #20
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008f24:	b480      	push	{r7}
 8008f26:	b085      	sub	sp, #20
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	3303      	adds	r3, #3
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	021b      	lsls	r3, r3, #8
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	3202      	adds	r2, #2
 8008f3c:	7812      	ldrb	r2, [r2, #0]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	021b      	lsls	r3, r3, #8
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	3201      	adds	r2, #1
 8008f4a:	7812      	ldrb	r2, [r2, #0]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	021b      	lsls	r3, r3, #8
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	7812      	ldrb	r2, [r2, #0]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	60fb      	str	r3, [r7, #12]
	return rv;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3714      	adds	r7, #20
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr

08008f6a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	b083      	sub	sp, #12
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
 8008f72:	460b      	mov	r3, r1
 8008f74:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	1c5a      	adds	r2, r3, #1
 8008f7a:	607a      	str	r2, [r7, #4]
 8008f7c:	887a      	ldrh	r2, [r7, #2]
 8008f7e:	b2d2      	uxtb	r2, r2
 8008f80:	701a      	strb	r2, [r3, #0]
 8008f82:	887b      	ldrh	r3, [r7, #2]
 8008f84:	0a1b      	lsrs	r3, r3, #8
 8008f86:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	1c5a      	adds	r2, r3, #1
 8008f8c:	607a      	str	r2, [r7, #4]
 8008f8e:	887a      	ldrh	r2, [r7, #2]
 8008f90:	b2d2      	uxtb	r2, r2
 8008f92:	701a      	strb	r2, [r3, #0]
}
 8008f94:	bf00      	nop
 8008f96:	370c      	adds	r7, #12
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	1c5a      	adds	r2, r3, #1
 8008fae:	607a      	str	r2, [r7, #4]
 8008fb0:	683a      	ldr	r2, [r7, #0]
 8008fb2:	b2d2      	uxtb	r2, r2
 8008fb4:	701a      	strb	r2, [r3, #0]
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	0a1b      	lsrs	r3, r3, #8
 8008fba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	1c5a      	adds	r2, r3, #1
 8008fc0:	607a      	str	r2, [r7, #4]
 8008fc2:	683a      	ldr	r2, [r7, #0]
 8008fc4:	b2d2      	uxtb	r2, r2
 8008fc6:	701a      	strb	r2, [r3, #0]
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	0a1b      	lsrs	r3, r3, #8
 8008fcc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	1c5a      	adds	r2, r3, #1
 8008fd2:	607a      	str	r2, [r7, #4]
 8008fd4:	683a      	ldr	r2, [r7, #0]
 8008fd6:	b2d2      	uxtb	r2, r2
 8008fd8:	701a      	strb	r2, [r3, #0]
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	0a1b      	lsrs	r3, r3, #8
 8008fde:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	1c5a      	adds	r2, r3, #1
 8008fe4:	607a      	str	r2, [r7, #4]
 8008fe6:	683a      	ldr	r2, [r7, #0]
 8008fe8:	b2d2      	uxtb	r2, r2
 8008fea:	701a      	strb	r2, [r3, #0]
}
 8008fec:	bf00      	nop
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008ff8:	b480      	push	{r7}
 8008ffa:	b087      	sub	sp, #28
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d00d      	beq.n	800902e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009012:	693a      	ldr	r2, [r7, #16]
 8009014:	1c53      	adds	r3, r2, #1
 8009016:	613b      	str	r3, [r7, #16]
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	1c59      	adds	r1, r3, #1
 800901c:	6179      	str	r1, [r7, #20]
 800901e:	7812      	ldrb	r2, [r2, #0]
 8009020:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	3b01      	subs	r3, #1
 8009026:	607b      	str	r3, [r7, #4]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1f1      	bne.n	8009012 <mem_cpy+0x1a>
	}
}
 800902e:	bf00      	nop
 8009030:	371c      	adds	r7, #28
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr

0800903a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800903a:	b480      	push	{r7}
 800903c:	b087      	sub	sp, #28
 800903e:	af00      	add	r7, sp, #0
 8009040:	60f8      	str	r0, [r7, #12]
 8009042:	60b9      	str	r1, [r7, #8]
 8009044:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	1c5a      	adds	r2, r3, #1
 800904e:	617a      	str	r2, [r7, #20]
 8009050:	68ba      	ldr	r2, [r7, #8]
 8009052:	b2d2      	uxtb	r2, r2
 8009054:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	3b01      	subs	r3, #1
 800905a:	607b      	str	r3, [r7, #4]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d1f3      	bne.n	800904a <mem_set+0x10>
}
 8009062:	bf00      	nop
 8009064:	bf00      	nop
 8009066:	371c      	adds	r7, #28
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009070:	b480      	push	{r7}
 8009072:	b089      	sub	sp, #36	@ 0x24
 8009074:	af00      	add	r7, sp, #0
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	61fb      	str	r3, [r7, #28]
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009084:	2300      	movs	r3, #0
 8009086:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	1c5a      	adds	r2, r3, #1
 800908c:	61fa      	str	r2, [r7, #28]
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	4619      	mov	r1, r3
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	1c5a      	adds	r2, r3, #1
 8009096:	61ba      	str	r2, [r7, #24]
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	1acb      	subs	r3, r1, r3
 800909c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	3b01      	subs	r3, #1
 80090a2:	607b      	str	r3, [r7, #4]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d002      	beq.n	80090b0 <mem_cmp+0x40>
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d0eb      	beq.n	8009088 <mem_cmp+0x18>

	return r;
 80090b0:	697b      	ldr	r3, [r7, #20]
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3724      	adds	r7, #36	@ 0x24
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr

080090be <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80090be:	b480      	push	{r7}
 80090c0:	b083      	sub	sp, #12
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
 80090c6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80090c8:	e002      	b.n	80090d0 <chk_chr+0x12>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	3301      	adds	r3, #1
 80090ce:	607b      	str	r3, [r7, #4]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d005      	beq.n	80090e4 <chk_chr+0x26>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	461a      	mov	r2, r3
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d1f2      	bne.n	80090ca <chk_chr+0xc>
	return *str;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	781b      	ldrb	r3, [r3, #0]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b085      	sub	sp, #20
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80090fc:	2300      	movs	r3, #0
 80090fe:	60fb      	str	r3, [r7, #12]
 8009100:	e010      	b.n	8009124 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009102:	4a0d      	ldr	r2, [pc, #52]	@ (8009138 <clear_lock+0x44>)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	011b      	lsls	r3, r3, #4
 8009108:	4413      	add	r3, r2
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	429a      	cmp	r2, r3
 8009110:	d105      	bne.n	800911e <clear_lock+0x2a>
 8009112:	4a09      	ldr	r2, [pc, #36]	@ (8009138 <clear_lock+0x44>)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	011b      	lsls	r3, r3, #4
 8009118:	4413      	add	r3, r2
 800911a:	2200      	movs	r2, #0
 800911c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	3301      	adds	r3, #1
 8009122:	60fb      	str	r3, [r7, #12]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2b01      	cmp	r3, #1
 8009128:	d9eb      	bls.n	8009102 <clear_lock+0xe>
	}
}
 800912a:	bf00      	nop
 800912c:	bf00      	nop
 800912e:	3714      	adds	r7, #20
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr
 8009138:	200011a4 	.word	0x200011a4

0800913c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b086      	sub	sp, #24
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009144:	2300      	movs	r3, #0
 8009146:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	78db      	ldrb	r3, [r3, #3]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d034      	beq.n	80091ba <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009154:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	7858      	ldrb	r0, [r3, #1]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009160:	2301      	movs	r3, #1
 8009162:	697a      	ldr	r2, [r7, #20]
 8009164:	f7ff fe88 	bl	8008e78 <disk_write>
 8009168:	4603      	mov	r3, r0
 800916a:	2b00      	cmp	r3, #0
 800916c:	d002      	beq.n	8009174 <sync_window+0x38>
			res = FR_DISK_ERR;
 800916e:	2301      	movs	r3, #1
 8009170:	73fb      	strb	r3, [r7, #15]
 8009172:	e022      	b.n	80091ba <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800917e:	697a      	ldr	r2, [r7, #20]
 8009180:	1ad2      	subs	r2, r2, r3
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	69db      	ldr	r3, [r3, #28]
 8009186:	429a      	cmp	r2, r3
 8009188:	d217      	bcs.n	80091ba <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	789b      	ldrb	r3, [r3, #2]
 800918e:	613b      	str	r3, [r7, #16]
 8009190:	e010      	b.n	80091b4 <sync_window+0x78>
					wsect += fs->fsize;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	69db      	ldr	r3, [r3, #28]
 8009196:	697a      	ldr	r2, [r7, #20]
 8009198:	4413      	add	r3, r2
 800919a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	7858      	ldrb	r0, [r3, #1]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80091a6:	2301      	movs	r3, #1
 80091a8:	697a      	ldr	r2, [r7, #20]
 80091aa:	f7ff fe65 	bl	8008e78 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	3b01      	subs	r3, #1
 80091b2:	613b      	str	r3, [r7, #16]
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d8eb      	bhi.n	8009192 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80091ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3718      	adds	r7, #24
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80091ce:	2300      	movs	r3, #0
 80091d0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091d6:	683a      	ldr	r2, [r7, #0]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d01b      	beq.n	8009214 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f7ff ffad 	bl	800913c <sync_window>
 80091e2:	4603      	mov	r3, r0
 80091e4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80091e6:	7bfb      	ldrb	r3, [r7, #15]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d113      	bne.n	8009214 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	7858      	ldrb	r0, [r3, #1]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80091f6:	2301      	movs	r3, #1
 80091f8:	683a      	ldr	r2, [r7, #0]
 80091fa:	f7ff fe1d 	bl	8008e38 <disk_read>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d004      	beq.n	800920e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009204:	f04f 33ff 	mov.w	r3, #4294967295
 8009208:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800920a:	2301      	movs	r3, #1
 800920c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	683a      	ldr	r2, [r7, #0]
 8009212:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8009214:	7bfb      	ldrb	r3, [r7, #15]
}
 8009216:	4618      	mov	r0, r3
 8009218:	3710      	adds	r7, #16
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
	...

08009220 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f7ff ff87 	bl	800913c <sync_window>
 800922e:	4603      	mov	r3, r0
 8009230:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009232:	7bfb      	ldrb	r3, [r7, #15]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d159      	bne.n	80092ec <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	2b03      	cmp	r3, #3
 800923e:	d149      	bne.n	80092d4 <sync_fs+0xb4>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	791b      	ldrb	r3, [r3, #4]
 8009244:	2b01      	cmp	r3, #1
 8009246:	d145      	bne.n	80092d4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	899b      	ldrh	r3, [r3, #12]
 8009252:	461a      	mov	r2, r3
 8009254:	2100      	movs	r1, #0
 8009256:	f7ff fef0 	bl	800903a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	3334      	adds	r3, #52	@ 0x34
 800925e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009262:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8009266:	4618      	mov	r0, r3
 8009268:	f7ff fe7f 	bl	8008f6a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	3334      	adds	r3, #52	@ 0x34
 8009270:	4921      	ldr	r1, [pc, #132]	@ (80092f8 <sync_fs+0xd8>)
 8009272:	4618      	mov	r0, r3
 8009274:	f7ff fe94 	bl	8008fa0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	3334      	adds	r3, #52	@ 0x34
 800927c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009280:	491e      	ldr	r1, [pc, #120]	@ (80092fc <sync_fs+0xdc>)
 8009282:	4618      	mov	r0, r3
 8009284:	f7ff fe8c 	bl	8008fa0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	3334      	adds	r3, #52	@ 0x34
 800928c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	695b      	ldr	r3, [r3, #20]
 8009294:	4619      	mov	r1, r3
 8009296:	4610      	mov	r0, r2
 8009298:	f7ff fe82 	bl	8008fa0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	3334      	adds	r3, #52	@ 0x34
 80092a0:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	691b      	ldr	r3, [r3, #16]
 80092a8:	4619      	mov	r1, r3
 80092aa:	4610      	mov	r0, r2
 80092ac:	f7ff fe78 	bl	8008fa0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6a1b      	ldr	r3, [r3, #32]
 80092b4:	1c5a      	adds	r2, r3, #1
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	7858      	ldrb	r0, [r3, #1]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092c8:	2301      	movs	r3, #1
 80092ca:	f7ff fdd5 	bl	8008e78 <disk_write>
			fs->fsi_flag = 0;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2200      	movs	r2, #0
 80092d2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	785b      	ldrb	r3, [r3, #1]
 80092d8:	2200      	movs	r2, #0
 80092da:	2100      	movs	r1, #0
 80092dc:	4618      	mov	r0, r3
 80092de:	f7ff fdeb 	bl	8008eb8 <disk_ioctl>
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d001      	beq.n	80092ec <sync_fs+0xcc>
 80092e8:	2301      	movs	r3, #1
 80092ea:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80092ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	41615252 	.word	0x41615252
 80092fc:	61417272 	.word	0x61417272

08009300 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	3b02      	subs	r3, #2
 800930e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	699b      	ldr	r3, [r3, #24]
 8009314:	3b02      	subs	r3, #2
 8009316:	683a      	ldr	r2, [r7, #0]
 8009318:	429a      	cmp	r2, r3
 800931a:	d301      	bcc.n	8009320 <clust2sect+0x20>
 800931c:	2300      	movs	r3, #0
 800931e:	e008      	b.n	8009332 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	895b      	ldrh	r3, [r3, #10]
 8009324:	461a      	mov	r2, r3
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	fb03 f202 	mul.w	r2, r3, r2
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009330:	4413      	add	r3, r2
}
 8009332:	4618      	mov	r0, r3
 8009334:	370c      	adds	r7, #12
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr

0800933e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800933e:	b580      	push	{r7, lr}
 8009340:	b086      	sub	sp, #24
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
 8009346:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	2b01      	cmp	r3, #1
 8009352:	d904      	bls.n	800935e <get_fat+0x20>
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	699b      	ldr	r3, [r3, #24]
 8009358:	683a      	ldr	r2, [r7, #0]
 800935a:	429a      	cmp	r2, r3
 800935c:	d302      	bcc.n	8009364 <get_fat+0x26>
		val = 1;	/* Internal error */
 800935e:	2301      	movs	r3, #1
 8009360:	617b      	str	r3, [r7, #20]
 8009362:	e0ba      	b.n	80094da <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009364:	f04f 33ff 	mov.w	r3, #4294967295
 8009368:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	2b03      	cmp	r3, #3
 8009370:	f000 8082 	beq.w	8009478 <get_fat+0x13a>
 8009374:	2b03      	cmp	r3, #3
 8009376:	f300 80a6 	bgt.w	80094c6 <get_fat+0x188>
 800937a:	2b01      	cmp	r3, #1
 800937c:	d002      	beq.n	8009384 <get_fat+0x46>
 800937e:	2b02      	cmp	r3, #2
 8009380:	d055      	beq.n	800942e <get_fat+0xf0>
 8009382:	e0a0      	b.n	80094c6 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	60fb      	str	r3, [r7, #12]
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	085b      	lsrs	r3, r3, #1
 800938c:	68fa      	ldr	r2, [r7, #12]
 800938e:	4413      	add	r3, r2
 8009390:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	899b      	ldrh	r3, [r3, #12]
 800939a:	4619      	mov	r1, r3
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	fbb3 f3f1 	udiv	r3, r3, r1
 80093a2:	4413      	add	r3, r2
 80093a4:	4619      	mov	r1, r3
 80093a6:	6938      	ldr	r0, [r7, #16]
 80093a8:	f7ff ff0c 	bl	80091c4 <move_window>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	f040 808c 	bne.w	80094cc <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	1c5a      	adds	r2, r3, #1
 80093b8:	60fa      	str	r2, [r7, #12]
 80093ba:	693a      	ldr	r2, [r7, #16]
 80093bc:	8992      	ldrh	r2, [r2, #12]
 80093be:	fbb3 f1f2 	udiv	r1, r3, r2
 80093c2:	fb01 f202 	mul.w	r2, r1, r2
 80093c6:	1a9b      	subs	r3, r3, r2
 80093c8:	693a      	ldr	r2, [r7, #16]
 80093ca:	4413      	add	r3, r2
 80093cc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80093d0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	899b      	ldrh	r3, [r3, #12]
 80093da:	4619      	mov	r1, r3
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	fbb3 f3f1 	udiv	r3, r3, r1
 80093e2:	4413      	add	r3, r2
 80093e4:	4619      	mov	r1, r3
 80093e6:	6938      	ldr	r0, [r7, #16]
 80093e8:	f7ff feec 	bl	80091c4 <move_window>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d16e      	bne.n	80094d0 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	899b      	ldrh	r3, [r3, #12]
 80093f6:	461a      	mov	r2, r3
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80093fe:	fb01 f202 	mul.w	r2, r1, r2
 8009402:	1a9b      	subs	r3, r3, r2
 8009404:	693a      	ldr	r2, [r7, #16]
 8009406:	4413      	add	r3, r2
 8009408:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800940c:	021b      	lsls	r3, r3, #8
 800940e:	68ba      	ldr	r2, [r7, #8]
 8009410:	4313      	orrs	r3, r2
 8009412:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	f003 0301 	and.w	r3, r3, #1
 800941a:	2b00      	cmp	r3, #0
 800941c:	d002      	beq.n	8009424 <get_fat+0xe6>
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	091b      	lsrs	r3, r3, #4
 8009422:	e002      	b.n	800942a <get_fat+0xec>
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800942a:	617b      	str	r3, [r7, #20]
			break;
 800942c:	e055      	b.n	80094da <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	899b      	ldrh	r3, [r3, #12]
 8009436:	085b      	lsrs	r3, r3, #1
 8009438:	b29b      	uxth	r3, r3
 800943a:	4619      	mov	r1, r3
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009442:	4413      	add	r3, r2
 8009444:	4619      	mov	r1, r3
 8009446:	6938      	ldr	r0, [r7, #16]
 8009448:	f7ff febc 	bl	80091c4 <move_window>
 800944c:	4603      	mov	r3, r0
 800944e:	2b00      	cmp	r3, #0
 8009450:	d140      	bne.n	80094d4 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	005b      	lsls	r3, r3, #1
 800945c:	693a      	ldr	r2, [r7, #16]
 800945e:	8992      	ldrh	r2, [r2, #12]
 8009460:	fbb3 f0f2 	udiv	r0, r3, r2
 8009464:	fb00 f202 	mul.w	r2, r0, r2
 8009468:	1a9b      	subs	r3, r3, r2
 800946a:	440b      	add	r3, r1
 800946c:	4618      	mov	r0, r3
 800946e:	f7ff fd41 	bl	8008ef4 <ld_word>
 8009472:	4603      	mov	r3, r0
 8009474:	617b      	str	r3, [r7, #20]
			break;
 8009476:	e030      	b.n	80094da <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	899b      	ldrh	r3, [r3, #12]
 8009480:	089b      	lsrs	r3, r3, #2
 8009482:	b29b      	uxth	r3, r3
 8009484:	4619      	mov	r1, r3
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	fbb3 f3f1 	udiv	r3, r3, r1
 800948c:	4413      	add	r3, r2
 800948e:	4619      	mov	r1, r3
 8009490:	6938      	ldr	r0, [r7, #16]
 8009492:	f7ff fe97 	bl	80091c4 <move_window>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d11d      	bne.n	80094d8 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	693a      	ldr	r2, [r7, #16]
 80094a8:	8992      	ldrh	r2, [r2, #12]
 80094aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80094ae:	fb00 f202 	mul.w	r2, r0, r2
 80094b2:	1a9b      	subs	r3, r3, r2
 80094b4:	440b      	add	r3, r1
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7ff fd34 	bl	8008f24 <ld_dword>
 80094bc:	4603      	mov	r3, r0
 80094be:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80094c2:	617b      	str	r3, [r7, #20]
			break;
 80094c4:	e009      	b.n	80094da <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80094c6:	2301      	movs	r3, #1
 80094c8:	617b      	str	r3, [r7, #20]
 80094ca:	e006      	b.n	80094da <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80094cc:	bf00      	nop
 80094ce:	e004      	b.n	80094da <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80094d0:	bf00      	nop
 80094d2:	e002      	b.n	80094da <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80094d4:	bf00      	nop
 80094d6:	e000      	b.n	80094da <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80094d8:	bf00      	nop
		}
	}

	return val;
 80094da:	697b      	ldr	r3, [r7, #20]
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3718      	adds	r7, #24
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80094e4:	b590      	push	{r4, r7, lr}
 80094e6:	b089      	sub	sp, #36	@ 0x24
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80094f0:	2302      	movs	r3, #2
 80094f2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	f240 8109 	bls.w	800970e <put_fat+0x22a>
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	68ba      	ldr	r2, [r7, #8]
 8009502:	429a      	cmp	r2, r3
 8009504:	f080 8103 	bcs.w	800970e <put_fat+0x22a>
		switch (fs->fs_type) {
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	2b03      	cmp	r3, #3
 800950e:	f000 80b6 	beq.w	800967e <put_fat+0x19a>
 8009512:	2b03      	cmp	r3, #3
 8009514:	f300 80fb 	bgt.w	800970e <put_fat+0x22a>
 8009518:	2b01      	cmp	r3, #1
 800951a:	d003      	beq.n	8009524 <put_fat+0x40>
 800951c:	2b02      	cmp	r3, #2
 800951e:	f000 8083 	beq.w	8009628 <put_fat+0x144>
 8009522:	e0f4      	b.n	800970e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	61bb      	str	r3, [r7, #24]
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	085b      	lsrs	r3, r3, #1
 800952c:	69ba      	ldr	r2, [r7, #24]
 800952e:	4413      	add	r3, r2
 8009530:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	899b      	ldrh	r3, [r3, #12]
 800953a:	4619      	mov	r1, r3
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009542:	4413      	add	r3, r2
 8009544:	4619      	mov	r1, r3
 8009546:	68f8      	ldr	r0, [r7, #12]
 8009548:	f7ff fe3c 	bl	80091c4 <move_window>
 800954c:	4603      	mov	r3, r0
 800954e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009550:	7ffb      	ldrb	r3, [r7, #31]
 8009552:	2b00      	cmp	r3, #0
 8009554:	f040 80d4 	bne.w	8009700 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	1c5a      	adds	r2, r3, #1
 8009562:	61ba      	str	r2, [r7, #24]
 8009564:	68fa      	ldr	r2, [r7, #12]
 8009566:	8992      	ldrh	r2, [r2, #12]
 8009568:	fbb3 f0f2 	udiv	r0, r3, r2
 800956c:	fb00 f202 	mul.w	r2, r0, r2
 8009570:	1a9b      	subs	r3, r3, r2
 8009572:	440b      	add	r3, r1
 8009574:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	f003 0301 	and.w	r3, r3, #1
 800957c:	2b00      	cmp	r3, #0
 800957e:	d00d      	beq.n	800959c <put_fat+0xb8>
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	b25b      	sxtb	r3, r3
 8009586:	f003 030f 	and.w	r3, r3, #15
 800958a:	b25a      	sxtb	r2, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	b2db      	uxtb	r3, r3
 8009590:	011b      	lsls	r3, r3, #4
 8009592:	b25b      	sxtb	r3, r3
 8009594:	4313      	orrs	r3, r2
 8009596:	b25b      	sxtb	r3, r3
 8009598:	b2db      	uxtb	r3, r3
 800959a:	e001      	b.n	80095a0 <put_fat+0xbc>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	697a      	ldr	r2, [r7, #20]
 80095a2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2201      	movs	r2, #1
 80095a8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	899b      	ldrh	r3, [r3, #12]
 80095b2:	4619      	mov	r1, r3
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80095ba:	4413      	add	r3, r2
 80095bc:	4619      	mov	r1, r3
 80095be:	68f8      	ldr	r0, [r7, #12]
 80095c0:	f7ff fe00 	bl	80091c4 <move_window>
 80095c4:	4603      	mov	r3, r0
 80095c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80095c8:	7ffb      	ldrb	r3, [r7, #31]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f040 809a 	bne.w	8009704 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	899b      	ldrh	r3, [r3, #12]
 80095da:	461a      	mov	r2, r3
 80095dc:	69bb      	ldr	r3, [r7, #24]
 80095de:	fbb3 f0f2 	udiv	r0, r3, r2
 80095e2:	fb00 f202 	mul.w	r2, r0, r2
 80095e6:	1a9b      	subs	r3, r3, r2
 80095e8:	440b      	add	r3, r1
 80095ea:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	f003 0301 	and.w	r3, r3, #1
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d003      	beq.n	80095fe <put_fat+0x11a>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	091b      	lsrs	r3, r3, #4
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	e00e      	b.n	800961c <put_fat+0x138>
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	b25b      	sxtb	r3, r3
 8009604:	f023 030f 	bic.w	r3, r3, #15
 8009608:	b25a      	sxtb	r2, r3
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	0a1b      	lsrs	r3, r3, #8
 800960e:	b25b      	sxtb	r3, r3
 8009610:	f003 030f 	and.w	r3, r3, #15
 8009614:	b25b      	sxtb	r3, r3
 8009616:	4313      	orrs	r3, r2
 8009618:	b25b      	sxtb	r3, r3
 800961a:	b2db      	uxtb	r3, r3
 800961c:	697a      	ldr	r2, [r7, #20]
 800961e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2201      	movs	r2, #1
 8009624:	70da      	strb	r2, [r3, #3]
			break;
 8009626:	e072      	b.n	800970e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	899b      	ldrh	r3, [r3, #12]
 8009630:	085b      	lsrs	r3, r3, #1
 8009632:	b29b      	uxth	r3, r3
 8009634:	4619      	mov	r1, r3
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	fbb3 f3f1 	udiv	r3, r3, r1
 800963c:	4413      	add	r3, r2
 800963e:	4619      	mov	r1, r3
 8009640:	68f8      	ldr	r0, [r7, #12]
 8009642:	f7ff fdbf 	bl	80091c4 <move_window>
 8009646:	4603      	mov	r3, r0
 8009648:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800964a:	7ffb      	ldrb	r3, [r7, #31]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d15b      	bne.n	8009708 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	005b      	lsls	r3, r3, #1
 800965a:	68fa      	ldr	r2, [r7, #12]
 800965c:	8992      	ldrh	r2, [r2, #12]
 800965e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009662:	fb00 f202 	mul.w	r2, r0, r2
 8009666:	1a9b      	subs	r3, r3, r2
 8009668:	440b      	add	r3, r1
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	b292      	uxth	r2, r2
 800966e:	4611      	mov	r1, r2
 8009670:	4618      	mov	r0, r3
 8009672:	f7ff fc7a 	bl	8008f6a <st_word>
			fs->wflag = 1;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2201      	movs	r2, #1
 800967a:	70da      	strb	r2, [r3, #3]
			break;
 800967c:	e047      	b.n	800970e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	899b      	ldrh	r3, [r3, #12]
 8009686:	089b      	lsrs	r3, r3, #2
 8009688:	b29b      	uxth	r3, r3
 800968a:	4619      	mov	r1, r3
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009692:	4413      	add	r3, r2
 8009694:	4619      	mov	r1, r3
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f7ff fd94 	bl	80091c4 <move_window>
 800969c:	4603      	mov	r3, r0
 800969e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80096a0:	7ffb      	ldrb	r3, [r7, #31]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d132      	bne.n	800970c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	8992      	ldrh	r2, [r2, #12]
 80096ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80096be:	fb00 f202 	mul.w	r2, r0, r2
 80096c2:	1a9b      	subs	r3, r3, r2
 80096c4:	440b      	add	r3, r1
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7ff fc2c 	bl	8008f24 <ld_dword>
 80096cc:	4603      	mov	r3, r0
 80096ce:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80096d2:	4323      	orrs	r3, r4
 80096d4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	8992      	ldrh	r2, [r2, #12]
 80096e4:	fbb3 f0f2 	udiv	r0, r3, r2
 80096e8:	fb00 f202 	mul.w	r2, r0, r2
 80096ec:	1a9b      	subs	r3, r3, r2
 80096ee:	440b      	add	r3, r1
 80096f0:	6879      	ldr	r1, [r7, #4]
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7ff fc54 	bl	8008fa0 <st_dword>
			fs->wflag = 1;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2201      	movs	r2, #1
 80096fc:	70da      	strb	r2, [r3, #3]
			break;
 80096fe:	e006      	b.n	800970e <put_fat+0x22a>
			if (res != FR_OK) break;
 8009700:	bf00      	nop
 8009702:	e004      	b.n	800970e <put_fat+0x22a>
			if (res != FR_OK) break;
 8009704:	bf00      	nop
 8009706:	e002      	b.n	800970e <put_fat+0x22a>
			if (res != FR_OK) break;
 8009708:	bf00      	nop
 800970a:	e000      	b.n	800970e <put_fat+0x22a>
			if (res != FR_OK) break;
 800970c:	bf00      	nop
		}
	}
	return res;
 800970e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009710:	4618      	mov	r0, r3
 8009712:	3724      	adds	r7, #36	@ 0x24
 8009714:	46bd      	mov	sp, r7
 8009716:	bd90      	pop	{r4, r7, pc}

08009718 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b088      	sub	sp, #32
 800971c:	af00      	add	r7, sp, #0
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	60b9      	str	r1, [r7, #8]
 8009722:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009724:	2300      	movs	r3, #0
 8009726:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	2b01      	cmp	r3, #1
 8009732:	d904      	bls.n	800973e <remove_chain+0x26>
 8009734:	69bb      	ldr	r3, [r7, #24]
 8009736:	699b      	ldr	r3, [r3, #24]
 8009738:	68ba      	ldr	r2, [r7, #8]
 800973a:	429a      	cmp	r2, r3
 800973c:	d301      	bcc.n	8009742 <remove_chain+0x2a>
 800973e:	2302      	movs	r3, #2
 8009740:	e04b      	b.n	80097da <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d00c      	beq.n	8009762 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009748:	f04f 32ff 	mov.w	r2, #4294967295
 800974c:	6879      	ldr	r1, [r7, #4]
 800974e:	69b8      	ldr	r0, [r7, #24]
 8009750:	f7ff fec8 	bl	80094e4 <put_fat>
 8009754:	4603      	mov	r3, r0
 8009756:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009758:	7ffb      	ldrb	r3, [r7, #31]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d001      	beq.n	8009762 <remove_chain+0x4a>
 800975e:	7ffb      	ldrb	r3, [r7, #31]
 8009760:	e03b      	b.n	80097da <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009762:	68b9      	ldr	r1, [r7, #8]
 8009764:	68f8      	ldr	r0, [r7, #12]
 8009766:	f7ff fdea 	bl	800933e <get_fat>
 800976a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d031      	beq.n	80097d6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	2b01      	cmp	r3, #1
 8009776:	d101      	bne.n	800977c <remove_chain+0x64>
 8009778:	2302      	movs	r3, #2
 800977a:	e02e      	b.n	80097da <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009782:	d101      	bne.n	8009788 <remove_chain+0x70>
 8009784:	2301      	movs	r3, #1
 8009786:	e028      	b.n	80097da <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009788:	2200      	movs	r2, #0
 800978a:	68b9      	ldr	r1, [r7, #8]
 800978c:	69b8      	ldr	r0, [r7, #24]
 800978e:	f7ff fea9 	bl	80094e4 <put_fat>
 8009792:	4603      	mov	r3, r0
 8009794:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009796:	7ffb      	ldrb	r3, [r7, #31]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d001      	beq.n	80097a0 <remove_chain+0x88>
 800979c:	7ffb      	ldrb	r3, [r7, #31]
 800979e:	e01c      	b.n	80097da <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80097a0:	69bb      	ldr	r3, [r7, #24]
 80097a2:	695a      	ldr	r2, [r3, #20]
 80097a4:	69bb      	ldr	r3, [r7, #24]
 80097a6:	699b      	ldr	r3, [r3, #24]
 80097a8:	3b02      	subs	r3, #2
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d20b      	bcs.n	80097c6 <remove_chain+0xae>
			fs->free_clst++;
 80097ae:	69bb      	ldr	r3, [r7, #24]
 80097b0:	695b      	ldr	r3, [r3, #20]
 80097b2:	1c5a      	adds	r2, r3, #1
 80097b4:	69bb      	ldr	r3, [r7, #24]
 80097b6:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80097b8:	69bb      	ldr	r3, [r7, #24]
 80097ba:	791b      	ldrb	r3, [r3, #4]
 80097bc:	f043 0301 	orr.w	r3, r3, #1
 80097c0:	b2da      	uxtb	r2, r3
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80097ca:	69bb      	ldr	r3, [r7, #24]
 80097cc:	699b      	ldr	r3, [r3, #24]
 80097ce:	68ba      	ldr	r2, [r7, #8]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d3c6      	bcc.n	8009762 <remove_chain+0x4a>
 80097d4:	e000      	b.n	80097d8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80097d6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80097d8:	2300      	movs	r3, #0
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3720      	adds	r7, #32
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b088      	sub	sp, #32
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
 80097ea:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d10d      	bne.n	8009814 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	691b      	ldr	r3, [r3, #16]
 80097fc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d004      	beq.n	800980e <create_chain+0x2c>
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	699b      	ldr	r3, [r3, #24]
 8009808:	69ba      	ldr	r2, [r7, #24]
 800980a:	429a      	cmp	r2, r3
 800980c:	d31b      	bcc.n	8009846 <create_chain+0x64>
 800980e:	2301      	movs	r3, #1
 8009810:	61bb      	str	r3, [r7, #24]
 8009812:	e018      	b.n	8009846 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009814:	6839      	ldr	r1, [r7, #0]
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f7ff fd91 	bl	800933e <get_fat>
 800981c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2b01      	cmp	r3, #1
 8009822:	d801      	bhi.n	8009828 <create_chain+0x46>
 8009824:	2301      	movs	r3, #1
 8009826:	e070      	b.n	800990a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800982e:	d101      	bne.n	8009834 <create_chain+0x52>
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	e06a      	b.n	800990a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	699b      	ldr	r3, [r3, #24]
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	429a      	cmp	r2, r3
 800983c:	d201      	bcs.n	8009842 <create_chain+0x60>
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	e063      	b.n	800990a <create_chain+0x128>
		scl = clst;
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009846:	69bb      	ldr	r3, [r7, #24]
 8009848:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	3301      	adds	r3, #1
 800984e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	699b      	ldr	r3, [r3, #24]
 8009854:	69fa      	ldr	r2, [r7, #28]
 8009856:	429a      	cmp	r2, r3
 8009858:	d307      	bcc.n	800986a <create_chain+0x88>
				ncl = 2;
 800985a:	2302      	movs	r3, #2
 800985c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800985e:	69fa      	ldr	r2, [r7, #28]
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	429a      	cmp	r2, r3
 8009864:	d901      	bls.n	800986a <create_chain+0x88>
 8009866:	2300      	movs	r3, #0
 8009868:	e04f      	b.n	800990a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800986a:	69f9      	ldr	r1, [r7, #28]
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f7ff fd66 	bl	800933e <get_fat>
 8009872:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00e      	beq.n	8009898 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2b01      	cmp	r3, #1
 800987e:	d003      	beq.n	8009888 <create_chain+0xa6>
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009886:	d101      	bne.n	800988c <create_chain+0xaa>
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	e03e      	b.n	800990a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800988c:	69fa      	ldr	r2, [r7, #28]
 800988e:	69bb      	ldr	r3, [r7, #24]
 8009890:	429a      	cmp	r2, r3
 8009892:	d1da      	bne.n	800984a <create_chain+0x68>
 8009894:	2300      	movs	r3, #0
 8009896:	e038      	b.n	800990a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009898:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800989a:	f04f 32ff 	mov.w	r2, #4294967295
 800989e:	69f9      	ldr	r1, [r7, #28]
 80098a0:	6938      	ldr	r0, [r7, #16]
 80098a2:	f7ff fe1f 	bl	80094e4 <put_fat>
 80098a6:	4603      	mov	r3, r0
 80098a8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80098aa:	7dfb      	ldrb	r3, [r7, #23]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d109      	bne.n	80098c4 <create_chain+0xe2>
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d006      	beq.n	80098c4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80098b6:	69fa      	ldr	r2, [r7, #28]
 80098b8:	6839      	ldr	r1, [r7, #0]
 80098ba:	6938      	ldr	r0, [r7, #16]
 80098bc:	f7ff fe12 	bl	80094e4 <put_fat>
 80098c0:	4603      	mov	r3, r0
 80098c2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80098c4:	7dfb      	ldrb	r3, [r7, #23]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d116      	bne.n	80098f8 <create_chain+0x116>
		fs->last_clst = ncl;
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	69fa      	ldr	r2, [r7, #28]
 80098ce:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	695a      	ldr	r2, [r3, #20]
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	699b      	ldr	r3, [r3, #24]
 80098d8:	3b02      	subs	r3, #2
 80098da:	429a      	cmp	r2, r3
 80098dc:	d804      	bhi.n	80098e8 <create_chain+0x106>
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	695b      	ldr	r3, [r3, #20]
 80098e2:	1e5a      	subs	r2, r3, #1
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	791b      	ldrb	r3, [r3, #4]
 80098ec:	f043 0301 	orr.w	r3, r3, #1
 80098f0:	b2da      	uxtb	r2, r3
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	711a      	strb	r2, [r3, #4]
 80098f6:	e007      	b.n	8009908 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80098f8:	7dfb      	ldrb	r3, [r7, #23]
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d102      	bne.n	8009904 <create_chain+0x122>
 80098fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009902:	e000      	b.n	8009906 <create_chain+0x124>
 8009904:	2301      	movs	r3, #1
 8009906:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009908:	69fb      	ldr	r3, [r7, #28]
}
 800990a:	4618      	mov	r0, r3
 800990c:	3720      	adds	r7, #32
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}

08009912 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009912:	b580      	push	{r7, lr}
 8009914:	b086      	sub	sp, #24
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
 800991a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009928:	d204      	bcs.n	8009934 <dir_sdi+0x22>
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	f003 031f 	and.w	r3, r3, #31
 8009930:	2b00      	cmp	r3, #0
 8009932:	d001      	beq.n	8009938 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009934:	2302      	movs	r3, #2
 8009936:	e071      	b.n	8009a1c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	683a      	ldr	r2, [r7, #0]
 800993c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d106      	bne.n	8009958 <dir_sdi+0x46>
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	2b02      	cmp	r3, #2
 8009950:	d902      	bls.n	8009958 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009956:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d10c      	bne.n	8009978 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	095b      	lsrs	r3, r3, #5
 8009962:	693a      	ldr	r2, [r7, #16]
 8009964:	8912      	ldrh	r2, [r2, #8]
 8009966:	4293      	cmp	r3, r2
 8009968:	d301      	bcc.n	800996e <dir_sdi+0x5c>
 800996a:	2302      	movs	r3, #2
 800996c:	e056      	b.n	8009a1c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	61da      	str	r2, [r3, #28]
 8009976:	e02d      	b.n	80099d4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	895b      	ldrh	r3, [r3, #10]
 800997c:	461a      	mov	r2, r3
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	899b      	ldrh	r3, [r3, #12]
 8009982:	fb02 f303 	mul.w	r3, r2, r3
 8009986:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009988:	e019      	b.n	80099be <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6979      	ldr	r1, [r7, #20]
 800998e:	4618      	mov	r0, r3
 8009990:	f7ff fcd5 	bl	800933e <get_fat>
 8009994:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800999c:	d101      	bne.n	80099a2 <dir_sdi+0x90>
 800999e:	2301      	movs	r3, #1
 80099a0:	e03c      	b.n	8009a1c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	d904      	bls.n	80099b2 <dir_sdi+0xa0>
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	699b      	ldr	r3, [r3, #24]
 80099ac:	697a      	ldr	r2, [r7, #20]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d301      	bcc.n	80099b6 <dir_sdi+0xa4>
 80099b2:	2302      	movs	r3, #2
 80099b4:	e032      	b.n	8009a1c <dir_sdi+0x10a>
			ofs -= csz;
 80099b6:	683a      	ldr	r2, [r7, #0]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	1ad3      	subs	r3, r2, r3
 80099bc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80099be:	683a      	ldr	r2, [r7, #0]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d2e1      	bcs.n	800998a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80099c6:	6979      	ldr	r1, [r7, #20]
 80099c8:	6938      	ldr	r0, [r7, #16]
 80099ca:	f7ff fc99 	bl	8009300 <clust2sect>
 80099ce:	4602      	mov	r2, r0
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	697a      	ldr	r2, [r7, #20]
 80099d8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	69db      	ldr	r3, [r3, #28]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d101      	bne.n	80099e6 <dir_sdi+0xd4>
 80099e2:	2302      	movs	r3, #2
 80099e4:	e01a      	b.n	8009a1c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	69da      	ldr	r2, [r3, #28]
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	899b      	ldrh	r3, [r3, #12]
 80099ee:	4619      	mov	r1, r3
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80099f6:	441a      	add	r2, r3
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	899b      	ldrh	r3, [r3, #12]
 8009a06:	461a      	mov	r2, r3
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	fbb3 f0f2 	udiv	r0, r3, r2
 8009a0e:	fb00 f202 	mul.w	r2, r0, r2
 8009a12:	1a9b      	subs	r3, r3, r2
 8009a14:	18ca      	adds	r2, r1, r3
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009a1a:	2300      	movs	r3, #0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3718      	adds	r7, #24
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b086      	sub	sp, #24
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	695b      	ldr	r3, [r3, #20]
 8009a38:	3320      	adds	r3, #32
 8009a3a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	69db      	ldr	r3, [r3, #28]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d003      	beq.n	8009a4c <dir_next+0x28>
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009a4a:	d301      	bcc.n	8009a50 <dir_next+0x2c>
 8009a4c:	2304      	movs	r3, #4
 8009a4e:	e0bb      	b.n	8009bc8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	899b      	ldrh	r3, [r3, #12]
 8009a54:	461a      	mov	r2, r3
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a5c:	fb01 f202 	mul.w	r2, r1, r2
 8009a60:	1a9b      	subs	r3, r3, r2
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	f040 809d 	bne.w	8009ba2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	69db      	ldr	r3, [r3, #28]
 8009a6c:	1c5a      	adds	r2, r3, #1
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	699b      	ldr	r3, [r3, #24]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d10b      	bne.n	8009a92 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	095b      	lsrs	r3, r3, #5
 8009a7e:	68fa      	ldr	r2, [r7, #12]
 8009a80:	8912      	ldrh	r2, [r2, #8]
 8009a82:	4293      	cmp	r3, r2
 8009a84:	f0c0 808d 	bcc.w	8009ba2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	61da      	str	r2, [r3, #28]
 8009a8e:	2304      	movs	r3, #4
 8009a90:	e09a      	b.n	8009bc8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	899b      	ldrh	r3, [r3, #12]
 8009a96:	461a      	mov	r2, r3
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a9e:	68fa      	ldr	r2, [r7, #12]
 8009aa0:	8952      	ldrh	r2, [r2, #10]
 8009aa2:	3a01      	subs	r2, #1
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d17b      	bne.n	8009ba2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	699b      	ldr	r3, [r3, #24]
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	4610      	mov	r0, r2
 8009ab4:	f7ff fc43 	bl	800933e <get_fat>
 8009ab8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d801      	bhi.n	8009ac4 <dir_next+0xa0>
 8009ac0:	2302      	movs	r3, #2
 8009ac2:	e081      	b.n	8009bc8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aca:	d101      	bne.n	8009ad0 <dir_next+0xac>
 8009acc:	2301      	movs	r3, #1
 8009ace:	e07b      	b.n	8009bc8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	699b      	ldr	r3, [r3, #24]
 8009ad4:	697a      	ldr	r2, [r7, #20]
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d359      	bcc.n	8009b8e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d104      	bne.n	8009aea <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	61da      	str	r2, [r3, #28]
 8009ae6:	2304      	movs	r3, #4
 8009ae8:	e06e      	b.n	8009bc8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	699b      	ldr	r3, [r3, #24]
 8009af0:	4619      	mov	r1, r3
 8009af2:	4610      	mov	r0, r2
 8009af4:	f7ff fe75 	bl	80097e2 <create_chain>
 8009af8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d101      	bne.n	8009b04 <dir_next+0xe0>
 8009b00:	2307      	movs	r3, #7
 8009b02:	e061      	b.n	8009bc8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d101      	bne.n	8009b0e <dir_next+0xea>
 8009b0a:	2302      	movs	r3, #2
 8009b0c:	e05c      	b.n	8009bc8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b14:	d101      	bne.n	8009b1a <dir_next+0xf6>
 8009b16:	2301      	movs	r3, #1
 8009b18:	e056      	b.n	8009bc8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009b1a:	68f8      	ldr	r0, [r7, #12]
 8009b1c:	f7ff fb0e 	bl	800913c <sync_window>
 8009b20:	4603      	mov	r3, r0
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d001      	beq.n	8009b2a <dir_next+0x106>
 8009b26:	2301      	movs	r3, #1
 8009b28:	e04e      	b.n	8009bc8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	899b      	ldrh	r3, [r3, #12]
 8009b34:	461a      	mov	r2, r3
 8009b36:	2100      	movs	r1, #0
 8009b38:	f7ff fa7f 	bl	800903a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	613b      	str	r3, [r7, #16]
 8009b40:	6979      	ldr	r1, [r7, #20]
 8009b42:	68f8      	ldr	r0, [r7, #12]
 8009b44:	f7ff fbdc 	bl	8009300 <clust2sect>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8009b4e:	e012      	b.n	8009b76 <dir_next+0x152>
						fs->wflag = 1;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2201      	movs	r2, #1
 8009b54:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009b56:	68f8      	ldr	r0, [r7, #12]
 8009b58:	f7ff faf0 	bl	800913c <sync_window>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d001      	beq.n	8009b66 <dir_next+0x142>
 8009b62:	2301      	movs	r3, #1
 8009b64:	e030      	b.n	8009bc8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	613b      	str	r3, [r7, #16]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b70:	1c5a      	adds	r2, r3, #1
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	631a      	str	r2, [r3, #48]	@ 0x30
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	895b      	ldrh	r3, [r3, #10]
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d3e6      	bcc.n	8009b50 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	1ad2      	subs	r2, r2, r3
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	697a      	ldr	r2, [r7, #20]
 8009b92:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009b94:	6979      	ldr	r1, [r7, #20]
 8009b96:	68f8      	ldr	r0, [r7, #12]
 8009b98:	f7ff fbb2 	bl	8009300 <clust2sect>
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	68ba      	ldr	r2, [r7, #8]
 8009ba6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	899b      	ldrh	r3, [r3, #12]
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	fbb3 f0f2 	udiv	r0, r3, r2
 8009bba:	fb00 f202 	mul.w	r2, r0, r2
 8009bbe:	1a9b      	subs	r3, r3, r2
 8009bc0:	18ca      	adds	r2, r1, r3
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009bc6:	2300      	movs	r3, #0
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3718      	adds	r7, #24
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b086      	sub	sp, #24
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009be0:	2100      	movs	r1, #0
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f7ff fe95 	bl	8009912 <dir_sdi>
 8009be8:	4603      	mov	r3, r0
 8009bea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009bec:	7dfb      	ldrb	r3, [r7, #23]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d12b      	bne.n	8009c4a <dir_alloc+0x7a>
		n = 0;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	69db      	ldr	r3, [r3, #28]
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	f7ff fae1 	bl	80091c4 <move_window>
 8009c02:	4603      	mov	r3, r0
 8009c04:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009c06:	7dfb      	ldrb	r3, [r7, #23]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d11d      	bne.n	8009c48 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6a1b      	ldr	r3, [r3, #32]
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	2be5      	cmp	r3, #229	@ 0xe5
 8009c14:	d004      	beq.n	8009c20 <dir_alloc+0x50>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6a1b      	ldr	r3, [r3, #32]
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d107      	bne.n	8009c30 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	3301      	adds	r3, #1
 8009c24:	613b      	str	r3, [r7, #16]
 8009c26:	693a      	ldr	r2, [r7, #16]
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d102      	bne.n	8009c34 <dir_alloc+0x64>
 8009c2e:	e00c      	b.n	8009c4a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009c30:	2300      	movs	r3, #0
 8009c32:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009c34:	2101      	movs	r1, #1
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f7ff fef4 	bl	8009a24 <dir_next>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009c40:	7dfb      	ldrb	r3, [r7, #23]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d0d7      	beq.n	8009bf6 <dir_alloc+0x26>
 8009c46:	e000      	b.n	8009c4a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009c48:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009c4a:	7dfb      	ldrb	r3, [r7, #23]
 8009c4c:	2b04      	cmp	r3, #4
 8009c4e:	d101      	bne.n	8009c54 <dir_alloc+0x84>
 8009c50:	2307      	movs	r3, #7
 8009c52:	75fb      	strb	r3, [r7, #23]
	return res;
 8009c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3718      	adds	r7, #24
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b084      	sub	sp, #16
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
 8009c66:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	331a      	adds	r3, #26
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7ff f941 	bl	8008ef4 <ld_word>
 8009c72:	4603      	mov	r3, r0
 8009c74:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	781b      	ldrb	r3, [r3, #0]
 8009c7a:	2b03      	cmp	r3, #3
 8009c7c:	d109      	bne.n	8009c92 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	3314      	adds	r3, #20
 8009c82:	4618      	mov	r0, r3
 8009c84:	f7ff f936 	bl	8008ef4 <ld_word>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	041b      	lsls	r3, r3, #16
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009c92:	68fb      	ldr	r3, [r7, #12]
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3710      	adds	r7, #16
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b084      	sub	sp, #16
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	331a      	adds	r3, #26
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	b292      	uxth	r2, r2
 8009cb0:	4611      	mov	r1, r2
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f7ff f959 	bl	8008f6a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	2b03      	cmp	r3, #3
 8009cbe:	d109      	bne.n	8009cd4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	f103 0214 	add.w	r2, r3, #20
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	0c1b      	lsrs	r3, r3, #16
 8009cca:	b29b      	uxth	r3, r3
 8009ccc:	4619      	mov	r1, r3
 8009cce:	4610      	mov	r0, r2
 8009cd0:	f7ff f94b 	bl	8008f6a <st_word>
	}
}
 8009cd4:	bf00      	nop
 8009cd6:	3710      	adds	r7, #16
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b086      	sub	sp, #24
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009cea:	2100      	movs	r1, #0
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f7ff fe10 	bl	8009912 <dir_sdi>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009cf6:	7dfb      	ldrb	r3, [r7, #23]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d001      	beq.n	8009d00 <dir_find+0x24>
 8009cfc:	7dfb      	ldrb	r3, [r7, #23]
 8009cfe:	e03e      	b.n	8009d7e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	69db      	ldr	r3, [r3, #28]
 8009d04:	4619      	mov	r1, r3
 8009d06:	6938      	ldr	r0, [r7, #16]
 8009d08:	f7ff fa5c 	bl	80091c4 <move_window>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009d10:	7dfb      	ldrb	r3, [r7, #23]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d12f      	bne.n	8009d76 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6a1b      	ldr	r3, [r3, #32]
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009d1e:	7bfb      	ldrb	r3, [r7, #15]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d102      	bne.n	8009d2a <dir_find+0x4e>
 8009d24:	2304      	movs	r3, #4
 8009d26:	75fb      	strb	r3, [r7, #23]
 8009d28:	e028      	b.n	8009d7c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6a1b      	ldr	r3, [r3, #32]
 8009d2e:	330b      	adds	r3, #11
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009d36:	b2da      	uxtb	r2, r3
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6a1b      	ldr	r3, [r3, #32]
 8009d40:	330b      	adds	r3, #11
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	f003 0308 	and.w	r3, r3, #8
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d10a      	bne.n	8009d62 <dir_find+0x86>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6a18      	ldr	r0, [r3, #32]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	3324      	adds	r3, #36	@ 0x24
 8009d54:	220b      	movs	r2, #11
 8009d56:	4619      	mov	r1, r3
 8009d58:	f7ff f98a 	bl	8009070 <mem_cmp>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d00b      	beq.n	8009d7a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009d62:	2100      	movs	r1, #0
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f7ff fe5d 	bl	8009a24 <dir_next>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009d6e:	7dfb      	ldrb	r3, [r7, #23]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d0c5      	beq.n	8009d00 <dir_find+0x24>
 8009d74:	e002      	b.n	8009d7c <dir_find+0xa0>
		if (res != FR_OK) break;
 8009d76:	bf00      	nop
 8009d78:	e000      	b.n	8009d7c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009d7a:	bf00      	nop

	return res;
 8009d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3718      	adds	r7, #24
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b084      	sub	sp, #16
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009d94:	2101      	movs	r1, #1
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f7ff ff1a 	bl	8009bd0 <dir_alloc>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009da0:	7bfb      	ldrb	r3, [r7, #15]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d11c      	bne.n	8009de0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	69db      	ldr	r3, [r3, #28]
 8009daa:	4619      	mov	r1, r3
 8009dac:	68b8      	ldr	r0, [r7, #8]
 8009dae:	f7ff fa09 	bl	80091c4 <move_window>
 8009db2:	4603      	mov	r3, r0
 8009db4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009db6:	7bfb      	ldrb	r3, [r7, #15]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d111      	bne.n	8009de0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6a1b      	ldr	r3, [r3, #32]
 8009dc0:	2220      	movs	r2, #32
 8009dc2:	2100      	movs	r1, #0
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f7ff f938 	bl	800903a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6a18      	ldr	r0, [r3, #32]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	3324      	adds	r3, #36	@ 0x24
 8009dd2:	220b      	movs	r2, #11
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	f7ff f90f 	bl	8008ff8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	2201      	movs	r2, #1
 8009dde:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3710      	adds	r7, #16
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
	...

08009dec <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b088      	sub	sp, #32
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	60fb      	str	r3, [r7, #12]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	3324      	adds	r3, #36	@ 0x24
 8009e00:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009e02:	220b      	movs	r2, #11
 8009e04:	2120      	movs	r1, #32
 8009e06:	68b8      	ldr	r0, [r7, #8]
 8009e08:	f7ff f917 	bl	800903a <mem_set>
	si = i = 0; ni = 8;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	613b      	str	r3, [r7, #16]
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	61fb      	str	r3, [r7, #28]
 8009e14:	2308      	movs	r3, #8
 8009e16:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009e18:	69fb      	ldr	r3, [r7, #28]
 8009e1a:	1c5a      	adds	r2, r3, #1
 8009e1c:	61fa      	str	r2, [r7, #28]
 8009e1e:	68fa      	ldr	r2, [r7, #12]
 8009e20:	4413      	add	r3, r2
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009e26:	7efb      	ldrb	r3, [r7, #27]
 8009e28:	2b20      	cmp	r3, #32
 8009e2a:	d94e      	bls.n	8009eca <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009e2c:	7efb      	ldrb	r3, [r7, #27]
 8009e2e:	2b2f      	cmp	r3, #47	@ 0x2f
 8009e30:	d006      	beq.n	8009e40 <create_name+0x54>
 8009e32:	7efb      	ldrb	r3, [r7, #27]
 8009e34:	2b5c      	cmp	r3, #92	@ 0x5c
 8009e36:	d110      	bne.n	8009e5a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009e38:	e002      	b.n	8009e40 <create_name+0x54>
 8009e3a:	69fb      	ldr	r3, [r7, #28]
 8009e3c:	3301      	adds	r3, #1
 8009e3e:	61fb      	str	r3, [r7, #28]
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	4413      	add	r3, r2
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	2b2f      	cmp	r3, #47	@ 0x2f
 8009e4a:	d0f6      	beq.n	8009e3a <create_name+0x4e>
 8009e4c:	68fa      	ldr	r2, [r7, #12]
 8009e4e:	69fb      	ldr	r3, [r7, #28]
 8009e50:	4413      	add	r3, r2
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	2b5c      	cmp	r3, #92	@ 0x5c
 8009e56:	d0f0      	beq.n	8009e3a <create_name+0x4e>
			break;
 8009e58:	e038      	b.n	8009ecc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009e5a:	7efb      	ldrb	r3, [r7, #27]
 8009e5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e5e:	d003      	beq.n	8009e68 <create_name+0x7c>
 8009e60:	693a      	ldr	r2, [r7, #16]
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d30c      	bcc.n	8009e82 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	2b0b      	cmp	r3, #11
 8009e6c:	d002      	beq.n	8009e74 <create_name+0x88>
 8009e6e:	7efb      	ldrb	r3, [r7, #27]
 8009e70:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e72:	d001      	beq.n	8009e78 <create_name+0x8c>
 8009e74:	2306      	movs	r3, #6
 8009e76:	e044      	b.n	8009f02 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009e78:	2308      	movs	r3, #8
 8009e7a:	613b      	str	r3, [r7, #16]
 8009e7c:	230b      	movs	r3, #11
 8009e7e:	617b      	str	r3, [r7, #20]
			continue;
 8009e80:	e022      	b.n	8009ec8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009e82:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	da04      	bge.n	8009e94 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009e8a:	7efb      	ldrb	r3, [r7, #27]
 8009e8c:	3b80      	subs	r3, #128	@ 0x80
 8009e8e:	4a1f      	ldr	r2, [pc, #124]	@ (8009f0c <create_name+0x120>)
 8009e90:	5cd3      	ldrb	r3, [r2, r3]
 8009e92:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009e94:	7efb      	ldrb	r3, [r7, #27]
 8009e96:	4619      	mov	r1, r3
 8009e98:	481d      	ldr	r0, [pc, #116]	@ (8009f10 <create_name+0x124>)
 8009e9a:	f7ff f910 	bl	80090be <chk_chr>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d001      	beq.n	8009ea8 <create_name+0xbc>
 8009ea4:	2306      	movs	r3, #6
 8009ea6:	e02c      	b.n	8009f02 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009ea8:	7efb      	ldrb	r3, [r7, #27]
 8009eaa:	2b60      	cmp	r3, #96	@ 0x60
 8009eac:	d905      	bls.n	8009eba <create_name+0xce>
 8009eae:	7efb      	ldrb	r3, [r7, #27]
 8009eb0:	2b7a      	cmp	r3, #122	@ 0x7a
 8009eb2:	d802      	bhi.n	8009eba <create_name+0xce>
 8009eb4:	7efb      	ldrb	r3, [r7, #27]
 8009eb6:	3b20      	subs	r3, #32
 8009eb8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	1c5a      	adds	r2, r3, #1
 8009ebe:	613a      	str	r2, [r7, #16]
 8009ec0:	68ba      	ldr	r2, [r7, #8]
 8009ec2:	4413      	add	r3, r2
 8009ec4:	7efa      	ldrb	r2, [r7, #27]
 8009ec6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009ec8:	e7a6      	b.n	8009e18 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009eca:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009ecc:	68fa      	ldr	r2, [r7, #12]
 8009ece:	69fb      	ldr	r3, [r7, #28]
 8009ed0:	441a      	add	r2, r3
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d101      	bne.n	8009ee0 <create_name+0xf4>
 8009edc:	2306      	movs	r3, #6
 8009ede:	e010      	b.n	8009f02 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	2be5      	cmp	r3, #229	@ 0xe5
 8009ee6:	d102      	bne.n	8009eee <create_name+0x102>
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	2205      	movs	r2, #5
 8009eec:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009eee:	7efb      	ldrb	r3, [r7, #27]
 8009ef0:	2b20      	cmp	r3, #32
 8009ef2:	d801      	bhi.n	8009ef8 <create_name+0x10c>
 8009ef4:	2204      	movs	r2, #4
 8009ef6:	e000      	b.n	8009efa <create_name+0x10e>
 8009ef8:	2200      	movs	r2, #0
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	330b      	adds	r3, #11
 8009efe:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009f00:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3720      	adds	r7, #32
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	0800ba74 	.word	0x0800ba74
 8009f10:	0800ba08 	.word	0x0800ba08

08009f14 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b086      	sub	sp, #24
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009f28:	e002      	b.n	8009f30 <follow_path+0x1c>
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	603b      	str	r3, [r7, #0]
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	781b      	ldrb	r3, [r3, #0]
 8009f34:	2b2f      	cmp	r3, #47	@ 0x2f
 8009f36:	d0f8      	beq.n	8009f2a <follow_path+0x16>
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	2b5c      	cmp	r3, #92	@ 0x5c
 8009f3e:	d0f4      	beq.n	8009f2a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	2200      	movs	r2, #0
 8009f44:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	2b1f      	cmp	r3, #31
 8009f4c:	d80a      	bhi.n	8009f64 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2280      	movs	r2, #128	@ 0x80
 8009f52:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8009f56:	2100      	movs	r1, #0
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f7ff fcda 	bl	8009912 <dir_sdi>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	75fb      	strb	r3, [r7, #23]
 8009f62:	e048      	b.n	8009ff6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009f64:	463b      	mov	r3, r7
 8009f66:	4619      	mov	r1, r3
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f7ff ff3f 	bl	8009dec <create_name>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009f72:	7dfb      	ldrb	r3, [r7, #23]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d139      	bne.n	8009fec <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f7ff feaf 	bl	8009cdc <dir_find>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009f88:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009f8a:	7dfb      	ldrb	r3, [r7, #23]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d00a      	beq.n	8009fa6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009f90:	7dfb      	ldrb	r3, [r7, #23]
 8009f92:	2b04      	cmp	r3, #4
 8009f94:	d12c      	bne.n	8009ff0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009f96:	7afb      	ldrb	r3, [r7, #11]
 8009f98:	f003 0304 	and.w	r3, r3, #4
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d127      	bne.n	8009ff0 <follow_path+0xdc>
 8009fa0:	2305      	movs	r3, #5
 8009fa2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009fa4:	e024      	b.n	8009ff0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009fa6:	7afb      	ldrb	r3, [r7, #11]
 8009fa8:	f003 0304 	and.w	r3, r3, #4
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d121      	bne.n	8009ff4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	799b      	ldrb	r3, [r3, #6]
 8009fb4:	f003 0310 	and.w	r3, r3, #16
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d102      	bne.n	8009fc2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009fbc:	2305      	movs	r3, #5
 8009fbe:	75fb      	strb	r3, [r7, #23]
 8009fc0:	e019      	b.n	8009ff6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	695b      	ldr	r3, [r3, #20]
 8009fcc:	68fa      	ldr	r2, [r7, #12]
 8009fce:	8992      	ldrh	r2, [r2, #12]
 8009fd0:	fbb3 f0f2 	udiv	r0, r3, r2
 8009fd4:	fb00 f202 	mul.w	r2, r0, r2
 8009fd8:	1a9b      	subs	r3, r3, r2
 8009fda:	440b      	add	r3, r1
 8009fdc:	4619      	mov	r1, r3
 8009fde:	68f8      	ldr	r0, [r7, #12]
 8009fe0:	f7ff fe3d 	bl	8009c5e <ld_clust>
 8009fe4:	4602      	mov	r2, r0
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009fea:	e7bb      	b.n	8009f64 <follow_path+0x50>
			if (res != FR_OK) break;
 8009fec:	bf00      	nop
 8009fee:	e002      	b.n	8009ff6 <follow_path+0xe2>
				break;
 8009ff0:	bf00      	nop
 8009ff2:	e000      	b.n	8009ff6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009ff4:	bf00      	nop
			}
		}
	}

	return res;
 8009ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3718      	adds	r7, #24
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a000:	b480      	push	{r7}
 800a002:	b087      	sub	sp, #28
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a008:	f04f 33ff 	mov.w	r3, #4294967295
 800a00c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d031      	beq.n	800a07a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	617b      	str	r3, [r7, #20]
 800a01c:	e002      	b.n	800a024 <get_ldnumber+0x24>
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	3301      	adds	r3, #1
 800a022:	617b      	str	r3, [r7, #20]
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	2b20      	cmp	r3, #32
 800a02a:	d903      	bls.n	800a034 <get_ldnumber+0x34>
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	2b3a      	cmp	r3, #58	@ 0x3a
 800a032:	d1f4      	bne.n	800a01e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	2b3a      	cmp	r3, #58	@ 0x3a
 800a03a:	d11c      	bne.n	800a076 <get_ldnumber+0x76>
			tp = *path;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	1c5a      	adds	r2, r3, #1
 800a046:	60fa      	str	r2, [r7, #12]
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	3b30      	subs	r3, #48	@ 0x30
 800a04c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	2b09      	cmp	r3, #9
 800a052:	d80e      	bhi.n	800a072 <get_ldnumber+0x72>
 800a054:	68fa      	ldr	r2, [r7, #12]
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	429a      	cmp	r2, r3
 800a05a:	d10a      	bne.n	800a072 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d107      	bne.n	800a072 <get_ldnumber+0x72>
					vol = (int)i;
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	3301      	adds	r3, #1
 800a06a:	617b      	str	r3, [r7, #20]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	697a      	ldr	r2, [r7, #20]
 800a070:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	e002      	b.n	800a07c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a076:	2300      	movs	r3, #0
 800a078:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a07a:	693b      	ldr	r3, [r7, #16]
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	371c      	adds	r7, #28
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	70da      	strb	r2, [r3, #3]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f04f 32ff 	mov.w	r2, #4294967295
 800a09e:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a0a0:	6839      	ldr	r1, [r7, #0]
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f7ff f88e 	bl	80091c4 <move_window>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d001      	beq.n	800a0b2 <check_fs+0x2a>
 800a0ae:	2304      	movs	r3, #4
 800a0b0:	e038      	b.n	800a124 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	3334      	adds	r3, #52	@ 0x34
 800a0b6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7fe ff1a 	bl	8008ef4 <ld_word>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d001      	beq.n	800a0d0 <check_fs+0x48>
 800a0cc:	2303      	movs	r3, #3
 800a0ce:	e029      	b.n	800a124 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a0d6:	2be9      	cmp	r3, #233	@ 0xe9
 800a0d8:	d009      	beq.n	800a0ee <check_fs+0x66>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a0e0:	2beb      	cmp	r3, #235	@ 0xeb
 800a0e2:	d11e      	bne.n	800a122 <check_fs+0x9a>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800a0ea:	2b90      	cmp	r3, #144	@ 0x90
 800a0ec:	d119      	bne.n	800a122 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	3334      	adds	r3, #52	@ 0x34
 800a0f2:	3336      	adds	r3, #54	@ 0x36
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7fe ff15 	bl	8008f24 <ld_dword>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a100:	4a0a      	ldr	r2, [pc, #40]	@ (800a12c <check_fs+0xa4>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d101      	bne.n	800a10a <check_fs+0x82>
 800a106:	2300      	movs	r3, #0
 800a108:	e00c      	b.n	800a124 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	3334      	adds	r3, #52	@ 0x34
 800a10e:	3352      	adds	r3, #82	@ 0x52
 800a110:	4618      	mov	r0, r3
 800a112:	f7fe ff07 	bl	8008f24 <ld_dword>
 800a116:	4603      	mov	r3, r0
 800a118:	4a05      	ldr	r2, [pc, #20]	@ (800a130 <check_fs+0xa8>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d101      	bne.n	800a122 <check_fs+0x9a>
 800a11e:	2300      	movs	r3, #0
 800a120:	e000      	b.n	800a124 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a122:	2302      	movs	r3, #2
}
 800a124:	4618      	mov	r0, r3
 800a126:	3708      	adds	r7, #8
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}
 800a12c:	00544146 	.word	0x00544146
 800a130:	33544146 	.word	0x33544146

0800a134 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b096      	sub	sp, #88	@ 0x58
 800a138:	af00      	add	r7, sp, #0
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	60b9      	str	r1, [r7, #8]
 800a13e:	4613      	mov	r3, r2
 800a140:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	2200      	movs	r2, #0
 800a146:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a148:	68f8      	ldr	r0, [r7, #12]
 800a14a:	f7ff ff59 	bl	800a000 <get_ldnumber>
 800a14e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a150:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a152:	2b00      	cmp	r3, #0
 800a154:	da01      	bge.n	800a15a <find_volume+0x26>
 800a156:	230b      	movs	r3, #11
 800a158:	e262      	b.n	800a620 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a15a:	4a9f      	ldr	r2, [pc, #636]	@ (800a3d8 <find_volume+0x2a4>)
 800a15c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a15e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a162:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a166:	2b00      	cmp	r3, #0
 800a168:	d101      	bne.n	800a16e <find_volume+0x3a>
 800a16a:	230c      	movs	r3, #12
 800a16c:	e258      	b.n	800a620 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a172:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a174:	79fb      	ldrb	r3, [r7, #7]
 800a176:	f023 0301 	bic.w	r3, r3, #1
 800a17a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a17c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d01a      	beq.n	800a1ba <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a186:	785b      	ldrb	r3, [r3, #1]
 800a188:	4618      	mov	r0, r3
 800a18a:	f7fe fe13 	bl	8008db4 <disk_status>
 800a18e:	4603      	mov	r3, r0
 800a190:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a194:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a198:	f003 0301 	and.w	r3, r3, #1
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d10c      	bne.n	800a1ba <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a1a0:	79fb      	ldrb	r3, [r7, #7]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d007      	beq.n	800a1b6 <find_volume+0x82>
 800a1a6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a1aa:	f003 0304 	and.w	r3, r3, #4
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d001      	beq.n	800a1b6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a1b2:	230a      	movs	r3, #10
 800a1b4:	e234      	b.n	800a620 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	e232      	b.n	800a620 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a1ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1bc:	2200      	movs	r2, #0
 800a1be:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a1c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1c2:	b2da      	uxtb	r2, r3
 800a1c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a1c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ca:	785b      	ldrb	r3, [r3, #1]
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f7fe fe0b 	bl	8008de8 <disk_initialize>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a1d8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a1dc:	f003 0301 	and.w	r3, r3, #1
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d001      	beq.n	800a1e8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a1e4:	2303      	movs	r3, #3
 800a1e6:	e21b      	b.n	800a620 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a1e8:	79fb      	ldrb	r3, [r7, #7]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d007      	beq.n	800a1fe <find_volume+0xca>
 800a1ee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a1f2:	f003 0304 	and.w	r3, r3, #4
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d001      	beq.n	800a1fe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a1fa:	230a      	movs	r3, #10
 800a1fc:	e210      	b.n	800a620 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a1fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a200:	7858      	ldrb	r0, [r3, #1]
 800a202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a204:	330c      	adds	r3, #12
 800a206:	461a      	mov	r2, r3
 800a208:	2102      	movs	r1, #2
 800a20a:	f7fe fe55 	bl	8008eb8 <disk_ioctl>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d001      	beq.n	800a218 <find_volume+0xe4>
 800a214:	2301      	movs	r3, #1
 800a216:	e203      	b.n	800a620 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a21a:	899b      	ldrh	r3, [r3, #12]
 800a21c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a220:	d80d      	bhi.n	800a23e <find_volume+0x10a>
 800a222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a224:	899b      	ldrh	r3, [r3, #12]
 800a226:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a22a:	d308      	bcc.n	800a23e <find_volume+0x10a>
 800a22c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a22e:	899b      	ldrh	r3, [r3, #12]
 800a230:	461a      	mov	r2, r3
 800a232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a234:	899b      	ldrh	r3, [r3, #12]
 800a236:	3b01      	subs	r3, #1
 800a238:	4013      	ands	r3, r2
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d001      	beq.n	800a242 <find_volume+0x10e>
 800a23e:	2301      	movs	r3, #1
 800a240:	e1ee      	b.n	800a620 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a242:	2300      	movs	r3, #0
 800a244:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a246:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a248:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a24a:	f7ff ff1d 	bl	800a088 <check_fs>
 800a24e:	4603      	mov	r3, r0
 800a250:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a254:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a258:	2b02      	cmp	r3, #2
 800a25a:	d149      	bne.n	800a2f0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a25c:	2300      	movs	r3, #0
 800a25e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a260:	e01e      	b.n	800a2a0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a264:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a268:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a26a:	011b      	lsls	r3, r3, #4
 800a26c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800a270:	4413      	add	r3, r2
 800a272:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a276:	3304      	adds	r3, #4
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d006      	beq.n	800a28c <find_volume+0x158>
 800a27e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a280:	3308      	adds	r3, #8
 800a282:	4618      	mov	r0, r3
 800a284:	f7fe fe4e 	bl	8008f24 <ld_dword>
 800a288:	4602      	mov	r2, r0
 800a28a:	e000      	b.n	800a28e <find_volume+0x15a>
 800a28c:	2200      	movs	r2, #0
 800a28e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	3358      	adds	r3, #88	@ 0x58
 800a294:	443b      	add	r3, r7
 800a296:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a29a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a29c:	3301      	adds	r3, #1
 800a29e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a2a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2a2:	2b03      	cmp	r3, #3
 800a2a4:	d9dd      	bls.n	800a262 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800a2aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d002      	beq.n	800a2b6 <find_volume+0x182>
 800a2b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2b2:	3b01      	subs	r3, #1
 800a2b4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a2b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	3358      	adds	r3, #88	@ 0x58
 800a2bc:	443b      	add	r3, r7
 800a2be:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a2c2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a2c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d005      	beq.n	800a2d6 <find_volume+0x1a2>
 800a2ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a2cc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a2ce:	f7ff fedb 	bl	800a088 <check_fs>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	e000      	b.n	800a2d8 <find_volume+0x1a4>
 800a2d6:	2303      	movs	r3, #3
 800a2d8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a2dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d905      	bls.n	800a2f0 <find_volume+0x1bc>
 800a2e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	643b      	str	r3, [r7, #64]	@ 0x40
 800a2ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2ec:	2b03      	cmp	r3, #3
 800a2ee:	d9e2      	bls.n	800a2b6 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a2f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a2f4:	2b04      	cmp	r3, #4
 800a2f6:	d101      	bne.n	800a2fc <find_volume+0x1c8>
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	e191      	b.n	800a620 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a2fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a300:	2b01      	cmp	r3, #1
 800a302:	d901      	bls.n	800a308 <find_volume+0x1d4>
 800a304:	230d      	movs	r3, #13
 800a306:	e18b      	b.n	800a620 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a30a:	3334      	adds	r3, #52	@ 0x34
 800a30c:	330b      	adds	r3, #11
 800a30e:	4618      	mov	r0, r3
 800a310:	f7fe fdf0 	bl	8008ef4 <ld_word>
 800a314:	4603      	mov	r3, r0
 800a316:	461a      	mov	r2, r3
 800a318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a31a:	899b      	ldrh	r3, [r3, #12]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d001      	beq.n	800a324 <find_volume+0x1f0>
 800a320:	230d      	movs	r3, #13
 800a322:	e17d      	b.n	800a620 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a326:	3334      	adds	r3, #52	@ 0x34
 800a328:	3316      	adds	r3, #22
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7fe fde2 	bl	8008ef4 <ld_word>
 800a330:	4603      	mov	r3, r0
 800a332:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a334:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a336:	2b00      	cmp	r3, #0
 800a338:	d106      	bne.n	800a348 <find_volume+0x214>
 800a33a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a33c:	3334      	adds	r3, #52	@ 0x34
 800a33e:	3324      	adds	r3, #36	@ 0x24
 800a340:	4618      	mov	r0, r3
 800a342:	f7fe fdef 	bl	8008f24 <ld_dword>
 800a346:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800a348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a34a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a34c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a34e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a350:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800a354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a356:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a35a:	789b      	ldrb	r3, [r3, #2]
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d005      	beq.n	800a36c <find_volume+0x238>
 800a360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a362:	789b      	ldrb	r3, [r3, #2]
 800a364:	2b02      	cmp	r3, #2
 800a366:	d001      	beq.n	800a36c <find_volume+0x238>
 800a368:	230d      	movs	r3, #13
 800a36a:	e159      	b.n	800a620 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a36e:	789b      	ldrb	r3, [r3, #2]
 800a370:	461a      	mov	r2, r3
 800a372:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a374:	fb02 f303 	mul.w	r3, r2, r3
 800a378:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a37c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a380:	461a      	mov	r2, r3
 800a382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a384:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a388:	895b      	ldrh	r3, [r3, #10]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d008      	beq.n	800a3a0 <find_volume+0x26c>
 800a38e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a390:	895b      	ldrh	r3, [r3, #10]
 800a392:	461a      	mov	r2, r3
 800a394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a396:	895b      	ldrh	r3, [r3, #10]
 800a398:	3b01      	subs	r3, #1
 800a39a:	4013      	ands	r3, r2
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d001      	beq.n	800a3a4 <find_volume+0x270>
 800a3a0:	230d      	movs	r3, #13
 800a3a2:	e13d      	b.n	800a620 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a3a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3a6:	3334      	adds	r3, #52	@ 0x34
 800a3a8:	3311      	adds	r3, #17
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7fe fda2 	bl	8008ef4 <ld_word>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3b6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ba:	891b      	ldrh	r3, [r3, #8]
 800a3bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a3be:	8992      	ldrh	r2, [r2, #12]
 800a3c0:	0952      	lsrs	r2, r2, #5
 800a3c2:	b292      	uxth	r2, r2
 800a3c4:	fbb3 f1f2 	udiv	r1, r3, r2
 800a3c8:	fb01 f202 	mul.w	r2, r1, r2
 800a3cc:	1a9b      	subs	r3, r3, r2
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d003      	beq.n	800a3dc <find_volume+0x2a8>
 800a3d4:	230d      	movs	r3, #13
 800a3d6:	e123      	b.n	800a620 <find_volume+0x4ec>
 800a3d8:	2000119c 	.word	0x2000119c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a3dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3de:	3334      	adds	r3, #52	@ 0x34
 800a3e0:	3313      	adds	r3, #19
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f7fe fd86 	bl	8008ef4 <ld_word>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a3ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d106      	bne.n	800a400 <find_volume+0x2cc>
 800a3f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3f4:	3334      	adds	r3, #52	@ 0x34
 800a3f6:	3320      	adds	r3, #32
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f7fe fd93 	bl	8008f24 <ld_dword>
 800a3fe:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a402:	3334      	adds	r3, #52	@ 0x34
 800a404:	330e      	adds	r3, #14
 800a406:	4618      	mov	r0, r3
 800a408:	f7fe fd74 	bl	8008ef4 <ld_word>
 800a40c:	4603      	mov	r3, r0
 800a40e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a410:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a412:	2b00      	cmp	r3, #0
 800a414:	d101      	bne.n	800a41a <find_volume+0x2e6>
 800a416:	230d      	movs	r3, #13
 800a418:	e102      	b.n	800a620 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a41a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a41c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a41e:	4413      	add	r3, r2
 800a420:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a422:	8911      	ldrh	r1, [r2, #8]
 800a424:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a426:	8992      	ldrh	r2, [r2, #12]
 800a428:	0952      	lsrs	r2, r2, #5
 800a42a:	b292      	uxth	r2, r2
 800a42c:	fbb1 f2f2 	udiv	r2, r1, r2
 800a430:	b292      	uxth	r2, r2
 800a432:	4413      	add	r3, r2
 800a434:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a436:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d201      	bcs.n	800a442 <find_volume+0x30e>
 800a43e:	230d      	movs	r3, #13
 800a440:	e0ee      	b.n	800a620 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a442:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a446:	1ad3      	subs	r3, r2, r3
 800a448:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a44a:	8952      	ldrh	r2, [r2, #10]
 800a44c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a450:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a454:	2b00      	cmp	r3, #0
 800a456:	d101      	bne.n	800a45c <find_volume+0x328>
 800a458:	230d      	movs	r3, #13
 800a45a:	e0e1      	b.n	800a620 <find_volume+0x4ec>
		fmt = FS_FAT32;
 800a45c:	2303      	movs	r3, #3
 800a45e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a464:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a468:	4293      	cmp	r3, r2
 800a46a:	d802      	bhi.n	800a472 <find_volume+0x33e>
 800a46c:	2302      	movs	r3, #2
 800a46e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a474:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a478:	4293      	cmp	r3, r2
 800a47a:	d802      	bhi.n	800a482 <find_volume+0x34e>
 800a47c:	2301      	movs	r3, #1
 800a47e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a484:	1c9a      	adds	r2, r3, #2
 800a486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a488:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a48a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a48c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a48e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a490:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a492:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a494:	441a      	add	r2, r3
 800a496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a498:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a49a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a49e:	441a      	add	r2, r3
 800a4a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a2:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800a4a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a4a8:	2b03      	cmp	r3, #3
 800a4aa:	d11e      	bne.n	800a4ea <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a4ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ae:	3334      	adds	r3, #52	@ 0x34
 800a4b0:	332a      	adds	r3, #42	@ 0x2a
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7fe fd1e 	bl	8008ef4 <ld_word>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d001      	beq.n	800a4c2 <find_volume+0x38e>
 800a4be:	230d      	movs	r3, #13
 800a4c0:	e0ae      	b.n	800a620 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a4c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4c4:	891b      	ldrh	r3, [r3, #8]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d001      	beq.n	800a4ce <find_volume+0x39a>
 800a4ca:	230d      	movs	r3, #13
 800a4cc:	e0a8      	b.n	800a620 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a4ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4d0:	3334      	adds	r3, #52	@ 0x34
 800a4d2:	332c      	adds	r3, #44	@ 0x2c
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7fe fd25 	bl	8008f24 <ld_dword>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4de:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a4e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4e2:	699b      	ldr	r3, [r3, #24]
 800a4e4:	009b      	lsls	r3, r3, #2
 800a4e6:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4e8:	e01f      	b.n	800a52a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a4ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ec:	891b      	ldrh	r3, [r3, #8]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d101      	bne.n	800a4f6 <find_volume+0x3c2>
 800a4f2:	230d      	movs	r3, #13
 800a4f4:	e094      	b.n	800a620 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a4f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a4fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4fc:	441a      	add	r2, r3
 800a4fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a500:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a502:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a506:	2b02      	cmp	r3, #2
 800a508:	d103      	bne.n	800a512 <find_volume+0x3de>
 800a50a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a50c:	699b      	ldr	r3, [r3, #24]
 800a50e:	005b      	lsls	r3, r3, #1
 800a510:	e00a      	b.n	800a528 <find_volume+0x3f4>
 800a512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a514:	699a      	ldr	r2, [r3, #24]
 800a516:	4613      	mov	r3, r2
 800a518:	005b      	lsls	r3, r3, #1
 800a51a:	4413      	add	r3, r2
 800a51c:	085a      	lsrs	r2, r3, #1
 800a51e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a520:	699b      	ldr	r3, [r3, #24]
 800a522:	f003 0301 	and.w	r3, r3, #1
 800a526:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a528:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a52a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a52c:	69da      	ldr	r2, [r3, #28]
 800a52e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a530:	899b      	ldrh	r3, [r3, #12]
 800a532:	4619      	mov	r1, r3
 800a534:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a536:	440b      	add	r3, r1
 800a538:	3b01      	subs	r3, #1
 800a53a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a53c:	8989      	ldrh	r1, [r1, #12]
 800a53e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a542:	429a      	cmp	r2, r3
 800a544:	d201      	bcs.n	800a54a <find_volume+0x416>
 800a546:	230d      	movs	r3, #13
 800a548:	e06a      	b.n	800a620 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a54a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a54c:	f04f 32ff 	mov.w	r2, #4294967295
 800a550:	615a      	str	r2, [r3, #20]
 800a552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a554:	695a      	ldr	r2, [r3, #20]
 800a556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a558:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800a55a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a55c:	2280      	movs	r2, #128	@ 0x80
 800a55e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a560:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a564:	2b03      	cmp	r3, #3
 800a566:	d149      	bne.n	800a5fc <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a56a:	3334      	adds	r3, #52	@ 0x34
 800a56c:	3330      	adds	r3, #48	@ 0x30
 800a56e:	4618      	mov	r0, r3
 800a570:	f7fe fcc0 	bl	8008ef4 <ld_word>
 800a574:	4603      	mov	r3, r0
 800a576:	2b01      	cmp	r3, #1
 800a578:	d140      	bne.n	800a5fc <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a57a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a57c:	3301      	adds	r3, #1
 800a57e:	4619      	mov	r1, r3
 800a580:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a582:	f7fe fe1f 	bl	80091c4 <move_window>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d137      	bne.n	800a5fc <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800a58c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a58e:	2200      	movs	r2, #0
 800a590:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a594:	3334      	adds	r3, #52	@ 0x34
 800a596:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7fe fcaa 	bl	8008ef4 <ld_word>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d127      	bne.n	800a5fc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a5ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ae:	3334      	adds	r3, #52	@ 0x34
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7fe fcb7 	bl	8008f24 <ld_dword>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	4a1b      	ldr	r2, [pc, #108]	@ (800a628 <find_volume+0x4f4>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d11e      	bne.n	800a5fc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a5be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5c0:	3334      	adds	r3, #52	@ 0x34
 800a5c2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f7fe fcac 	bl	8008f24 <ld_dword>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	4a17      	ldr	r2, [pc, #92]	@ (800a62c <find_volume+0x4f8>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d113      	bne.n	800a5fc <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a5d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5d6:	3334      	adds	r3, #52	@ 0x34
 800a5d8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f7fe fca1 	bl	8008f24 <ld_dword>
 800a5e2:	4602      	mov	r2, r0
 800a5e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5e6:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a5e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ea:	3334      	adds	r3, #52	@ 0x34
 800a5ec:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f7fe fc97 	bl	8008f24 <ld_dword>
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5fa:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a5fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5fe:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800a602:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a604:	4b0a      	ldr	r3, [pc, #40]	@ (800a630 <find_volume+0x4fc>)
 800a606:	881b      	ldrh	r3, [r3, #0]
 800a608:	3301      	adds	r3, #1
 800a60a:	b29a      	uxth	r2, r3
 800a60c:	4b08      	ldr	r3, [pc, #32]	@ (800a630 <find_volume+0x4fc>)
 800a60e:	801a      	strh	r2, [r3, #0]
 800a610:	4b07      	ldr	r3, [pc, #28]	@ (800a630 <find_volume+0x4fc>)
 800a612:	881a      	ldrh	r2, [r3, #0]
 800a614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a616:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a618:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a61a:	f7fe fd6b 	bl	80090f4 <clear_lock>
#endif
	return FR_OK;
 800a61e:	2300      	movs	r3, #0
}
 800a620:	4618      	mov	r0, r3
 800a622:	3758      	adds	r7, #88	@ 0x58
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}
 800a628:	41615252 	.word	0x41615252
 800a62c:	61417272 	.word	0x61417272
 800a630:	200011a0 	.word	0x200011a0

0800a634 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b088      	sub	sp, #32
 800a638:	af00      	add	r7, sp, #0
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	60b9      	str	r1, [r7, #8]
 800a63e:	4613      	mov	r3, r2
 800a640:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a646:	f107 0310 	add.w	r3, r7, #16
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7ff fcd8 	bl	800a000 <get_ldnumber>
 800a650:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a652:	69fb      	ldr	r3, [r7, #28]
 800a654:	2b00      	cmp	r3, #0
 800a656:	da01      	bge.n	800a65c <f_mount+0x28>
 800a658:	230b      	movs	r3, #11
 800a65a:	e02b      	b.n	800a6b4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a65c:	4a17      	ldr	r2, [pc, #92]	@ (800a6bc <f_mount+0x88>)
 800a65e:	69fb      	ldr	r3, [r7, #28]
 800a660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a664:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a666:	69bb      	ldr	r3, [r7, #24]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d005      	beq.n	800a678 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a66c:	69b8      	ldr	r0, [r7, #24]
 800a66e:	f7fe fd41 	bl	80090f4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	2200      	movs	r2, #0
 800a676:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d002      	beq.n	800a684 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2200      	movs	r2, #0
 800a682:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a684:	68fa      	ldr	r2, [r7, #12]
 800a686:	490d      	ldr	r1, [pc, #52]	@ (800a6bc <f_mount+0x88>)
 800a688:	69fb      	ldr	r3, [r7, #28]
 800a68a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d002      	beq.n	800a69a <f_mount+0x66>
 800a694:	79fb      	ldrb	r3, [r7, #7]
 800a696:	2b01      	cmp	r3, #1
 800a698:	d001      	beq.n	800a69e <f_mount+0x6a>
 800a69a:	2300      	movs	r3, #0
 800a69c:	e00a      	b.n	800a6b4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a69e:	f107 010c 	add.w	r1, r7, #12
 800a6a2:	f107 0308 	add.w	r3, r7, #8
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f7ff fd43 	bl	800a134 <find_volume>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a6b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3720      	adds	r7, #32
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}
 800a6bc:	2000119c 	.word	0x2000119c

0800a6c0 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b096      	sub	sp, #88	@ 0x58
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800a6c8:	f107 0108 	add.w	r1, r7, #8
 800a6cc:	1d3b      	adds	r3, r7, #4
 800a6ce:	2202      	movs	r2, #2
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7ff fd2f 	bl	800a134 <find_volume>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800a6e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f040 80f2 	bne.w	800a8ce <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	f107 030c 	add.w	r3, r7, #12
 800a6f0:	4611      	mov	r1, r2
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7ff fc0e 	bl	8009f14 <follow_path>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800a6fe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a702:	2b00      	cmp	r3, #0
 800a704:	d102      	bne.n	800a70c <f_mkdir+0x4c>
 800a706:	2308      	movs	r3, #8
 800a708:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800a70c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a710:	2b04      	cmp	r3, #4
 800a712:	f040 80dc 	bne.w	800a8ce <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800a716:	f107 030c 	add.w	r3, r7, #12
 800a71a:	2100      	movs	r1, #0
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7ff f860 	bl	80097e2 <create_chain>
 800a722:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	895b      	ldrh	r3, [r3, #10]
 800a728:	461a      	mov	r2, r3
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	899b      	ldrh	r3, [r3, #12]
 800a72e:	fb02 f303 	mul.w	r3, r2, r3
 800a732:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800a734:	2300      	movs	r3, #0
 800a736:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800a73a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d102      	bne.n	800a746 <f_mkdir+0x86>
 800a740:	2307      	movs	r3, #7
 800a742:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800a746:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d102      	bne.n	800a752 <f_mkdir+0x92>
 800a74c:	2302      	movs	r3, #2
 800a74e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a752:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a754:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a758:	d102      	bne.n	800a760 <f_mkdir+0xa0>
 800a75a:	2301      	movs	r3, #1
 800a75c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800a760:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a764:	2b00      	cmp	r3, #0
 800a766:	d106      	bne.n	800a776 <f_mkdir+0xb6>
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7fe fce6 	bl	800913c <sync_window>
 800a770:	4603      	mov	r3, r0
 800a772:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 800a776:	f7fb f97b 	bl	8005a70 <get_fattime>
 800a77a:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800a77c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a780:	2b00      	cmp	r3, #0
 800a782:	d16c      	bne.n	800a85e <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a788:	4618      	mov	r0, r3
 800a78a:	f7fe fdb9 	bl	8009300 <clust2sect>
 800a78e:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	3334      	adds	r3, #52	@ 0x34
 800a794:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	899b      	ldrh	r3, [r3, #12]
 800a79a:	461a      	mov	r2, r3
 800a79c:	2100      	movs	r1, #0
 800a79e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a7a0:	f7fe fc4b 	bl	800903a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800a7a4:	220b      	movs	r2, #11
 800a7a6:	2120      	movs	r1, #32
 800a7a8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a7aa:	f7fe fc46 	bl	800903a <mem_set>
					dir[DIR_Name] = '.';
 800a7ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7b0:	222e      	movs	r2, #46	@ 0x2e
 800a7b2:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800a7b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7b6:	330b      	adds	r3, #11
 800a7b8:	2210      	movs	r2, #16
 800a7ba:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800a7bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7be:	3316      	adds	r3, #22
 800a7c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7fe fbec 	bl	8008fa0 <st_dword>
					st_clust(fs, dir, dcl);
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a7cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7ff fa64 	bl	8009c9c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800a7d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7d6:	3320      	adds	r3, #32
 800a7d8:	2220      	movs	r2, #32
 800a7da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f7fe fc0b 	bl	8008ff8 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800a7e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a7e4:	3321      	adds	r3, #33	@ 0x21
 800a7e6:	222e      	movs	r2, #46	@ 0x2e
 800a7e8:	701a      	strb	r2, [r3, #0]
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	781b      	ldrb	r3, [r3, #0]
 800a7f2:	2b03      	cmp	r3, #3
 800a7f4:	d106      	bne.n	800a804 <f_mkdir+0x144>
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d101      	bne.n	800a804 <f_mkdir+0x144>
 800a800:	2300      	movs	r3, #0
 800a802:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800a804:	68b8      	ldr	r0, [r7, #8]
 800a806:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a808:	3320      	adds	r3, #32
 800a80a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a80c:	4619      	mov	r1, r3
 800a80e:	f7ff fa45 	bl	8009c9c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	895b      	ldrh	r3, [r3, #10]
 800a816:	653b      	str	r3, [r7, #80]	@ 0x50
 800a818:	e01c      	b.n	800a854 <f_mkdir+0x194>
					fs->winsect = dsc++;
 800a81a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a81c:	1c5a      	adds	r2, r3, #1
 800a81e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800a820:	68ba      	ldr	r2, [r7, #8]
 800a822:	6313      	str	r3, [r2, #48]	@ 0x30
					fs->wflag = 1;
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	2201      	movs	r2, #1
 800a828:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	4618      	mov	r0, r3
 800a82e:	f7fe fc85 	bl	800913c <sync_window>
 800a832:	4603      	mov	r3, r0
 800a834:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 800a838:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d10d      	bne.n	800a85c <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	899b      	ldrh	r3, [r3, #12]
 800a844:	461a      	mov	r2, r3
 800a846:	2100      	movs	r1, #0
 800a848:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a84a:	f7fe fbf6 	bl	800903a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800a84e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a850:	3b01      	subs	r3, #1
 800a852:	653b      	str	r3, [r7, #80]	@ 0x50
 800a854:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a856:	2b00      	cmp	r3, #0
 800a858:	d1df      	bne.n	800a81a <f_mkdir+0x15a>
 800a85a:	e000      	b.n	800a85e <f_mkdir+0x19e>
					if (res != FR_OK) break;
 800a85c:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800a85e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a862:	2b00      	cmp	r3, #0
 800a864:	d107      	bne.n	800a876 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800a866:	f107 030c 	add.w	r3, r7, #12
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7ff fa8b 	bl	8009d86 <dir_register>
 800a870:	4603      	mov	r3, r0
 800a872:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 800a876:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d120      	bne.n	800a8c0 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800a87e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a880:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800a882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a884:	3316      	adds	r3, #22
 800a886:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a888:	4618      	mov	r0, r3
 800a88a:	f7fe fb89 	bl	8008fa0 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a892:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a894:	4618      	mov	r0, r3
 800a896:	f7ff fa01 	bl	8009c9c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800a89a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a89c:	330b      	adds	r3, #11
 800a89e:	2210      	movs	r2, #16
 800a8a0:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800a8a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d10e      	bne.n	800a8ce <f_mkdir+0x20e>
					res = sync_fs(fs);
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f7fe fcb4 	bl	8009220 <sync_fs>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800a8be:	e006      	b.n	800a8ce <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800a8c0:	f107 030c 	add.w	r3, r7, #12
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f7fe ff25 	bl	8009718 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800a8ce:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3758      	adds	r7, #88	@ 0x58
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
	...

0800a8dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b087      	sub	sp, #28
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a8f2:	4b1f      	ldr	r3, [pc, #124]	@ (800a970 <FATFS_LinkDriverEx+0x94>)
 800a8f4:	7a5b      	ldrb	r3, [r3, #9]
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d131      	bne.n	800a960 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a8fc:	4b1c      	ldr	r3, [pc, #112]	@ (800a970 <FATFS_LinkDriverEx+0x94>)
 800a8fe:	7a5b      	ldrb	r3, [r3, #9]
 800a900:	b2db      	uxtb	r3, r3
 800a902:	461a      	mov	r2, r3
 800a904:	4b1a      	ldr	r3, [pc, #104]	@ (800a970 <FATFS_LinkDriverEx+0x94>)
 800a906:	2100      	movs	r1, #0
 800a908:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a90a:	4b19      	ldr	r3, [pc, #100]	@ (800a970 <FATFS_LinkDriverEx+0x94>)
 800a90c:	7a5b      	ldrb	r3, [r3, #9]
 800a90e:	b2db      	uxtb	r3, r3
 800a910:	4a17      	ldr	r2, [pc, #92]	@ (800a970 <FATFS_LinkDriverEx+0x94>)
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	4413      	add	r3, r2
 800a916:	68fa      	ldr	r2, [r7, #12]
 800a918:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a91a:	4b15      	ldr	r3, [pc, #84]	@ (800a970 <FATFS_LinkDriverEx+0x94>)
 800a91c:	7a5b      	ldrb	r3, [r3, #9]
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	461a      	mov	r2, r3
 800a922:	4b13      	ldr	r3, [pc, #76]	@ (800a970 <FATFS_LinkDriverEx+0x94>)
 800a924:	4413      	add	r3, r2
 800a926:	79fa      	ldrb	r2, [r7, #7]
 800a928:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a92a:	4b11      	ldr	r3, [pc, #68]	@ (800a970 <FATFS_LinkDriverEx+0x94>)
 800a92c:	7a5b      	ldrb	r3, [r3, #9]
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	1c5a      	adds	r2, r3, #1
 800a932:	b2d1      	uxtb	r1, r2
 800a934:	4a0e      	ldr	r2, [pc, #56]	@ (800a970 <FATFS_LinkDriverEx+0x94>)
 800a936:	7251      	strb	r1, [r2, #9]
 800a938:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a93a:	7dbb      	ldrb	r3, [r7, #22]
 800a93c:	3330      	adds	r3, #48	@ 0x30
 800a93e:	b2da      	uxtb	r2, r3
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	3301      	adds	r3, #1
 800a948:	223a      	movs	r2, #58	@ 0x3a
 800a94a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	3302      	adds	r3, #2
 800a950:	222f      	movs	r2, #47	@ 0x2f
 800a952:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	3303      	adds	r3, #3
 800a958:	2200      	movs	r2, #0
 800a95a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a95c:	2300      	movs	r3, #0
 800a95e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a960:	7dfb      	ldrb	r3, [r7, #23]
}
 800a962:	4618      	mov	r0, r3
 800a964:	371c      	adds	r7, #28
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop
 800a970:	200011c4 	.word	0x200011c4

0800a974 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b082      	sub	sp, #8
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a97e:	2200      	movs	r2, #0
 800a980:	6839      	ldr	r1, [r7, #0]
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f7ff ffaa 	bl	800a8dc <FATFS_LinkDriverEx>
 800a988:	4603      	mov	r3, r0
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3708      	adds	r7, #8
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
	...

0800a994 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a998:	2201      	movs	r2, #1
 800a99a:	490e      	ldr	r1, [pc, #56]	@ (800a9d4 <MX_USB_HOST_Init+0x40>)
 800a99c:	480e      	ldr	r0, [pc, #56]	@ (800a9d8 <MX_USB_HOST_Init+0x44>)
 800a99e:	f7fc fd26 	bl	80073ee <USBH_Init>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d001      	beq.n	800a9ac <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a9a8:	f7f5 fed4 	bl	8000754 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800a9ac:	490b      	ldr	r1, [pc, #44]	@ (800a9dc <MX_USB_HOST_Init+0x48>)
 800a9ae:	480a      	ldr	r0, [pc, #40]	@ (800a9d8 <MX_USB_HOST_Init+0x44>)
 800a9b0:	f7fc fdca 	bl	8007548 <USBH_RegisterClass>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d001      	beq.n	800a9be <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a9ba:	f7f5 fecb 	bl	8000754 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a9be:	4806      	ldr	r0, [pc, #24]	@ (800a9d8 <MX_USB_HOST_Init+0x44>)
 800a9c0:	f7fc fe4e 	bl	8007660 <USBH_Start>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d001      	beq.n	800a9ce <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a9ca:	f7f5 fec3 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a9ce:	bf00      	nop
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	0800a9f5 	.word	0x0800a9f5
 800a9d8:	200011d0 	.word	0x200011d0
 800a9dc:	2000001c 	.word	0x2000001c

0800a9e0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a9e4:	4802      	ldr	r0, [pc, #8]	@ (800a9f0 <MX_USB_HOST_Process+0x10>)
 800a9e6:	f7fc fe4b 	bl	8007680 <USBH_Process>
}
 800a9ea:	bf00      	nop
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	200011d0 	.word	0x200011d0

0800a9f4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b082      	sub	sp, #8
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800aa00:	78fb      	ldrb	r3, [r7, #3]
 800aa02:	3b01      	subs	r3, #1
 800aa04:	2b04      	cmp	r3, #4
 800aa06:	d826      	bhi.n	800aa56 <USBH_UserProcess+0x62>
 800aa08:	a201      	add	r2, pc, #4	@ (adr r2, 800aa10 <USBH_UserProcess+0x1c>)
 800aa0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa0e:	bf00      	nop
 800aa10:	0800aa57 	.word	0x0800aa57
 800aa14:	0800aa37 	.word	0x0800aa37
 800aa18:	0800aa57 	.word	0x0800aa57
 800aa1c:	0800aa4f 	.word	0x0800aa4f
 800aa20:	0800aa25 	.word	0x0800aa25
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800aa24:	4b0e      	ldr	r3, [pc, #56]	@ (800aa60 <USBH_UserProcess+0x6c>)
 800aa26:	2203      	movs	r2, #3
 800aa28:	701a      	strb	r2, [r3, #0]
  f_mount(&fs, USBHPath, 0);
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	490d      	ldr	r1, [pc, #52]	@ (800aa64 <USBH_UserProcess+0x70>)
 800aa2e:	480e      	ldr	r0, [pc, #56]	@ (800aa68 <USBH_UserProcess+0x74>)
 800aa30:	f7ff fe00 	bl	800a634 <f_mount>
  break;
 800aa34:	e010      	b.n	800aa58 <USBH_UserProcess+0x64>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800aa36:	4b0a      	ldr	r3, [pc, #40]	@ (800aa60 <USBH_UserProcess+0x6c>)
 800aa38:	2202      	movs	r2, #2
 800aa3a:	701a      	strb	r2, [r3, #0]
  f_mount(&fs, USBHPath, 1);
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	4909      	ldr	r1, [pc, #36]	@ (800aa64 <USBH_UserProcess+0x70>)
 800aa40:	4809      	ldr	r0, [pc, #36]	@ (800aa68 <USBH_UserProcess+0x74>)
 800aa42:	f7ff fdf7 	bl	800a634 <f_mount>
  f_mkdir("0:/Video");
 800aa46:	4809      	ldr	r0, [pc, #36]	@ (800aa6c <USBH_UserProcess+0x78>)
 800aa48:	f7ff fe3a 	bl	800a6c0 <f_mkdir>
  break;
 800aa4c:	e004      	b.n	800aa58 <USBH_UserProcess+0x64>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800aa4e:	4b04      	ldr	r3, [pc, #16]	@ (800aa60 <USBH_UserProcess+0x6c>)
 800aa50:	2201      	movs	r2, #1
 800aa52:	701a      	strb	r2, [r3, #0]
  break;
 800aa54:	e000      	b.n	800aa58 <USBH_UserProcess+0x64>

  default:
  break;
 800aa56:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800aa58:	bf00      	nop
 800aa5a:	3708      	adds	r7, #8
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}
 800aa60:	200015a8 	.word	0x200015a8
 800aa64:	20001198 	.word	0x20001198
 800aa68:	20000154 	.word	0x20000154
 800aa6c:	0800ba4c 	.word	0x0800ba4c

0800aa70 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b086      	sub	sp, #24
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  GPIO_Handle_t GPIO_InitStruct = {0};
 800aa78:	f107 0308 	add.w	r3, r7, #8
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	601a      	str	r2, [r3, #0]
 800aa80:	605a      	str	r2, [r3, #4]
 800aa82:	609a      	str	r2, [r3, #8]
 800aa84:	60da      	str	r2, [r3, #12]
  if(hcdHandle->Instance==USB_OTG_FS)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aa8e:	d136      	bne.n	800aafe <HAL_HCD_MspInit+0x8e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    RCC->AHB1ENR.bit.gpioaen = SET;
 800aa90:	4a1d      	ldr	r2, [pc, #116]	@ (800ab08 <HAL_HCD_MspInit+0x98>)
 800aa92:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800aa94:	f043 0301 	orr.w	r3, r3, #1
 800aa98:	6313      	str	r3, [r2, #48]	@ 0x30
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.pGPIOx = GPIOA;
 800aa9a:	4b1c      	ldr	r3, [pc, #112]	@ (800ab0c <HAL_HCD_MspInit+0x9c>)
 800aa9c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.GPIO_Config.PinNumber = 9;
 800aa9e:	2309      	movs	r3, #9
 800aaa0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.GPIO_Config.PinMode = GPIO_MODE_INPUT;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	743b      	strb	r3, [r7, #16]
    GPIO_InitStruct.GPIO_Config.PinPuPdControl = GPIO_PIN_NO_PUPD;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	74bb      	strb	r3, [r7, #18]
    GPIO_Init(&GPIO_InitStruct);
 800aaaa:	f107 0308 	add.w	r3, r7, #8
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7fa facc 	bl	800504c <GPIO_Init>

    GPIO_InitStruct.GPIO_Config.PinNumber = 11;
 800aab4:	230b      	movs	r3, #11
 800aab6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.GPIO_Config.PinMode = GPIO_MODE_AF;
 800aab8:	2302      	movs	r3, #2
 800aaba:	743b      	strb	r3, [r7, #16]
	GPIO_InitStruct.GPIO_Config.PinOPType = GPIO_OUTPUT_PP;
 800aabc:	2300      	movs	r3, #0
 800aabe:	74fb      	strb	r3, [r7, #19]
	GPIO_InitStruct.GPIO_Config.PinPuPdControl = GPIO_PIN_NO_PUPD;
 800aac0:	2300      	movs	r3, #0
 800aac2:	74bb      	strb	r3, [r7, #18]
	GPIO_InitStruct.GPIO_Config.PinSpeed = 3;
 800aac4:	2303      	movs	r3, #3
 800aac6:	747b      	strb	r3, [r7, #17]
	GPIO_InitStruct.GPIO_Config.PinAltFuncMode = 10;
 800aac8:	230a      	movs	r3, #10
 800aaca:	753b      	strb	r3, [r7, #20]
    GPIO_Init(&GPIO_InitStruct);
 800aacc:	f107 0308 	add.w	r3, r7, #8
 800aad0:	4618      	mov	r0, r3
 800aad2:	f7fa fabb 	bl	800504c <GPIO_Init>

    GPIO_InitStruct.GPIO_Config.PinNumber = 12;
 800aad6:	230c      	movs	r3, #12
 800aad8:	60fb      	str	r3, [r7, #12]
    GPIO_Init(&GPIO_InitStruct);
 800aada:	f107 0308 	add.w	r3, r7, #8
 800aade:	4618      	mov	r0, r3
 800aae0:	f7fa fab4 	bl	800504c <GPIO_Init>
    /* Peripheral clock enable */
    RCC->AHB2ENR.bit.otgfsen = SET;
 800aae4:	4a08      	ldr	r2, [pc, #32]	@ (800ab08 <HAL_HCD_MspInit+0x98>)
 800aae6:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800aae8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aaec:	6353      	str	r3, [r2, #52]	@ 0x34

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800aaee:	2200      	movs	r2, #0
 800aaf0:	2100      	movs	r1, #0
 800aaf2:	2043      	movs	r0, #67	@ 0x43
 800aaf4:	f7f6 fa1f 	bl	8000f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800aaf8:	2043      	movs	r0, #67	@ 0x43
 800aafa:	f7f6 fa38 	bl	8000f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800aafe:	bf00      	nop
 800ab00:	3718      	adds	r7, #24
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	bf00      	nop
 800ab08:	40023800 	.word	0x40023800
 800ab0c:	40020000 	.word	0x40020000

0800ab10 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7fd f985 	bl	8007e2e <USBH_LL_IncTimer>
}
 800ab24:	bf00      	nop
 800ab26:	3708      	adds	r7, #8
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b082      	sub	sp, #8
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f7fd f9bd 	bl	8007eba <USBH_LL_Connect>
}
 800ab40:	bf00      	nop
 800ab42:	3708      	adds	r7, #8
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7fd f9c6 	bl	8007ee8 <USBH_LL_Disconnect>
}
 800ab5c:	bf00      	nop
 800ab5e:	3708      	adds	r7, #8
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b083      	sub	sp, #12
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	70fb      	strb	r3, [r7, #3]
 800ab70:	4613      	mov	r3, r2
 800ab72:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ab74:	bf00      	nop
 800ab76:	370c      	adds	r7, #12
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr

0800ab80 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b082      	sub	sp, #8
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f7fd f977 	bl	8007e82 <USBH_LL_PortEnabled>
}
 800ab94:	bf00      	nop
 800ab96:	3708      	adds	r7, #8
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b082      	sub	sp, #8
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800abaa:	4618      	mov	r0, r3
 800abac:	f7fd f977 	bl	8007e9e <USBH_LL_PortDisabled>
}
 800abb0:	bf00      	nop
 800abb2:	3708      	adds	r7, #8
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d12a      	bne.n	800ac20 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800abca:	4a18      	ldr	r2, [pc, #96]	@ (800ac2c <USBH_LL_Init+0x74>)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4a15      	ldr	r2, [pc, #84]	@ (800ac2c <USBH_LL_Init+0x74>)
 800abd6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800abda:	4b14      	ldr	r3, [pc, #80]	@ (800ac2c <USBH_LL_Init+0x74>)
 800abdc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800abe0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800abe2:	4b12      	ldr	r3, [pc, #72]	@ (800ac2c <USBH_LL_Init+0x74>)
 800abe4:	2208      	movs	r2, #8
 800abe6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800abe8:	4b10      	ldr	r3, [pc, #64]	@ (800ac2c <USBH_LL_Init+0x74>)
 800abea:	2201      	movs	r2, #1
 800abec:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800abee:	4b0f      	ldr	r3, [pc, #60]	@ (800ac2c <USBH_LL_Init+0x74>)
 800abf0:	2200      	movs	r2, #0
 800abf2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800abf4:	4b0d      	ldr	r3, [pc, #52]	@ (800ac2c <USBH_LL_Init+0x74>)
 800abf6:	2202      	movs	r2, #2
 800abf8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800abfa:	4b0c      	ldr	r3, [pc, #48]	@ (800ac2c <USBH_LL_Init+0x74>)
 800abfc:	2200      	movs	r2, #0
 800abfe:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ac00:	480a      	ldr	r0, [pc, #40]	@ (800ac2c <USBH_LL_Init+0x74>)
 800ac02:	f7f6 fe05 	bl	8001810 <HAL_HCD_Init>
 800ac06:	4603      	mov	r3, r0
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d001      	beq.n	800ac10 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ac0c:	f7f5 fda2 	bl	8000754 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ac10:	4806      	ldr	r0, [pc, #24]	@ (800ac2c <USBH_LL_Init+0x74>)
 800ac12:	f7f7 fa7b 	bl	800210c <HAL_HCD_GetCurrentFrame>
 800ac16:	4603      	mov	r3, r0
 800ac18:	4619      	mov	r1, r3
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f7fd f8f8 	bl	8007e10 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ac20:	2300      	movs	r3, #0
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3708      	adds	r7, #8
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop
 800ac2c:	200015ac 	.word	0x200015ac

0800ac30 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b084      	sub	sp, #16
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7f7 f9e8 	bl	800201c <HAL_HCD_Start>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ac50:	7bfb      	ldrb	r3, [r7, #15]
 800ac52:	4618      	mov	r0, r3
 800ac54:	f000 f992 	bl	800af7c <USBH_Get_USB_Status>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3710      	adds	r7, #16
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}

0800ac66 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ac66:	b580      	push	{r7, lr}
 800ac68:	b084      	sub	sp, #16
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac72:	2300      	movs	r3, #0
 800ac74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f7f7 f9f0 	bl	8002062 <HAL_HCD_Stop>
 800ac82:	4603      	mov	r3, r0
 800ac84:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ac86:	7bfb      	ldrb	r3, [r7, #15]
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f000 f977 	bl	800af7c <USBH_Get_USB_Status>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac92:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3710      	adds	r7, #16
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800aca4:	2301      	movs	r3, #1
 800aca6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800acae:	4618      	mov	r0, r3
 800acb0:	f7f7 fa3a 	bl	8002128 <HAL_HCD_GetCurrentSpeed>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b02      	cmp	r3, #2
 800acb8:	d00c      	beq.n	800acd4 <USBH_LL_GetSpeed+0x38>
 800acba:	2b02      	cmp	r3, #2
 800acbc:	d80d      	bhi.n	800acda <USBH_LL_GetSpeed+0x3e>
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d002      	beq.n	800acc8 <USBH_LL_GetSpeed+0x2c>
 800acc2:	2b01      	cmp	r3, #1
 800acc4:	d003      	beq.n	800acce <USBH_LL_GetSpeed+0x32>
 800acc6:	e008      	b.n	800acda <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800acc8:	2300      	movs	r3, #0
 800acca:	73fb      	strb	r3, [r7, #15]
    break;
 800accc:	e008      	b.n	800ace0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800acce:	2301      	movs	r3, #1
 800acd0:	73fb      	strb	r3, [r7, #15]
    break;
 800acd2:	e005      	b.n	800ace0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800acd4:	2302      	movs	r3, #2
 800acd6:	73fb      	strb	r3, [r7, #15]
    break;
 800acd8:	e002      	b.n	800ace0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800acda:	2301      	movs	r3, #1
 800acdc:	73fb      	strb	r3, [r7, #15]
    break;
 800acde:	bf00      	nop
  }
  return  speed;
 800ace0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3710      	adds	r7, #16
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}

0800acea <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800acea:	b580      	push	{r7, lr}
 800acec:	b084      	sub	sp, #16
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acf2:	2300      	movs	r3, #0
 800acf4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800acf6:	2300      	movs	r3, #0
 800acf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7f7 f9cb 	bl	800209c <HAL_HCD_ResetPort>
 800ad06:	4603      	mov	r3, r0
 800ad08:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ad0a:	7bfb      	ldrb	r3, [r7, #15]
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f000 f935 	bl	800af7c <USBH_Get_USB_Status>
 800ad12:	4603      	mov	r3, r0
 800ad14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad16:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3710      	adds	r7, #16
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	460b      	mov	r3, r1
 800ad2a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ad32:	78fa      	ldrb	r2, [r7, #3]
 800ad34:	4611      	mov	r1, r2
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7f7 f9d3 	bl	80020e2 <HAL_HCD_HC_GetXferCount>
 800ad3c:	4603      	mov	r3, r0
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3708      	adds	r7, #8
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}

0800ad46 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ad46:	b590      	push	{r4, r7, lr}
 800ad48:	b089      	sub	sp, #36	@ 0x24
 800ad4a:	af04      	add	r7, sp, #16
 800ad4c:	6078      	str	r0, [r7, #4]
 800ad4e:	4608      	mov	r0, r1
 800ad50:	4611      	mov	r1, r2
 800ad52:	461a      	mov	r2, r3
 800ad54:	4603      	mov	r3, r0
 800ad56:	70fb      	strb	r3, [r7, #3]
 800ad58:	460b      	mov	r3, r1
 800ad5a:	70bb      	strb	r3, [r7, #2]
 800ad5c:	4613      	mov	r3, r2
 800ad5e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad60:	2300      	movs	r3, #0
 800ad62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad64:	2300      	movs	r3, #0
 800ad66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800ad6e:	787c      	ldrb	r4, [r7, #1]
 800ad70:	78ba      	ldrb	r2, [r7, #2]
 800ad72:	78f9      	ldrb	r1, [r7, #3]
 800ad74:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ad76:	9302      	str	r3, [sp, #8]
 800ad78:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ad7c:	9301      	str	r3, [sp, #4]
 800ad7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ad82:	9300      	str	r3, [sp, #0]
 800ad84:	4623      	mov	r3, r4
 800ad86:	f7f6 fdbf 	bl	8001908 <HAL_HCD_HC_Init>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ad8e:	7bfb      	ldrb	r3, [r7, #15]
 800ad90:	4618      	mov	r0, r3
 800ad92:	f000 f8f3 	bl	800af7c <USBH_Get_USB_Status>
 800ad96:	4603      	mov	r3, r0
 800ad98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3714      	adds	r7, #20
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd90      	pop	{r4, r7, pc}

0800ada4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b084      	sub	sp, #16
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	460b      	mov	r3, r1
 800adae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adb0:	2300      	movs	r3, #0
 800adb2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800adb4:	2300      	movs	r3, #0
 800adb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800adbe:	78fa      	ldrb	r2, [r7, #3]
 800adc0:	4611      	mov	r1, r2
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7f6 fe58 	bl	8001a78 <HAL_HCD_HC_Halt>
 800adc8:	4603      	mov	r3, r0
 800adca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800adcc:	7bfb      	ldrb	r3, [r7, #15]
 800adce:	4618      	mov	r0, r3
 800add0:	f000 f8d4 	bl	800af7c <USBH_Get_USB_Status>
 800add4:	4603      	mov	r3, r0
 800add6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800add8:	7bbb      	ldrb	r3, [r7, #14]
}
 800adda:	4618      	mov	r0, r3
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ade2:	b590      	push	{r4, r7, lr}
 800ade4:	b089      	sub	sp, #36	@ 0x24
 800ade6:	af04      	add	r7, sp, #16
 800ade8:	6078      	str	r0, [r7, #4]
 800adea:	4608      	mov	r0, r1
 800adec:	4611      	mov	r1, r2
 800adee:	461a      	mov	r2, r3
 800adf0:	4603      	mov	r3, r0
 800adf2:	70fb      	strb	r3, [r7, #3]
 800adf4:	460b      	mov	r3, r1
 800adf6:	70bb      	strb	r3, [r7, #2]
 800adf8:	4613      	mov	r3, r2
 800adfa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adfc:	2300      	movs	r3, #0
 800adfe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae00:	2300      	movs	r3, #0
 800ae02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800ae0a:	787c      	ldrb	r4, [r7, #1]
 800ae0c:	78ba      	ldrb	r2, [r7, #2]
 800ae0e:	78f9      	ldrb	r1, [r7, #3]
 800ae10:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ae14:	9303      	str	r3, [sp, #12]
 800ae16:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ae18:	9302      	str	r3, [sp, #8]
 800ae1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae1c:	9301      	str	r3, [sp, #4]
 800ae1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ae22:	9300      	str	r3, [sp, #0]
 800ae24:	4623      	mov	r3, r4
 800ae26:	f7f6 fe4b 	bl	8001ac0 <HAL_HCD_HC_SubmitRequest>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ae2e:	7bfb      	ldrb	r3, [r7, #15]
 800ae30:	4618      	mov	r0, r3
 800ae32:	f000 f8a3 	bl	800af7c <USBH_Get_USB_Status>
 800ae36:	4603      	mov	r3, r0
 800ae38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3714      	adds	r7, #20
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd90      	pop	{r4, r7, pc}

0800ae44 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	460b      	mov	r3, r1
 800ae4e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ae56:	78fa      	ldrb	r2, [r7, #3]
 800ae58:	4611      	mov	r1, r2
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7f7 f92c 	bl	80020b8 <HAL_HCD_HC_GetURBState>
 800ae60:	4603      	mov	r3, r0
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3708      	adds	r7, #8
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}

0800ae6a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ae6a:	b580      	push	{r7, lr}
 800ae6c:	b082      	sub	sp, #8
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
 800ae72:	460b      	mov	r3, r1
 800ae74:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d103      	bne.n	800ae88 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ae80:	78fb      	ldrb	r3, [r7, #3]
 800ae82:	4618      	mov	r0, r3
 800ae84:	f000 f8a6 	bl	800afd4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ae88:	20c8      	movs	r0, #200	@ 0xc8
 800ae8a:	f7f5 ff55 	bl	8000d38 <HAL_Delay>
  return USBH_OK;
 800ae8e:	2300      	movs	r3, #0
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3708      	adds	r7, #8
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b085      	sub	sp, #20
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	460b      	mov	r3, r1
 800aea2:	70fb      	strb	r3, [r7, #3]
 800aea4:	4613      	mov	r3, r2
 800aea6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aeae:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800aeb0:	78fa      	ldrb	r2, [r7, #3]
 800aeb2:	68f9      	ldr	r1, [r7, #12]
 800aeb4:	4613      	mov	r3, r2
 800aeb6:	011b      	lsls	r3, r3, #4
 800aeb8:	1a9b      	subs	r3, r3, r2
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	440b      	add	r3, r1
 800aebe:	3317      	adds	r3, #23
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d00a      	beq.n	800aedc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800aec6:	78fa      	ldrb	r2, [r7, #3]
 800aec8:	68f9      	ldr	r1, [r7, #12]
 800aeca:	4613      	mov	r3, r2
 800aecc:	011b      	lsls	r3, r3, #4
 800aece:	1a9b      	subs	r3, r3, r2
 800aed0:	009b      	lsls	r3, r3, #2
 800aed2:	440b      	add	r3, r1
 800aed4:	333c      	adds	r3, #60	@ 0x3c
 800aed6:	78ba      	ldrb	r2, [r7, #2]
 800aed8:	701a      	strb	r2, [r3, #0]
 800aeda:	e009      	b.n	800aef0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800aedc:	78fa      	ldrb	r2, [r7, #3]
 800aede:	68f9      	ldr	r1, [r7, #12]
 800aee0:	4613      	mov	r3, r2
 800aee2:	011b      	lsls	r3, r3, #4
 800aee4:	1a9b      	subs	r3, r3, r2
 800aee6:	009b      	lsls	r3, r3, #2
 800aee8:	440b      	add	r3, r1
 800aeea:	333d      	adds	r3, #61	@ 0x3d
 800aeec:	78ba      	ldrb	r2, [r7, #2]
 800aeee:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800aef0:	2300      	movs	r3, #0
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3714      	adds	r7, #20
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr

0800aefe <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aefe:	b480      	push	{r7}
 800af00:	b085      	sub	sp, #20
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
 800af06:	460b      	mov	r3, r1
 800af08:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800af0a:	2300      	movs	r3, #0
 800af0c:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800af14:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800af16:	78fa      	ldrb	r2, [r7, #3]
 800af18:	68b9      	ldr	r1, [r7, #8]
 800af1a:	4613      	mov	r3, r2
 800af1c:	011b      	lsls	r3, r3, #4
 800af1e:	1a9b      	subs	r3, r3, r2
 800af20:	009b      	lsls	r3, r3, #2
 800af22:	440b      	add	r3, r1
 800af24:	3317      	adds	r3, #23
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d00a      	beq.n	800af42 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800af2c:	78fa      	ldrb	r2, [r7, #3]
 800af2e:	68b9      	ldr	r1, [r7, #8]
 800af30:	4613      	mov	r3, r2
 800af32:	011b      	lsls	r3, r3, #4
 800af34:	1a9b      	subs	r3, r3, r2
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	440b      	add	r3, r1
 800af3a:	333c      	adds	r3, #60	@ 0x3c
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	73fb      	strb	r3, [r7, #15]
 800af40:	e009      	b.n	800af56 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800af42:	78fa      	ldrb	r2, [r7, #3]
 800af44:	68b9      	ldr	r1, [r7, #8]
 800af46:	4613      	mov	r3, r2
 800af48:	011b      	lsls	r3, r3, #4
 800af4a:	1a9b      	subs	r3, r3, r2
 800af4c:	009b      	lsls	r3, r3, #2
 800af4e:	440b      	add	r3, r1
 800af50:	333d      	adds	r3, #61	@ 0x3d
 800af52:	781b      	ldrb	r3, [r3, #0]
 800af54:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800af56:	7bfb      	ldrb	r3, [r7, #15]
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3714      	adds	r7, #20
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr

0800af64 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f7f5 fee3 	bl	8000d38 <HAL_Delay>
}
 800af72:	bf00      	nop
 800af74:	3708      	adds	r7, #8
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
	...

0800af7c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b085      	sub	sp, #20
 800af80:	af00      	add	r7, sp, #0
 800af82:	4603      	mov	r3, r0
 800af84:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af86:	2300      	movs	r3, #0
 800af88:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800af8a:	79fb      	ldrb	r3, [r7, #7]
 800af8c:	2b03      	cmp	r3, #3
 800af8e:	d817      	bhi.n	800afc0 <USBH_Get_USB_Status+0x44>
 800af90:	a201      	add	r2, pc, #4	@ (adr r2, 800af98 <USBH_Get_USB_Status+0x1c>)
 800af92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af96:	bf00      	nop
 800af98:	0800afa9 	.word	0x0800afa9
 800af9c:	0800afaf 	.word	0x0800afaf
 800afa0:	0800afb5 	.word	0x0800afb5
 800afa4:	0800afbb 	.word	0x0800afbb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800afa8:	2300      	movs	r3, #0
 800afaa:	73fb      	strb	r3, [r7, #15]
    break;
 800afac:	e00b      	b.n	800afc6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800afae:	2302      	movs	r3, #2
 800afb0:	73fb      	strb	r3, [r7, #15]
    break;
 800afb2:	e008      	b.n	800afc6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800afb4:	2301      	movs	r3, #1
 800afb6:	73fb      	strb	r3, [r7, #15]
    break;
 800afb8:	e005      	b.n	800afc6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800afba:	2302      	movs	r3, #2
 800afbc:	73fb      	strb	r3, [r7, #15]
    break;
 800afbe:	e002      	b.n	800afc6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800afc0:	2302      	movs	r3, #2
 800afc2:	73fb      	strb	r3, [r7, #15]
    break;
 800afc4:	bf00      	nop
  }
  return usb_status;
 800afc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3714      	adds	r7, #20
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b084      	sub	sp, #16
 800afd8:	af00      	add	r7, sp, #0
 800afda:	4603      	mov	r3, r0
 800afdc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800afde:	79fb      	ldrb	r3, [r7, #7]
 800afe0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800afe2:	79fb      	ldrb	r3, [r7, #7]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d102      	bne.n	800afee <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = RESET;
 800afe8:	2300      	movs	r3, #0
 800afea:	73fb      	strb	r3, [r7, #15]
 800afec:	e001      	b.n	800aff2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = SET;
 800afee:	2301      	movs	r3, #1
 800aff0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  GPIO_WritePin(GPIOC,GPIO_PIN_0,(FlagStatus)data);
 800aff2:	7bfb      	ldrb	r3, [r7, #15]
 800aff4:	461a      	mov	r2, r3
 800aff6:	2100      	movs	r1, #0
 800aff8:	4803      	ldr	r0, [pc, #12]	@ (800b008 <MX_DriverVbusFS+0x34>)
 800affa:	f7fa fa4f 	bl	800549c <GPIO_WritePin>
}
 800affe:	bf00      	nop
 800b000:	3710      	adds	r7, #16
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop
 800b008:	40020800 	.word	0x40020800

0800b00c <malloc>:
 800b00c:	4b02      	ldr	r3, [pc, #8]	@ (800b018 <malloc+0xc>)
 800b00e:	4601      	mov	r1, r0
 800b010:	6818      	ldr	r0, [r3, #0]
 800b012:	f000 b82d 	b.w	800b070 <_malloc_r>
 800b016:	bf00      	nop
 800b018:	20000048 	.word	0x20000048

0800b01c <free>:
 800b01c:	4b02      	ldr	r3, [pc, #8]	@ (800b028 <free+0xc>)
 800b01e:	4601      	mov	r1, r0
 800b020:	6818      	ldr	r0, [r3, #0]
 800b022:	f000 bb43 	b.w	800b6ac <_free_r>
 800b026:	bf00      	nop
 800b028:	20000048 	.word	0x20000048

0800b02c <sbrk_aligned>:
 800b02c:	b570      	push	{r4, r5, r6, lr}
 800b02e:	4e0f      	ldr	r6, [pc, #60]	@ (800b06c <sbrk_aligned+0x40>)
 800b030:	460c      	mov	r4, r1
 800b032:	6831      	ldr	r1, [r6, #0]
 800b034:	4605      	mov	r5, r0
 800b036:	b911      	cbnz	r1, 800b03e <sbrk_aligned+0x12>
 800b038:	f000 fada 	bl	800b5f0 <_sbrk_r>
 800b03c:	6030      	str	r0, [r6, #0]
 800b03e:	4621      	mov	r1, r4
 800b040:	4628      	mov	r0, r5
 800b042:	f000 fad5 	bl	800b5f0 <_sbrk_r>
 800b046:	1c43      	adds	r3, r0, #1
 800b048:	d103      	bne.n	800b052 <sbrk_aligned+0x26>
 800b04a:	f04f 34ff 	mov.w	r4, #4294967295
 800b04e:	4620      	mov	r0, r4
 800b050:	bd70      	pop	{r4, r5, r6, pc}
 800b052:	1cc4      	adds	r4, r0, #3
 800b054:	f024 0403 	bic.w	r4, r4, #3
 800b058:	42a0      	cmp	r0, r4
 800b05a:	d0f8      	beq.n	800b04e <sbrk_aligned+0x22>
 800b05c:	1a21      	subs	r1, r4, r0
 800b05e:	4628      	mov	r0, r5
 800b060:	f000 fac6 	bl	800b5f0 <_sbrk_r>
 800b064:	3001      	adds	r0, #1
 800b066:	d1f2      	bne.n	800b04e <sbrk_aligned+0x22>
 800b068:	e7ef      	b.n	800b04a <sbrk_aligned+0x1e>
 800b06a:	bf00      	nop
 800b06c:	2000198c 	.word	0x2000198c

0800b070 <_malloc_r>:
 800b070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b074:	1ccd      	adds	r5, r1, #3
 800b076:	f025 0503 	bic.w	r5, r5, #3
 800b07a:	3508      	adds	r5, #8
 800b07c:	2d0c      	cmp	r5, #12
 800b07e:	bf38      	it	cc
 800b080:	250c      	movcc	r5, #12
 800b082:	2d00      	cmp	r5, #0
 800b084:	4606      	mov	r6, r0
 800b086:	db01      	blt.n	800b08c <_malloc_r+0x1c>
 800b088:	42a9      	cmp	r1, r5
 800b08a:	d904      	bls.n	800b096 <_malloc_r+0x26>
 800b08c:	230c      	movs	r3, #12
 800b08e:	6033      	str	r3, [r6, #0]
 800b090:	2000      	movs	r0, #0
 800b092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b096:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b16c <_malloc_r+0xfc>
 800b09a:	f000 f869 	bl	800b170 <__malloc_lock>
 800b09e:	f8d8 3000 	ldr.w	r3, [r8]
 800b0a2:	461c      	mov	r4, r3
 800b0a4:	bb44      	cbnz	r4, 800b0f8 <_malloc_r+0x88>
 800b0a6:	4629      	mov	r1, r5
 800b0a8:	4630      	mov	r0, r6
 800b0aa:	f7ff ffbf 	bl	800b02c <sbrk_aligned>
 800b0ae:	1c43      	adds	r3, r0, #1
 800b0b0:	4604      	mov	r4, r0
 800b0b2:	d158      	bne.n	800b166 <_malloc_r+0xf6>
 800b0b4:	f8d8 4000 	ldr.w	r4, [r8]
 800b0b8:	4627      	mov	r7, r4
 800b0ba:	2f00      	cmp	r7, #0
 800b0bc:	d143      	bne.n	800b146 <_malloc_r+0xd6>
 800b0be:	2c00      	cmp	r4, #0
 800b0c0:	d04b      	beq.n	800b15a <_malloc_r+0xea>
 800b0c2:	6823      	ldr	r3, [r4, #0]
 800b0c4:	4639      	mov	r1, r7
 800b0c6:	4630      	mov	r0, r6
 800b0c8:	eb04 0903 	add.w	r9, r4, r3
 800b0cc:	f000 fa90 	bl	800b5f0 <_sbrk_r>
 800b0d0:	4581      	cmp	r9, r0
 800b0d2:	d142      	bne.n	800b15a <_malloc_r+0xea>
 800b0d4:	6821      	ldr	r1, [r4, #0]
 800b0d6:	1a6d      	subs	r5, r5, r1
 800b0d8:	4629      	mov	r1, r5
 800b0da:	4630      	mov	r0, r6
 800b0dc:	f7ff ffa6 	bl	800b02c <sbrk_aligned>
 800b0e0:	3001      	adds	r0, #1
 800b0e2:	d03a      	beq.n	800b15a <_malloc_r+0xea>
 800b0e4:	6823      	ldr	r3, [r4, #0]
 800b0e6:	442b      	add	r3, r5
 800b0e8:	6023      	str	r3, [r4, #0]
 800b0ea:	f8d8 3000 	ldr.w	r3, [r8]
 800b0ee:	685a      	ldr	r2, [r3, #4]
 800b0f0:	bb62      	cbnz	r2, 800b14c <_malloc_r+0xdc>
 800b0f2:	f8c8 7000 	str.w	r7, [r8]
 800b0f6:	e00f      	b.n	800b118 <_malloc_r+0xa8>
 800b0f8:	6822      	ldr	r2, [r4, #0]
 800b0fa:	1b52      	subs	r2, r2, r5
 800b0fc:	d420      	bmi.n	800b140 <_malloc_r+0xd0>
 800b0fe:	2a0b      	cmp	r2, #11
 800b100:	d917      	bls.n	800b132 <_malloc_r+0xc2>
 800b102:	1961      	adds	r1, r4, r5
 800b104:	42a3      	cmp	r3, r4
 800b106:	6025      	str	r5, [r4, #0]
 800b108:	bf18      	it	ne
 800b10a:	6059      	strne	r1, [r3, #4]
 800b10c:	6863      	ldr	r3, [r4, #4]
 800b10e:	bf08      	it	eq
 800b110:	f8c8 1000 	streq.w	r1, [r8]
 800b114:	5162      	str	r2, [r4, r5]
 800b116:	604b      	str	r3, [r1, #4]
 800b118:	4630      	mov	r0, r6
 800b11a:	f000 f82f 	bl	800b17c <__malloc_unlock>
 800b11e:	f104 000b 	add.w	r0, r4, #11
 800b122:	1d23      	adds	r3, r4, #4
 800b124:	f020 0007 	bic.w	r0, r0, #7
 800b128:	1ac2      	subs	r2, r0, r3
 800b12a:	bf1c      	itt	ne
 800b12c:	1a1b      	subne	r3, r3, r0
 800b12e:	50a3      	strne	r3, [r4, r2]
 800b130:	e7af      	b.n	800b092 <_malloc_r+0x22>
 800b132:	6862      	ldr	r2, [r4, #4]
 800b134:	42a3      	cmp	r3, r4
 800b136:	bf0c      	ite	eq
 800b138:	f8c8 2000 	streq.w	r2, [r8]
 800b13c:	605a      	strne	r2, [r3, #4]
 800b13e:	e7eb      	b.n	800b118 <_malloc_r+0xa8>
 800b140:	4623      	mov	r3, r4
 800b142:	6864      	ldr	r4, [r4, #4]
 800b144:	e7ae      	b.n	800b0a4 <_malloc_r+0x34>
 800b146:	463c      	mov	r4, r7
 800b148:	687f      	ldr	r7, [r7, #4]
 800b14a:	e7b6      	b.n	800b0ba <_malloc_r+0x4a>
 800b14c:	461a      	mov	r2, r3
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	42a3      	cmp	r3, r4
 800b152:	d1fb      	bne.n	800b14c <_malloc_r+0xdc>
 800b154:	2300      	movs	r3, #0
 800b156:	6053      	str	r3, [r2, #4]
 800b158:	e7de      	b.n	800b118 <_malloc_r+0xa8>
 800b15a:	230c      	movs	r3, #12
 800b15c:	6033      	str	r3, [r6, #0]
 800b15e:	4630      	mov	r0, r6
 800b160:	f000 f80c 	bl	800b17c <__malloc_unlock>
 800b164:	e794      	b.n	800b090 <_malloc_r+0x20>
 800b166:	6005      	str	r5, [r0, #0]
 800b168:	e7d6      	b.n	800b118 <_malloc_r+0xa8>
 800b16a:	bf00      	nop
 800b16c:	20001990 	.word	0x20001990

0800b170 <__malloc_lock>:
 800b170:	4801      	ldr	r0, [pc, #4]	@ (800b178 <__malloc_lock+0x8>)
 800b172:	f000 ba8a 	b.w	800b68a <__retarget_lock_acquire_recursive>
 800b176:	bf00      	nop
 800b178:	20001ad4 	.word	0x20001ad4

0800b17c <__malloc_unlock>:
 800b17c:	4801      	ldr	r0, [pc, #4]	@ (800b184 <__malloc_unlock+0x8>)
 800b17e:	f000 ba85 	b.w	800b68c <__retarget_lock_release_recursive>
 800b182:	bf00      	nop
 800b184:	20001ad4 	.word	0x20001ad4

0800b188 <std>:
 800b188:	2300      	movs	r3, #0
 800b18a:	b510      	push	{r4, lr}
 800b18c:	4604      	mov	r4, r0
 800b18e:	e9c0 3300 	strd	r3, r3, [r0]
 800b192:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b196:	6083      	str	r3, [r0, #8]
 800b198:	8181      	strh	r1, [r0, #12]
 800b19a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b19c:	81c2      	strh	r2, [r0, #14]
 800b19e:	6183      	str	r3, [r0, #24]
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	2208      	movs	r2, #8
 800b1a4:	305c      	adds	r0, #92	@ 0x5c
 800b1a6:	f000 f9e7 	bl	800b578 <memset>
 800b1aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b1e0 <std+0x58>)
 800b1ac:	6263      	str	r3, [r4, #36]	@ 0x24
 800b1ae:	4b0d      	ldr	r3, [pc, #52]	@ (800b1e4 <std+0x5c>)
 800b1b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b1b2:	4b0d      	ldr	r3, [pc, #52]	@ (800b1e8 <std+0x60>)
 800b1b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b1b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b1ec <std+0x64>)
 800b1b8:	6323      	str	r3, [r4, #48]	@ 0x30
 800b1ba:	4b0d      	ldr	r3, [pc, #52]	@ (800b1f0 <std+0x68>)
 800b1bc:	6224      	str	r4, [r4, #32]
 800b1be:	429c      	cmp	r4, r3
 800b1c0:	d006      	beq.n	800b1d0 <std+0x48>
 800b1c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b1c6:	4294      	cmp	r4, r2
 800b1c8:	d002      	beq.n	800b1d0 <std+0x48>
 800b1ca:	33d0      	adds	r3, #208	@ 0xd0
 800b1cc:	429c      	cmp	r4, r3
 800b1ce:	d105      	bne.n	800b1dc <std+0x54>
 800b1d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b1d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1d8:	f000 ba56 	b.w	800b688 <__retarget_lock_init_recursive>
 800b1dc:	bd10      	pop	{r4, pc}
 800b1de:	bf00      	nop
 800b1e0:	0800b3c9 	.word	0x0800b3c9
 800b1e4:	0800b3eb 	.word	0x0800b3eb
 800b1e8:	0800b423 	.word	0x0800b423
 800b1ec:	0800b447 	.word	0x0800b447
 800b1f0:	20001994 	.word	0x20001994

0800b1f4 <stdio_exit_handler>:
 800b1f4:	4a02      	ldr	r2, [pc, #8]	@ (800b200 <stdio_exit_handler+0xc>)
 800b1f6:	4903      	ldr	r1, [pc, #12]	@ (800b204 <stdio_exit_handler+0x10>)
 800b1f8:	4803      	ldr	r0, [pc, #12]	@ (800b208 <stdio_exit_handler+0x14>)
 800b1fa:	f000 b869 	b.w	800b2d0 <_fwalk_sglue>
 800b1fe:	bf00      	nop
 800b200:	2000003c 	.word	0x2000003c
 800b204:	0800b849 	.word	0x0800b849
 800b208:	2000004c 	.word	0x2000004c

0800b20c <cleanup_stdio>:
 800b20c:	6841      	ldr	r1, [r0, #4]
 800b20e:	4b0c      	ldr	r3, [pc, #48]	@ (800b240 <cleanup_stdio+0x34>)
 800b210:	4299      	cmp	r1, r3
 800b212:	b510      	push	{r4, lr}
 800b214:	4604      	mov	r4, r0
 800b216:	d001      	beq.n	800b21c <cleanup_stdio+0x10>
 800b218:	f000 fb16 	bl	800b848 <_fflush_r>
 800b21c:	68a1      	ldr	r1, [r4, #8]
 800b21e:	4b09      	ldr	r3, [pc, #36]	@ (800b244 <cleanup_stdio+0x38>)
 800b220:	4299      	cmp	r1, r3
 800b222:	d002      	beq.n	800b22a <cleanup_stdio+0x1e>
 800b224:	4620      	mov	r0, r4
 800b226:	f000 fb0f 	bl	800b848 <_fflush_r>
 800b22a:	68e1      	ldr	r1, [r4, #12]
 800b22c:	4b06      	ldr	r3, [pc, #24]	@ (800b248 <cleanup_stdio+0x3c>)
 800b22e:	4299      	cmp	r1, r3
 800b230:	d004      	beq.n	800b23c <cleanup_stdio+0x30>
 800b232:	4620      	mov	r0, r4
 800b234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b238:	f000 bb06 	b.w	800b848 <_fflush_r>
 800b23c:	bd10      	pop	{r4, pc}
 800b23e:	bf00      	nop
 800b240:	20001994 	.word	0x20001994
 800b244:	200019fc 	.word	0x200019fc
 800b248:	20001a64 	.word	0x20001a64

0800b24c <global_stdio_init.part.0>:
 800b24c:	b510      	push	{r4, lr}
 800b24e:	4b0b      	ldr	r3, [pc, #44]	@ (800b27c <global_stdio_init.part.0+0x30>)
 800b250:	4c0b      	ldr	r4, [pc, #44]	@ (800b280 <global_stdio_init.part.0+0x34>)
 800b252:	4a0c      	ldr	r2, [pc, #48]	@ (800b284 <global_stdio_init.part.0+0x38>)
 800b254:	601a      	str	r2, [r3, #0]
 800b256:	4620      	mov	r0, r4
 800b258:	2200      	movs	r2, #0
 800b25a:	2104      	movs	r1, #4
 800b25c:	f7ff ff94 	bl	800b188 <std>
 800b260:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b264:	2201      	movs	r2, #1
 800b266:	2109      	movs	r1, #9
 800b268:	f7ff ff8e 	bl	800b188 <std>
 800b26c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b270:	2202      	movs	r2, #2
 800b272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b276:	2112      	movs	r1, #18
 800b278:	f7ff bf86 	b.w	800b188 <std>
 800b27c:	20001acc 	.word	0x20001acc
 800b280:	20001994 	.word	0x20001994
 800b284:	0800b1f5 	.word	0x0800b1f5

0800b288 <__sfp_lock_acquire>:
 800b288:	4801      	ldr	r0, [pc, #4]	@ (800b290 <__sfp_lock_acquire+0x8>)
 800b28a:	f000 b9fe 	b.w	800b68a <__retarget_lock_acquire_recursive>
 800b28e:	bf00      	nop
 800b290:	20001ad5 	.word	0x20001ad5

0800b294 <__sfp_lock_release>:
 800b294:	4801      	ldr	r0, [pc, #4]	@ (800b29c <__sfp_lock_release+0x8>)
 800b296:	f000 b9f9 	b.w	800b68c <__retarget_lock_release_recursive>
 800b29a:	bf00      	nop
 800b29c:	20001ad5 	.word	0x20001ad5

0800b2a0 <__sinit>:
 800b2a0:	b510      	push	{r4, lr}
 800b2a2:	4604      	mov	r4, r0
 800b2a4:	f7ff fff0 	bl	800b288 <__sfp_lock_acquire>
 800b2a8:	6a23      	ldr	r3, [r4, #32]
 800b2aa:	b11b      	cbz	r3, 800b2b4 <__sinit+0x14>
 800b2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2b0:	f7ff bff0 	b.w	800b294 <__sfp_lock_release>
 800b2b4:	4b04      	ldr	r3, [pc, #16]	@ (800b2c8 <__sinit+0x28>)
 800b2b6:	6223      	str	r3, [r4, #32]
 800b2b8:	4b04      	ldr	r3, [pc, #16]	@ (800b2cc <__sinit+0x2c>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d1f5      	bne.n	800b2ac <__sinit+0xc>
 800b2c0:	f7ff ffc4 	bl	800b24c <global_stdio_init.part.0>
 800b2c4:	e7f2      	b.n	800b2ac <__sinit+0xc>
 800b2c6:	bf00      	nop
 800b2c8:	0800b20d 	.word	0x0800b20d
 800b2cc:	20001acc 	.word	0x20001acc

0800b2d0 <_fwalk_sglue>:
 800b2d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2d4:	4607      	mov	r7, r0
 800b2d6:	4688      	mov	r8, r1
 800b2d8:	4614      	mov	r4, r2
 800b2da:	2600      	movs	r6, #0
 800b2dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b2e0:	f1b9 0901 	subs.w	r9, r9, #1
 800b2e4:	d505      	bpl.n	800b2f2 <_fwalk_sglue+0x22>
 800b2e6:	6824      	ldr	r4, [r4, #0]
 800b2e8:	2c00      	cmp	r4, #0
 800b2ea:	d1f7      	bne.n	800b2dc <_fwalk_sglue+0xc>
 800b2ec:	4630      	mov	r0, r6
 800b2ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2f2:	89ab      	ldrh	r3, [r5, #12]
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	d907      	bls.n	800b308 <_fwalk_sglue+0x38>
 800b2f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	d003      	beq.n	800b308 <_fwalk_sglue+0x38>
 800b300:	4629      	mov	r1, r5
 800b302:	4638      	mov	r0, r7
 800b304:	47c0      	blx	r8
 800b306:	4306      	orrs	r6, r0
 800b308:	3568      	adds	r5, #104	@ 0x68
 800b30a:	e7e9      	b.n	800b2e0 <_fwalk_sglue+0x10>

0800b30c <_puts_r>:
 800b30c:	6a03      	ldr	r3, [r0, #32]
 800b30e:	b570      	push	{r4, r5, r6, lr}
 800b310:	6884      	ldr	r4, [r0, #8]
 800b312:	4605      	mov	r5, r0
 800b314:	460e      	mov	r6, r1
 800b316:	b90b      	cbnz	r3, 800b31c <_puts_r+0x10>
 800b318:	f7ff ffc2 	bl	800b2a0 <__sinit>
 800b31c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b31e:	07db      	lsls	r3, r3, #31
 800b320:	d405      	bmi.n	800b32e <_puts_r+0x22>
 800b322:	89a3      	ldrh	r3, [r4, #12]
 800b324:	0598      	lsls	r0, r3, #22
 800b326:	d402      	bmi.n	800b32e <_puts_r+0x22>
 800b328:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b32a:	f000 f9ae 	bl	800b68a <__retarget_lock_acquire_recursive>
 800b32e:	89a3      	ldrh	r3, [r4, #12]
 800b330:	0719      	lsls	r1, r3, #28
 800b332:	d502      	bpl.n	800b33a <_puts_r+0x2e>
 800b334:	6923      	ldr	r3, [r4, #16]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d135      	bne.n	800b3a6 <_puts_r+0x9a>
 800b33a:	4621      	mov	r1, r4
 800b33c:	4628      	mov	r0, r5
 800b33e:	f000 f8c5 	bl	800b4cc <__swsetup_r>
 800b342:	b380      	cbz	r0, 800b3a6 <_puts_r+0x9a>
 800b344:	f04f 35ff 	mov.w	r5, #4294967295
 800b348:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b34a:	07da      	lsls	r2, r3, #31
 800b34c:	d405      	bmi.n	800b35a <_puts_r+0x4e>
 800b34e:	89a3      	ldrh	r3, [r4, #12]
 800b350:	059b      	lsls	r3, r3, #22
 800b352:	d402      	bmi.n	800b35a <_puts_r+0x4e>
 800b354:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b356:	f000 f999 	bl	800b68c <__retarget_lock_release_recursive>
 800b35a:	4628      	mov	r0, r5
 800b35c:	bd70      	pop	{r4, r5, r6, pc}
 800b35e:	2b00      	cmp	r3, #0
 800b360:	da04      	bge.n	800b36c <_puts_r+0x60>
 800b362:	69a2      	ldr	r2, [r4, #24]
 800b364:	429a      	cmp	r2, r3
 800b366:	dc17      	bgt.n	800b398 <_puts_r+0x8c>
 800b368:	290a      	cmp	r1, #10
 800b36a:	d015      	beq.n	800b398 <_puts_r+0x8c>
 800b36c:	6823      	ldr	r3, [r4, #0]
 800b36e:	1c5a      	adds	r2, r3, #1
 800b370:	6022      	str	r2, [r4, #0]
 800b372:	7019      	strb	r1, [r3, #0]
 800b374:	68a3      	ldr	r3, [r4, #8]
 800b376:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b37a:	3b01      	subs	r3, #1
 800b37c:	60a3      	str	r3, [r4, #8]
 800b37e:	2900      	cmp	r1, #0
 800b380:	d1ed      	bne.n	800b35e <_puts_r+0x52>
 800b382:	2b00      	cmp	r3, #0
 800b384:	da11      	bge.n	800b3aa <_puts_r+0x9e>
 800b386:	4622      	mov	r2, r4
 800b388:	210a      	movs	r1, #10
 800b38a:	4628      	mov	r0, r5
 800b38c:	f000 f85f 	bl	800b44e <__swbuf_r>
 800b390:	3001      	adds	r0, #1
 800b392:	d0d7      	beq.n	800b344 <_puts_r+0x38>
 800b394:	250a      	movs	r5, #10
 800b396:	e7d7      	b.n	800b348 <_puts_r+0x3c>
 800b398:	4622      	mov	r2, r4
 800b39a:	4628      	mov	r0, r5
 800b39c:	f000 f857 	bl	800b44e <__swbuf_r>
 800b3a0:	3001      	adds	r0, #1
 800b3a2:	d1e7      	bne.n	800b374 <_puts_r+0x68>
 800b3a4:	e7ce      	b.n	800b344 <_puts_r+0x38>
 800b3a6:	3e01      	subs	r6, #1
 800b3a8:	e7e4      	b.n	800b374 <_puts_r+0x68>
 800b3aa:	6823      	ldr	r3, [r4, #0]
 800b3ac:	1c5a      	adds	r2, r3, #1
 800b3ae:	6022      	str	r2, [r4, #0]
 800b3b0:	220a      	movs	r2, #10
 800b3b2:	701a      	strb	r2, [r3, #0]
 800b3b4:	e7ee      	b.n	800b394 <_puts_r+0x88>
	...

0800b3b8 <puts>:
 800b3b8:	4b02      	ldr	r3, [pc, #8]	@ (800b3c4 <puts+0xc>)
 800b3ba:	4601      	mov	r1, r0
 800b3bc:	6818      	ldr	r0, [r3, #0]
 800b3be:	f7ff bfa5 	b.w	800b30c <_puts_r>
 800b3c2:	bf00      	nop
 800b3c4:	20000048 	.word	0x20000048

0800b3c8 <__sread>:
 800b3c8:	b510      	push	{r4, lr}
 800b3ca:	460c      	mov	r4, r1
 800b3cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3d0:	f000 f8fc 	bl	800b5cc <_read_r>
 800b3d4:	2800      	cmp	r0, #0
 800b3d6:	bfab      	itete	ge
 800b3d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b3da:	89a3      	ldrhlt	r3, [r4, #12]
 800b3dc:	181b      	addge	r3, r3, r0
 800b3de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b3e2:	bfac      	ite	ge
 800b3e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b3e6:	81a3      	strhlt	r3, [r4, #12]
 800b3e8:	bd10      	pop	{r4, pc}

0800b3ea <__swrite>:
 800b3ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ee:	461f      	mov	r7, r3
 800b3f0:	898b      	ldrh	r3, [r1, #12]
 800b3f2:	05db      	lsls	r3, r3, #23
 800b3f4:	4605      	mov	r5, r0
 800b3f6:	460c      	mov	r4, r1
 800b3f8:	4616      	mov	r6, r2
 800b3fa:	d505      	bpl.n	800b408 <__swrite+0x1e>
 800b3fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b400:	2302      	movs	r3, #2
 800b402:	2200      	movs	r2, #0
 800b404:	f000 f8d0 	bl	800b5a8 <_lseek_r>
 800b408:	89a3      	ldrh	r3, [r4, #12]
 800b40a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b40e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b412:	81a3      	strh	r3, [r4, #12]
 800b414:	4632      	mov	r2, r6
 800b416:	463b      	mov	r3, r7
 800b418:	4628      	mov	r0, r5
 800b41a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b41e:	f000 b8f7 	b.w	800b610 <_write_r>

0800b422 <__sseek>:
 800b422:	b510      	push	{r4, lr}
 800b424:	460c      	mov	r4, r1
 800b426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b42a:	f000 f8bd 	bl	800b5a8 <_lseek_r>
 800b42e:	1c43      	adds	r3, r0, #1
 800b430:	89a3      	ldrh	r3, [r4, #12]
 800b432:	bf15      	itete	ne
 800b434:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b436:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b43a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b43e:	81a3      	strheq	r3, [r4, #12]
 800b440:	bf18      	it	ne
 800b442:	81a3      	strhne	r3, [r4, #12]
 800b444:	bd10      	pop	{r4, pc}

0800b446 <__sclose>:
 800b446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b44a:	f000 b89d 	b.w	800b588 <_close_r>

0800b44e <__swbuf_r>:
 800b44e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b450:	460e      	mov	r6, r1
 800b452:	4614      	mov	r4, r2
 800b454:	4605      	mov	r5, r0
 800b456:	b118      	cbz	r0, 800b460 <__swbuf_r+0x12>
 800b458:	6a03      	ldr	r3, [r0, #32]
 800b45a:	b90b      	cbnz	r3, 800b460 <__swbuf_r+0x12>
 800b45c:	f7ff ff20 	bl	800b2a0 <__sinit>
 800b460:	69a3      	ldr	r3, [r4, #24]
 800b462:	60a3      	str	r3, [r4, #8]
 800b464:	89a3      	ldrh	r3, [r4, #12]
 800b466:	071a      	lsls	r2, r3, #28
 800b468:	d501      	bpl.n	800b46e <__swbuf_r+0x20>
 800b46a:	6923      	ldr	r3, [r4, #16]
 800b46c:	b943      	cbnz	r3, 800b480 <__swbuf_r+0x32>
 800b46e:	4621      	mov	r1, r4
 800b470:	4628      	mov	r0, r5
 800b472:	f000 f82b 	bl	800b4cc <__swsetup_r>
 800b476:	b118      	cbz	r0, 800b480 <__swbuf_r+0x32>
 800b478:	f04f 37ff 	mov.w	r7, #4294967295
 800b47c:	4638      	mov	r0, r7
 800b47e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b480:	6823      	ldr	r3, [r4, #0]
 800b482:	6922      	ldr	r2, [r4, #16]
 800b484:	1a98      	subs	r0, r3, r2
 800b486:	6963      	ldr	r3, [r4, #20]
 800b488:	b2f6      	uxtb	r6, r6
 800b48a:	4283      	cmp	r3, r0
 800b48c:	4637      	mov	r7, r6
 800b48e:	dc05      	bgt.n	800b49c <__swbuf_r+0x4e>
 800b490:	4621      	mov	r1, r4
 800b492:	4628      	mov	r0, r5
 800b494:	f000 f9d8 	bl	800b848 <_fflush_r>
 800b498:	2800      	cmp	r0, #0
 800b49a:	d1ed      	bne.n	800b478 <__swbuf_r+0x2a>
 800b49c:	68a3      	ldr	r3, [r4, #8]
 800b49e:	3b01      	subs	r3, #1
 800b4a0:	60a3      	str	r3, [r4, #8]
 800b4a2:	6823      	ldr	r3, [r4, #0]
 800b4a4:	1c5a      	adds	r2, r3, #1
 800b4a6:	6022      	str	r2, [r4, #0]
 800b4a8:	701e      	strb	r6, [r3, #0]
 800b4aa:	6962      	ldr	r2, [r4, #20]
 800b4ac:	1c43      	adds	r3, r0, #1
 800b4ae:	429a      	cmp	r2, r3
 800b4b0:	d004      	beq.n	800b4bc <__swbuf_r+0x6e>
 800b4b2:	89a3      	ldrh	r3, [r4, #12]
 800b4b4:	07db      	lsls	r3, r3, #31
 800b4b6:	d5e1      	bpl.n	800b47c <__swbuf_r+0x2e>
 800b4b8:	2e0a      	cmp	r6, #10
 800b4ba:	d1df      	bne.n	800b47c <__swbuf_r+0x2e>
 800b4bc:	4621      	mov	r1, r4
 800b4be:	4628      	mov	r0, r5
 800b4c0:	f000 f9c2 	bl	800b848 <_fflush_r>
 800b4c4:	2800      	cmp	r0, #0
 800b4c6:	d0d9      	beq.n	800b47c <__swbuf_r+0x2e>
 800b4c8:	e7d6      	b.n	800b478 <__swbuf_r+0x2a>
	...

0800b4cc <__swsetup_r>:
 800b4cc:	b538      	push	{r3, r4, r5, lr}
 800b4ce:	4b29      	ldr	r3, [pc, #164]	@ (800b574 <__swsetup_r+0xa8>)
 800b4d0:	4605      	mov	r5, r0
 800b4d2:	6818      	ldr	r0, [r3, #0]
 800b4d4:	460c      	mov	r4, r1
 800b4d6:	b118      	cbz	r0, 800b4e0 <__swsetup_r+0x14>
 800b4d8:	6a03      	ldr	r3, [r0, #32]
 800b4da:	b90b      	cbnz	r3, 800b4e0 <__swsetup_r+0x14>
 800b4dc:	f7ff fee0 	bl	800b2a0 <__sinit>
 800b4e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4e4:	0719      	lsls	r1, r3, #28
 800b4e6:	d422      	bmi.n	800b52e <__swsetup_r+0x62>
 800b4e8:	06da      	lsls	r2, r3, #27
 800b4ea:	d407      	bmi.n	800b4fc <__swsetup_r+0x30>
 800b4ec:	2209      	movs	r2, #9
 800b4ee:	602a      	str	r2, [r5, #0]
 800b4f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4f4:	81a3      	strh	r3, [r4, #12]
 800b4f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b4fa:	e033      	b.n	800b564 <__swsetup_r+0x98>
 800b4fc:	0758      	lsls	r0, r3, #29
 800b4fe:	d512      	bpl.n	800b526 <__swsetup_r+0x5a>
 800b500:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b502:	b141      	cbz	r1, 800b516 <__swsetup_r+0x4a>
 800b504:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b508:	4299      	cmp	r1, r3
 800b50a:	d002      	beq.n	800b512 <__swsetup_r+0x46>
 800b50c:	4628      	mov	r0, r5
 800b50e:	f000 f8cd 	bl	800b6ac <_free_r>
 800b512:	2300      	movs	r3, #0
 800b514:	6363      	str	r3, [r4, #52]	@ 0x34
 800b516:	89a3      	ldrh	r3, [r4, #12]
 800b518:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b51c:	81a3      	strh	r3, [r4, #12]
 800b51e:	2300      	movs	r3, #0
 800b520:	6063      	str	r3, [r4, #4]
 800b522:	6923      	ldr	r3, [r4, #16]
 800b524:	6023      	str	r3, [r4, #0]
 800b526:	89a3      	ldrh	r3, [r4, #12]
 800b528:	f043 0308 	orr.w	r3, r3, #8
 800b52c:	81a3      	strh	r3, [r4, #12]
 800b52e:	6923      	ldr	r3, [r4, #16]
 800b530:	b94b      	cbnz	r3, 800b546 <__swsetup_r+0x7a>
 800b532:	89a3      	ldrh	r3, [r4, #12]
 800b534:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b538:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b53c:	d003      	beq.n	800b546 <__swsetup_r+0x7a>
 800b53e:	4621      	mov	r1, r4
 800b540:	4628      	mov	r0, r5
 800b542:	f000 f9cf 	bl	800b8e4 <__smakebuf_r>
 800b546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b54a:	f013 0201 	ands.w	r2, r3, #1
 800b54e:	d00a      	beq.n	800b566 <__swsetup_r+0x9a>
 800b550:	2200      	movs	r2, #0
 800b552:	60a2      	str	r2, [r4, #8]
 800b554:	6962      	ldr	r2, [r4, #20]
 800b556:	4252      	negs	r2, r2
 800b558:	61a2      	str	r2, [r4, #24]
 800b55a:	6922      	ldr	r2, [r4, #16]
 800b55c:	b942      	cbnz	r2, 800b570 <__swsetup_r+0xa4>
 800b55e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b562:	d1c5      	bne.n	800b4f0 <__swsetup_r+0x24>
 800b564:	bd38      	pop	{r3, r4, r5, pc}
 800b566:	0799      	lsls	r1, r3, #30
 800b568:	bf58      	it	pl
 800b56a:	6962      	ldrpl	r2, [r4, #20]
 800b56c:	60a2      	str	r2, [r4, #8]
 800b56e:	e7f4      	b.n	800b55a <__swsetup_r+0x8e>
 800b570:	2000      	movs	r0, #0
 800b572:	e7f7      	b.n	800b564 <__swsetup_r+0x98>
 800b574:	20000048 	.word	0x20000048

0800b578 <memset>:
 800b578:	4402      	add	r2, r0
 800b57a:	4603      	mov	r3, r0
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d100      	bne.n	800b582 <memset+0xa>
 800b580:	4770      	bx	lr
 800b582:	f803 1b01 	strb.w	r1, [r3], #1
 800b586:	e7f9      	b.n	800b57c <memset+0x4>

0800b588 <_close_r>:
 800b588:	b538      	push	{r3, r4, r5, lr}
 800b58a:	4d06      	ldr	r5, [pc, #24]	@ (800b5a4 <_close_r+0x1c>)
 800b58c:	2300      	movs	r3, #0
 800b58e:	4604      	mov	r4, r0
 800b590:	4608      	mov	r0, r1
 800b592:	602b      	str	r3, [r5, #0]
 800b594:	f7f5 fab7 	bl	8000b06 <_close>
 800b598:	1c43      	adds	r3, r0, #1
 800b59a:	d102      	bne.n	800b5a2 <_close_r+0x1a>
 800b59c:	682b      	ldr	r3, [r5, #0]
 800b59e:	b103      	cbz	r3, 800b5a2 <_close_r+0x1a>
 800b5a0:	6023      	str	r3, [r4, #0]
 800b5a2:	bd38      	pop	{r3, r4, r5, pc}
 800b5a4:	20001ad0 	.word	0x20001ad0

0800b5a8 <_lseek_r>:
 800b5a8:	b538      	push	{r3, r4, r5, lr}
 800b5aa:	4d07      	ldr	r5, [pc, #28]	@ (800b5c8 <_lseek_r+0x20>)
 800b5ac:	4604      	mov	r4, r0
 800b5ae:	4608      	mov	r0, r1
 800b5b0:	4611      	mov	r1, r2
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	602a      	str	r2, [r5, #0]
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	f7f5 facc 	bl	8000b54 <_lseek>
 800b5bc:	1c43      	adds	r3, r0, #1
 800b5be:	d102      	bne.n	800b5c6 <_lseek_r+0x1e>
 800b5c0:	682b      	ldr	r3, [r5, #0]
 800b5c2:	b103      	cbz	r3, 800b5c6 <_lseek_r+0x1e>
 800b5c4:	6023      	str	r3, [r4, #0]
 800b5c6:	bd38      	pop	{r3, r4, r5, pc}
 800b5c8:	20001ad0 	.word	0x20001ad0

0800b5cc <_read_r>:
 800b5cc:	b538      	push	{r3, r4, r5, lr}
 800b5ce:	4d07      	ldr	r5, [pc, #28]	@ (800b5ec <_read_r+0x20>)
 800b5d0:	4604      	mov	r4, r0
 800b5d2:	4608      	mov	r0, r1
 800b5d4:	4611      	mov	r1, r2
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	602a      	str	r2, [r5, #0]
 800b5da:	461a      	mov	r2, r3
 800b5dc:	f7f5 fa5a 	bl	8000a94 <_read>
 800b5e0:	1c43      	adds	r3, r0, #1
 800b5e2:	d102      	bne.n	800b5ea <_read_r+0x1e>
 800b5e4:	682b      	ldr	r3, [r5, #0]
 800b5e6:	b103      	cbz	r3, 800b5ea <_read_r+0x1e>
 800b5e8:	6023      	str	r3, [r4, #0]
 800b5ea:	bd38      	pop	{r3, r4, r5, pc}
 800b5ec:	20001ad0 	.word	0x20001ad0

0800b5f0 <_sbrk_r>:
 800b5f0:	b538      	push	{r3, r4, r5, lr}
 800b5f2:	4d06      	ldr	r5, [pc, #24]	@ (800b60c <_sbrk_r+0x1c>)
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	4604      	mov	r4, r0
 800b5f8:	4608      	mov	r0, r1
 800b5fa:	602b      	str	r3, [r5, #0]
 800b5fc:	f7f5 fab8 	bl	8000b70 <_sbrk>
 800b600:	1c43      	adds	r3, r0, #1
 800b602:	d102      	bne.n	800b60a <_sbrk_r+0x1a>
 800b604:	682b      	ldr	r3, [r5, #0]
 800b606:	b103      	cbz	r3, 800b60a <_sbrk_r+0x1a>
 800b608:	6023      	str	r3, [r4, #0]
 800b60a:	bd38      	pop	{r3, r4, r5, pc}
 800b60c:	20001ad0 	.word	0x20001ad0

0800b610 <_write_r>:
 800b610:	b538      	push	{r3, r4, r5, lr}
 800b612:	4d07      	ldr	r5, [pc, #28]	@ (800b630 <_write_r+0x20>)
 800b614:	4604      	mov	r4, r0
 800b616:	4608      	mov	r0, r1
 800b618:	4611      	mov	r1, r2
 800b61a:	2200      	movs	r2, #0
 800b61c:	602a      	str	r2, [r5, #0]
 800b61e:	461a      	mov	r2, r3
 800b620:	f7f5 fa55 	bl	8000ace <_write>
 800b624:	1c43      	adds	r3, r0, #1
 800b626:	d102      	bne.n	800b62e <_write_r+0x1e>
 800b628:	682b      	ldr	r3, [r5, #0]
 800b62a:	b103      	cbz	r3, 800b62e <_write_r+0x1e>
 800b62c:	6023      	str	r3, [r4, #0]
 800b62e:	bd38      	pop	{r3, r4, r5, pc}
 800b630:	20001ad0 	.word	0x20001ad0

0800b634 <__errno>:
 800b634:	4b01      	ldr	r3, [pc, #4]	@ (800b63c <__errno+0x8>)
 800b636:	6818      	ldr	r0, [r3, #0]
 800b638:	4770      	bx	lr
 800b63a:	bf00      	nop
 800b63c:	20000048 	.word	0x20000048

0800b640 <__libc_init_array>:
 800b640:	b570      	push	{r4, r5, r6, lr}
 800b642:	4d0d      	ldr	r5, [pc, #52]	@ (800b678 <__libc_init_array+0x38>)
 800b644:	4c0d      	ldr	r4, [pc, #52]	@ (800b67c <__libc_init_array+0x3c>)
 800b646:	1b64      	subs	r4, r4, r5
 800b648:	10a4      	asrs	r4, r4, #2
 800b64a:	2600      	movs	r6, #0
 800b64c:	42a6      	cmp	r6, r4
 800b64e:	d109      	bne.n	800b664 <__libc_init_array+0x24>
 800b650:	4d0b      	ldr	r5, [pc, #44]	@ (800b680 <__libc_init_array+0x40>)
 800b652:	4c0c      	ldr	r4, [pc, #48]	@ (800b684 <__libc_init_array+0x44>)
 800b654:	f000 f9a4 	bl	800b9a0 <_init>
 800b658:	1b64      	subs	r4, r4, r5
 800b65a:	10a4      	asrs	r4, r4, #2
 800b65c:	2600      	movs	r6, #0
 800b65e:	42a6      	cmp	r6, r4
 800b660:	d105      	bne.n	800b66e <__libc_init_array+0x2e>
 800b662:	bd70      	pop	{r4, r5, r6, pc}
 800b664:	f855 3b04 	ldr.w	r3, [r5], #4
 800b668:	4798      	blx	r3
 800b66a:	3601      	adds	r6, #1
 800b66c:	e7ee      	b.n	800b64c <__libc_init_array+0xc>
 800b66e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b672:	4798      	blx	r3
 800b674:	3601      	adds	r6, #1
 800b676:	e7f2      	b.n	800b65e <__libc_init_array+0x1e>
 800b678:	0800bafc 	.word	0x0800bafc
 800b67c:	0800bafc 	.word	0x0800bafc
 800b680:	0800bafc 	.word	0x0800bafc
 800b684:	0800bb00 	.word	0x0800bb00

0800b688 <__retarget_lock_init_recursive>:
 800b688:	4770      	bx	lr

0800b68a <__retarget_lock_acquire_recursive>:
 800b68a:	4770      	bx	lr

0800b68c <__retarget_lock_release_recursive>:
 800b68c:	4770      	bx	lr

0800b68e <memcpy>:
 800b68e:	440a      	add	r2, r1
 800b690:	4291      	cmp	r1, r2
 800b692:	f100 33ff 	add.w	r3, r0, #4294967295
 800b696:	d100      	bne.n	800b69a <memcpy+0xc>
 800b698:	4770      	bx	lr
 800b69a:	b510      	push	{r4, lr}
 800b69c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6a4:	4291      	cmp	r1, r2
 800b6a6:	d1f9      	bne.n	800b69c <memcpy+0xe>
 800b6a8:	bd10      	pop	{r4, pc}
	...

0800b6ac <_free_r>:
 800b6ac:	b538      	push	{r3, r4, r5, lr}
 800b6ae:	4605      	mov	r5, r0
 800b6b0:	2900      	cmp	r1, #0
 800b6b2:	d041      	beq.n	800b738 <_free_r+0x8c>
 800b6b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6b8:	1f0c      	subs	r4, r1, #4
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	bfb8      	it	lt
 800b6be:	18e4      	addlt	r4, r4, r3
 800b6c0:	f7ff fd56 	bl	800b170 <__malloc_lock>
 800b6c4:	4a1d      	ldr	r2, [pc, #116]	@ (800b73c <_free_r+0x90>)
 800b6c6:	6813      	ldr	r3, [r2, #0]
 800b6c8:	b933      	cbnz	r3, 800b6d8 <_free_r+0x2c>
 800b6ca:	6063      	str	r3, [r4, #4]
 800b6cc:	6014      	str	r4, [r2, #0]
 800b6ce:	4628      	mov	r0, r5
 800b6d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6d4:	f7ff bd52 	b.w	800b17c <__malloc_unlock>
 800b6d8:	42a3      	cmp	r3, r4
 800b6da:	d908      	bls.n	800b6ee <_free_r+0x42>
 800b6dc:	6820      	ldr	r0, [r4, #0]
 800b6de:	1821      	adds	r1, r4, r0
 800b6e0:	428b      	cmp	r3, r1
 800b6e2:	bf01      	itttt	eq
 800b6e4:	6819      	ldreq	r1, [r3, #0]
 800b6e6:	685b      	ldreq	r3, [r3, #4]
 800b6e8:	1809      	addeq	r1, r1, r0
 800b6ea:	6021      	streq	r1, [r4, #0]
 800b6ec:	e7ed      	b.n	800b6ca <_free_r+0x1e>
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	b10b      	cbz	r3, 800b6f8 <_free_r+0x4c>
 800b6f4:	42a3      	cmp	r3, r4
 800b6f6:	d9fa      	bls.n	800b6ee <_free_r+0x42>
 800b6f8:	6811      	ldr	r1, [r2, #0]
 800b6fa:	1850      	adds	r0, r2, r1
 800b6fc:	42a0      	cmp	r0, r4
 800b6fe:	d10b      	bne.n	800b718 <_free_r+0x6c>
 800b700:	6820      	ldr	r0, [r4, #0]
 800b702:	4401      	add	r1, r0
 800b704:	1850      	adds	r0, r2, r1
 800b706:	4283      	cmp	r3, r0
 800b708:	6011      	str	r1, [r2, #0]
 800b70a:	d1e0      	bne.n	800b6ce <_free_r+0x22>
 800b70c:	6818      	ldr	r0, [r3, #0]
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	6053      	str	r3, [r2, #4]
 800b712:	4408      	add	r0, r1
 800b714:	6010      	str	r0, [r2, #0]
 800b716:	e7da      	b.n	800b6ce <_free_r+0x22>
 800b718:	d902      	bls.n	800b720 <_free_r+0x74>
 800b71a:	230c      	movs	r3, #12
 800b71c:	602b      	str	r3, [r5, #0]
 800b71e:	e7d6      	b.n	800b6ce <_free_r+0x22>
 800b720:	6820      	ldr	r0, [r4, #0]
 800b722:	1821      	adds	r1, r4, r0
 800b724:	428b      	cmp	r3, r1
 800b726:	bf04      	itt	eq
 800b728:	6819      	ldreq	r1, [r3, #0]
 800b72a:	685b      	ldreq	r3, [r3, #4]
 800b72c:	6063      	str	r3, [r4, #4]
 800b72e:	bf04      	itt	eq
 800b730:	1809      	addeq	r1, r1, r0
 800b732:	6021      	streq	r1, [r4, #0]
 800b734:	6054      	str	r4, [r2, #4]
 800b736:	e7ca      	b.n	800b6ce <_free_r+0x22>
 800b738:	bd38      	pop	{r3, r4, r5, pc}
 800b73a:	bf00      	nop
 800b73c:	20001990 	.word	0x20001990

0800b740 <__sflush_r>:
 800b740:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b748:	0716      	lsls	r6, r2, #28
 800b74a:	4605      	mov	r5, r0
 800b74c:	460c      	mov	r4, r1
 800b74e:	d454      	bmi.n	800b7fa <__sflush_r+0xba>
 800b750:	684b      	ldr	r3, [r1, #4]
 800b752:	2b00      	cmp	r3, #0
 800b754:	dc02      	bgt.n	800b75c <__sflush_r+0x1c>
 800b756:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b758:	2b00      	cmp	r3, #0
 800b75a:	dd48      	ble.n	800b7ee <__sflush_r+0xae>
 800b75c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b75e:	2e00      	cmp	r6, #0
 800b760:	d045      	beq.n	800b7ee <__sflush_r+0xae>
 800b762:	2300      	movs	r3, #0
 800b764:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b768:	682f      	ldr	r7, [r5, #0]
 800b76a:	6a21      	ldr	r1, [r4, #32]
 800b76c:	602b      	str	r3, [r5, #0]
 800b76e:	d030      	beq.n	800b7d2 <__sflush_r+0x92>
 800b770:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b772:	89a3      	ldrh	r3, [r4, #12]
 800b774:	0759      	lsls	r1, r3, #29
 800b776:	d505      	bpl.n	800b784 <__sflush_r+0x44>
 800b778:	6863      	ldr	r3, [r4, #4]
 800b77a:	1ad2      	subs	r2, r2, r3
 800b77c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b77e:	b10b      	cbz	r3, 800b784 <__sflush_r+0x44>
 800b780:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b782:	1ad2      	subs	r2, r2, r3
 800b784:	2300      	movs	r3, #0
 800b786:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b788:	6a21      	ldr	r1, [r4, #32]
 800b78a:	4628      	mov	r0, r5
 800b78c:	47b0      	blx	r6
 800b78e:	1c43      	adds	r3, r0, #1
 800b790:	89a3      	ldrh	r3, [r4, #12]
 800b792:	d106      	bne.n	800b7a2 <__sflush_r+0x62>
 800b794:	6829      	ldr	r1, [r5, #0]
 800b796:	291d      	cmp	r1, #29
 800b798:	d82b      	bhi.n	800b7f2 <__sflush_r+0xb2>
 800b79a:	4a2a      	ldr	r2, [pc, #168]	@ (800b844 <__sflush_r+0x104>)
 800b79c:	410a      	asrs	r2, r1
 800b79e:	07d6      	lsls	r6, r2, #31
 800b7a0:	d427      	bmi.n	800b7f2 <__sflush_r+0xb2>
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	6062      	str	r2, [r4, #4]
 800b7a6:	04d9      	lsls	r1, r3, #19
 800b7a8:	6922      	ldr	r2, [r4, #16]
 800b7aa:	6022      	str	r2, [r4, #0]
 800b7ac:	d504      	bpl.n	800b7b8 <__sflush_r+0x78>
 800b7ae:	1c42      	adds	r2, r0, #1
 800b7b0:	d101      	bne.n	800b7b6 <__sflush_r+0x76>
 800b7b2:	682b      	ldr	r3, [r5, #0]
 800b7b4:	b903      	cbnz	r3, 800b7b8 <__sflush_r+0x78>
 800b7b6:	6560      	str	r0, [r4, #84]	@ 0x54
 800b7b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b7ba:	602f      	str	r7, [r5, #0]
 800b7bc:	b1b9      	cbz	r1, 800b7ee <__sflush_r+0xae>
 800b7be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b7c2:	4299      	cmp	r1, r3
 800b7c4:	d002      	beq.n	800b7cc <__sflush_r+0x8c>
 800b7c6:	4628      	mov	r0, r5
 800b7c8:	f7ff ff70 	bl	800b6ac <_free_r>
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	6363      	str	r3, [r4, #52]	@ 0x34
 800b7d0:	e00d      	b.n	800b7ee <__sflush_r+0xae>
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	4628      	mov	r0, r5
 800b7d6:	47b0      	blx	r6
 800b7d8:	4602      	mov	r2, r0
 800b7da:	1c50      	adds	r0, r2, #1
 800b7dc:	d1c9      	bne.n	800b772 <__sflush_r+0x32>
 800b7de:	682b      	ldr	r3, [r5, #0]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d0c6      	beq.n	800b772 <__sflush_r+0x32>
 800b7e4:	2b1d      	cmp	r3, #29
 800b7e6:	d001      	beq.n	800b7ec <__sflush_r+0xac>
 800b7e8:	2b16      	cmp	r3, #22
 800b7ea:	d11e      	bne.n	800b82a <__sflush_r+0xea>
 800b7ec:	602f      	str	r7, [r5, #0]
 800b7ee:	2000      	movs	r0, #0
 800b7f0:	e022      	b.n	800b838 <__sflush_r+0xf8>
 800b7f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7f6:	b21b      	sxth	r3, r3
 800b7f8:	e01b      	b.n	800b832 <__sflush_r+0xf2>
 800b7fa:	690f      	ldr	r7, [r1, #16]
 800b7fc:	2f00      	cmp	r7, #0
 800b7fe:	d0f6      	beq.n	800b7ee <__sflush_r+0xae>
 800b800:	0793      	lsls	r3, r2, #30
 800b802:	680e      	ldr	r6, [r1, #0]
 800b804:	bf08      	it	eq
 800b806:	694b      	ldreq	r3, [r1, #20]
 800b808:	600f      	str	r7, [r1, #0]
 800b80a:	bf18      	it	ne
 800b80c:	2300      	movne	r3, #0
 800b80e:	eba6 0807 	sub.w	r8, r6, r7
 800b812:	608b      	str	r3, [r1, #8]
 800b814:	f1b8 0f00 	cmp.w	r8, #0
 800b818:	dde9      	ble.n	800b7ee <__sflush_r+0xae>
 800b81a:	6a21      	ldr	r1, [r4, #32]
 800b81c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b81e:	4643      	mov	r3, r8
 800b820:	463a      	mov	r2, r7
 800b822:	4628      	mov	r0, r5
 800b824:	47b0      	blx	r6
 800b826:	2800      	cmp	r0, #0
 800b828:	dc08      	bgt.n	800b83c <__sflush_r+0xfc>
 800b82a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b82e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b832:	81a3      	strh	r3, [r4, #12]
 800b834:	f04f 30ff 	mov.w	r0, #4294967295
 800b838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b83c:	4407      	add	r7, r0
 800b83e:	eba8 0800 	sub.w	r8, r8, r0
 800b842:	e7e7      	b.n	800b814 <__sflush_r+0xd4>
 800b844:	dfbffffe 	.word	0xdfbffffe

0800b848 <_fflush_r>:
 800b848:	b538      	push	{r3, r4, r5, lr}
 800b84a:	690b      	ldr	r3, [r1, #16]
 800b84c:	4605      	mov	r5, r0
 800b84e:	460c      	mov	r4, r1
 800b850:	b913      	cbnz	r3, 800b858 <_fflush_r+0x10>
 800b852:	2500      	movs	r5, #0
 800b854:	4628      	mov	r0, r5
 800b856:	bd38      	pop	{r3, r4, r5, pc}
 800b858:	b118      	cbz	r0, 800b862 <_fflush_r+0x1a>
 800b85a:	6a03      	ldr	r3, [r0, #32]
 800b85c:	b90b      	cbnz	r3, 800b862 <_fflush_r+0x1a>
 800b85e:	f7ff fd1f 	bl	800b2a0 <__sinit>
 800b862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d0f3      	beq.n	800b852 <_fflush_r+0xa>
 800b86a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b86c:	07d0      	lsls	r0, r2, #31
 800b86e:	d404      	bmi.n	800b87a <_fflush_r+0x32>
 800b870:	0599      	lsls	r1, r3, #22
 800b872:	d402      	bmi.n	800b87a <_fflush_r+0x32>
 800b874:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b876:	f7ff ff08 	bl	800b68a <__retarget_lock_acquire_recursive>
 800b87a:	4628      	mov	r0, r5
 800b87c:	4621      	mov	r1, r4
 800b87e:	f7ff ff5f 	bl	800b740 <__sflush_r>
 800b882:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b884:	07da      	lsls	r2, r3, #31
 800b886:	4605      	mov	r5, r0
 800b888:	d4e4      	bmi.n	800b854 <_fflush_r+0xc>
 800b88a:	89a3      	ldrh	r3, [r4, #12]
 800b88c:	059b      	lsls	r3, r3, #22
 800b88e:	d4e1      	bmi.n	800b854 <_fflush_r+0xc>
 800b890:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b892:	f7ff fefb 	bl	800b68c <__retarget_lock_release_recursive>
 800b896:	e7dd      	b.n	800b854 <_fflush_r+0xc>

0800b898 <__swhatbuf_r>:
 800b898:	b570      	push	{r4, r5, r6, lr}
 800b89a:	460c      	mov	r4, r1
 800b89c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8a0:	2900      	cmp	r1, #0
 800b8a2:	b096      	sub	sp, #88	@ 0x58
 800b8a4:	4615      	mov	r5, r2
 800b8a6:	461e      	mov	r6, r3
 800b8a8:	da0d      	bge.n	800b8c6 <__swhatbuf_r+0x2e>
 800b8aa:	89a3      	ldrh	r3, [r4, #12]
 800b8ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b8b0:	f04f 0100 	mov.w	r1, #0
 800b8b4:	bf14      	ite	ne
 800b8b6:	2340      	movne	r3, #64	@ 0x40
 800b8b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b8bc:	2000      	movs	r0, #0
 800b8be:	6031      	str	r1, [r6, #0]
 800b8c0:	602b      	str	r3, [r5, #0]
 800b8c2:	b016      	add	sp, #88	@ 0x58
 800b8c4:	bd70      	pop	{r4, r5, r6, pc}
 800b8c6:	466a      	mov	r2, sp
 800b8c8:	f000 f848 	bl	800b95c <_fstat_r>
 800b8cc:	2800      	cmp	r0, #0
 800b8ce:	dbec      	blt.n	800b8aa <__swhatbuf_r+0x12>
 800b8d0:	9901      	ldr	r1, [sp, #4]
 800b8d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b8d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b8da:	4259      	negs	r1, r3
 800b8dc:	4159      	adcs	r1, r3
 800b8de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b8e2:	e7eb      	b.n	800b8bc <__swhatbuf_r+0x24>

0800b8e4 <__smakebuf_r>:
 800b8e4:	898b      	ldrh	r3, [r1, #12]
 800b8e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8e8:	079d      	lsls	r5, r3, #30
 800b8ea:	4606      	mov	r6, r0
 800b8ec:	460c      	mov	r4, r1
 800b8ee:	d507      	bpl.n	800b900 <__smakebuf_r+0x1c>
 800b8f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b8f4:	6023      	str	r3, [r4, #0]
 800b8f6:	6123      	str	r3, [r4, #16]
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	6163      	str	r3, [r4, #20]
 800b8fc:	b003      	add	sp, #12
 800b8fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b900:	ab01      	add	r3, sp, #4
 800b902:	466a      	mov	r2, sp
 800b904:	f7ff ffc8 	bl	800b898 <__swhatbuf_r>
 800b908:	9f00      	ldr	r7, [sp, #0]
 800b90a:	4605      	mov	r5, r0
 800b90c:	4639      	mov	r1, r7
 800b90e:	4630      	mov	r0, r6
 800b910:	f7ff fbae 	bl	800b070 <_malloc_r>
 800b914:	b948      	cbnz	r0, 800b92a <__smakebuf_r+0x46>
 800b916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b91a:	059a      	lsls	r2, r3, #22
 800b91c:	d4ee      	bmi.n	800b8fc <__smakebuf_r+0x18>
 800b91e:	f023 0303 	bic.w	r3, r3, #3
 800b922:	f043 0302 	orr.w	r3, r3, #2
 800b926:	81a3      	strh	r3, [r4, #12]
 800b928:	e7e2      	b.n	800b8f0 <__smakebuf_r+0xc>
 800b92a:	89a3      	ldrh	r3, [r4, #12]
 800b92c:	6020      	str	r0, [r4, #0]
 800b92e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b932:	81a3      	strh	r3, [r4, #12]
 800b934:	9b01      	ldr	r3, [sp, #4]
 800b936:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b93a:	b15b      	cbz	r3, 800b954 <__smakebuf_r+0x70>
 800b93c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b940:	4630      	mov	r0, r6
 800b942:	f000 f81d 	bl	800b980 <_isatty_r>
 800b946:	b128      	cbz	r0, 800b954 <__smakebuf_r+0x70>
 800b948:	89a3      	ldrh	r3, [r4, #12]
 800b94a:	f023 0303 	bic.w	r3, r3, #3
 800b94e:	f043 0301 	orr.w	r3, r3, #1
 800b952:	81a3      	strh	r3, [r4, #12]
 800b954:	89a3      	ldrh	r3, [r4, #12]
 800b956:	431d      	orrs	r5, r3
 800b958:	81a5      	strh	r5, [r4, #12]
 800b95a:	e7cf      	b.n	800b8fc <__smakebuf_r+0x18>

0800b95c <_fstat_r>:
 800b95c:	b538      	push	{r3, r4, r5, lr}
 800b95e:	4d07      	ldr	r5, [pc, #28]	@ (800b97c <_fstat_r+0x20>)
 800b960:	2300      	movs	r3, #0
 800b962:	4604      	mov	r4, r0
 800b964:	4608      	mov	r0, r1
 800b966:	4611      	mov	r1, r2
 800b968:	602b      	str	r3, [r5, #0]
 800b96a:	f7f5 f8d8 	bl	8000b1e <_fstat>
 800b96e:	1c43      	adds	r3, r0, #1
 800b970:	d102      	bne.n	800b978 <_fstat_r+0x1c>
 800b972:	682b      	ldr	r3, [r5, #0]
 800b974:	b103      	cbz	r3, 800b978 <_fstat_r+0x1c>
 800b976:	6023      	str	r3, [r4, #0]
 800b978:	bd38      	pop	{r3, r4, r5, pc}
 800b97a:	bf00      	nop
 800b97c:	20001ad0 	.word	0x20001ad0

0800b980 <_isatty_r>:
 800b980:	b538      	push	{r3, r4, r5, lr}
 800b982:	4d06      	ldr	r5, [pc, #24]	@ (800b99c <_isatty_r+0x1c>)
 800b984:	2300      	movs	r3, #0
 800b986:	4604      	mov	r4, r0
 800b988:	4608      	mov	r0, r1
 800b98a:	602b      	str	r3, [r5, #0]
 800b98c:	f7f5 f8d7 	bl	8000b3e <_isatty>
 800b990:	1c43      	adds	r3, r0, #1
 800b992:	d102      	bne.n	800b99a <_isatty_r+0x1a>
 800b994:	682b      	ldr	r3, [r5, #0]
 800b996:	b103      	cbz	r3, 800b99a <_isatty_r+0x1a>
 800b998:	6023      	str	r3, [r4, #0]
 800b99a:	bd38      	pop	{r3, r4, r5, pc}
 800b99c:	20001ad0 	.word	0x20001ad0

0800b9a0 <_init>:
 800b9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9a2:	bf00      	nop
 800b9a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9a6:	bc08      	pop	{r3}
 800b9a8:	469e      	mov	lr, r3
 800b9aa:	4770      	bx	lr

0800b9ac <_fini>:
 800b9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ae:	bf00      	nop
 800b9b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9b2:	bc08      	pop	{r3}
 800b9b4:	469e      	mov	lr, r3
 800b9b6:	4770      	bx	lr
